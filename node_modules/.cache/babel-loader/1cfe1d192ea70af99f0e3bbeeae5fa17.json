{"ast":null,"code":"import { resetComponent } from '../../style';\nimport { initZoomMotion } from '../../style/motion';\nimport getArrowStyle, { MAX_VERTICAL_CONTENT_RADIUS } from '../../style/placementArrow';\nimport { genComponentStyleHook, genPresetColor, mergeToken } from '../../theme/internal';\n\nconst genTooltipStyle = token => {\n  const {\n    componentCls,\n    // ant-tooltip\n    tooltipMaxWidth,\n    tooltipColor,\n    tooltipBg,\n    tooltipBorderRadius,\n    zIndexPopup,\n    controlHeight,\n    boxShadowSecondary,\n    paddingSM,\n    paddingXS,\n    tooltipRadiusOuter\n  } = token;\n  return [{\n    [componentCls]: Object.assign(Object.assign(Object.assign(Object.assign({}, resetComponent(token)), {\n      position: 'absolute',\n      zIndex: zIndexPopup,\n      display: 'block',\n      width: 'max-content',\n      maxWidth: tooltipMaxWidth,\n      visibility: 'visible',\n      transformOrigin: `var(--arrow-x, 50%) var(--arrow-y, 50%)`,\n      '&-hidden': {\n        display: 'none'\n      },\n      '--antd-arrow-background-color': tooltipBg,\n      // Wrapper for the tooltip content\n      [`${componentCls}-inner`]: {\n        minWidth: controlHeight,\n        minHeight: controlHeight,\n        padding: `${paddingSM / 2}px ${paddingXS}px`,\n        color: tooltipColor,\n        textAlign: 'start',\n        textDecoration: 'none',\n        wordWrap: 'break-word',\n        backgroundColor: tooltipBg,\n        borderRadius: tooltipBorderRadius,\n        boxShadow: boxShadowSecondary,\n        boxSizing: 'border-box'\n      },\n      // Limit left and right placement radius\n      [[`&-placement-left`, `&-placement-leftTop`, `&-placement-leftBottom`, `&-placement-right`, `&-placement-rightTop`, `&-placement-rightBottom`].join(',')]: {\n        [`${componentCls}-inner`]: {\n          borderRadius: Math.min(tooltipBorderRadius, MAX_VERTICAL_CONTENT_RADIUS)\n        }\n      },\n      [`${componentCls}-content`]: {\n        position: 'relative'\n      }\n    }), genPresetColor(token, (colorKey, _ref) => {\n      let {\n        darkColor\n      } = _ref;\n      return {\n        [`&${componentCls}-${colorKey}`]: {\n          [`${componentCls}-inner`]: {\n            backgroundColor: darkColor\n          },\n          [`${componentCls}-arrow`]: {\n            '--antd-arrow-background-color': darkColor\n          }\n        }\n      };\n    })), {\n      // RTL\n      '&-rtl': {\n        direction: 'rtl'\n      }\n    })\n  }, // Arrow Style\n  getArrowStyle(mergeToken(token, {\n    borderRadiusOuter: tooltipRadiusOuter\n  }), {\n    colorBg: 'var(--antd-arrow-background-color)',\n    contentRadius: tooltipBorderRadius,\n    limitVerticalRadius: true\n  }), // Pure Render\n  {\n    [`${componentCls}-pure`]: {\n      position: 'relative',\n      maxWidth: 'none',\n      margin: token.sizePopupArrow\n    }\n  }];\n}; // ============================== Export ==============================\n\n\nexport default ((prefixCls, injectStyle) => {\n  const useOriginHook = genComponentStyleHook('Tooltip', token => {\n    // Popover use Tooltip as internal component. We do not need to handle this.\n    if (injectStyle === false) {\n      return [];\n    }\n\n    const {\n      borderRadius,\n      colorTextLightSolid,\n      colorBgDefault,\n      borderRadiusOuter\n    } = token;\n    const TooltipToken = mergeToken(token, {\n      // default variables\n      tooltipMaxWidth: 250,\n      tooltipColor: colorTextLightSolid,\n      tooltipBorderRadius: borderRadius,\n      tooltipBg: colorBgDefault,\n      tooltipRadiusOuter: borderRadiusOuter > 4 ? 4 : borderRadiusOuter\n    });\n    return [genTooltipStyle(TooltipToken), initZoomMotion(token, 'zoom-big-fast')];\n  }, _ref2 => {\n    let {\n      zIndexPopupBase,\n      colorBgSpotlight\n    } = _ref2;\n    return {\n      zIndexPopup: zIndexPopupBase + 70,\n      colorBgDefault: colorBgSpotlight\n    };\n  }, {\n    resetStyle: false\n  });\n  return useOriginHook(prefixCls);\n});","map":{"version":3,"sources":["/Users/ravisrivastava/Downloads/newbcom/node_modules/antd/es/tooltip/style/index.js"],"names":["resetComponent","initZoomMotion","getArrowStyle","MAX_VERTICAL_CONTENT_RADIUS","genComponentStyleHook","genPresetColor","mergeToken","genTooltipStyle","token","componentCls","tooltipMaxWidth","tooltipColor","tooltipBg","tooltipBorderRadius","zIndexPopup","controlHeight","boxShadowSecondary","paddingSM","paddingXS","tooltipRadiusOuter","Object","assign","position","zIndex","display","width","maxWidth","visibility","transformOrigin","minWidth","minHeight","padding","color","textAlign","textDecoration","wordWrap","backgroundColor","borderRadius","boxShadow","boxSizing","join","Math","min","colorKey","_ref","darkColor","direction","borderRadiusOuter","colorBg","contentRadius","limitVerticalRadius","margin","sizePopupArrow","prefixCls","injectStyle","useOriginHook","colorTextLightSolid","colorBgDefault","TooltipToken","_ref2","zIndexPopupBase","colorBgSpotlight","resetStyle"],"mappings":"AAAA,SAASA,cAAT,QAA+B,aAA/B;AACA,SAASC,cAAT,QAA+B,oBAA/B;AACA,OAAOC,aAAP,IAAwBC,2BAAxB,QAA2D,4BAA3D;AACA,SAASC,qBAAT,EAAgCC,cAAhC,EAAgDC,UAAhD,QAAkE,sBAAlE;;AACA,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAC/B,QAAM;AACJC,IAAAA,YADI;AAEJ;AACAC,IAAAA,eAHI;AAIJC,IAAAA,YAJI;AAKJC,IAAAA,SALI;AAMJC,IAAAA,mBANI;AAOJC,IAAAA,WAPI;AAQJC,IAAAA,aARI;AASJC,IAAAA,kBATI;AAUJC,IAAAA,SAVI;AAWJC,IAAAA,SAXI;AAYJC,IAAAA;AAZI,MAaFX,KAbJ;AAcA,SAAO,CAAC;AACN,KAACC,YAAD,GAAgBW,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBrB,cAAc,CAACQ,KAAD,CAAhC,CAAd,EAAwD;AAClGc,MAAAA,QAAQ,EAAE,UADwF;AAElGC,MAAAA,MAAM,EAAET,WAF0F;AAGlGU,MAAAA,OAAO,EAAE,OAHyF;AAIlGC,MAAAA,KAAK,EAAE,aAJ2F;AAKlGC,MAAAA,QAAQ,EAAEhB,eALwF;AAMlGiB,MAAAA,UAAU,EAAE,SANsF;AAOlGC,MAAAA,eAAe,EAAG,yCAPgF;AAQlG,kBAAY;AACVJ,QAAAA,OAAO,EAAE;AADC,OARsF;AAWlG,uCAAiCZ,SAXiE;AAYlG;AACA,OAAE,GAAEH,YAAa,QAAjB,GAA2B;AACzBoB,QAAAA,QAAQ,EAAEd,aADe;AAEzBe,QAAAA,SAAS,EAAEf,aAFc;AAGzBgB,QAAAA,OAAO,EAAG,GAAEd,SAAS,GAAG,CAAE,MAAKC,SAAU,IAHhB;AAIzBc,QAAAA,KAAK,EAAErB,YAJkB;AAKzBsB,QAAAA,SAAS,EAAE,OALc;AAMzBC,QAAAA,cAAc,EAAE,MANS;AAOzBC,QAAAA,QAAQ,EAAE,YAPe;AAQzBC,QAAAA,eAAe,EAAExB,SARQ;AASzByB,QAAAA,YAAY,EAAExB,mBATW;AAUzByB,QAAAA,SAAS,EAAEtB,kBAVc;AAWzBuB,QAAAA,SAAS,EAAE;AAXc,OAbuE;AA0BlG;AACA,OAAC,CAAE,kBAAF,EAAsB,qBAAtB,EAA6C,wBAA7C,EAAuE,mBAAvE,EAA4F,sBAA5F,EAAoH,yBAApH,EAA8IC,IAA9I,CAAmJ,GAAnJ,CAAD,GAA2J;AACzJ,SAAE,GAAE/B,YAAa,QAAjB,GAA2B;AACzB4B,UAAAA,YAAY,EAAEI,IAAI,CAACC,GAAL,CAAS7B,mBAAT,EAA8BV,2BAA9B;AADW;AAD8H,OA3BzD;AAgClG,OAAE,GAAEM,YAAa,UAAjB,GAA6B;AAC3Ba,QAAAA,QAAQ,EAAE;AADiB;AAhCqE,KAAxD,CAAd,EAmC1BjB,cAAc,CAACG,KAAD,EAAQ,CAACmC,QAAD,EAAWC,IAAX,KAAoB;AAC5C,UAAI;AACFC,QAAAA;AADE,UAEAD,IAFJ;AAGA,aAAO;AACL,SAAE,IAAGnC,YAAa,IAAGkC,QAAS,EAA9B,GAAkC;AAChC,WAAE,GAAElC,YAAa,QAAjB,GAA2B;AACzB2B,YAAAA,eAAe,EAAES;AADQ,WADK;AAIhC,WAAE,GAAEpC,YAAa,QAAjB,GAA2B;AACzB,6CAAiCoC;AADR;AAJK;AAD7B,OAAP;AAUD,KAdiB,CAnCY,CAAd,EAiDX;AACH;AACA,eAAS;AACPC,QAAAA,SAAS,EAAE;AADJ;AAFN,KAjDW;AADV,GAAD,EAyDP;AACA5C,EAAAA,aAAa,CAACI,UAAU,CAACE,KAAD,EAAQ;AAC9BuC,IAAAA,iBAAiB,EAAE5B;AADW,GAAR,CAAX,EAET;AACF6B,IAAAA,OAAO,EAAE,oCADP;AAEFC,IAAAA,aAAa,EAAEpC,mBAFb;AAGFqC,IAAAA,mBAAmB,EAAE;AAHnB,GAFS,CA1DN,EAiEP;AACA;AACE,KAAE,GAAEzC,YAAa,OAAjB,GAA0B;AACxBa,MAAAA,QAAQ,EAAE,UADc;AAExBI,MAAAA,QAAQ,EAAE,MAFc;AAGxByB,MAAAA,MAAM,EAAE3C,KAAK,CAAC4C;AAHU;AAD5B,GAlEO,CAAP;AAyED,CAxFD,C,CAyFA;;;AACA,gBAAgB,CAACC,SAAD,EAAYC,WAAZ,KAA4B;AAC1C,QAAMC,aAAa,GAAGnD,qBAAqB,CAAC,SAAD,EAAYI,KAAK,IAAI;AAC9D;AACA,QAAI8C,WAAW,KAAK,KAApB,EAA2B;AACzB,aAAO,EAAP;AACD;;AACD,UAAM;AACJjB,MAAAA,YADI;AAEJmB,MAAAA,mBAFI;AAGJC,MAAAA,cAHI;AAIJV,MAAAA;AAJI,QAKFvC,KALJ;AAMA,UAAMkD,YAAY,GAAGpD,UAAU,CAACE,KAAD,EAAQ;AACrC;AACAE,MAAAA,eAAe,EAAE,GAFoB;AAGrCC,MAAAA,YAAY,EAAE6C,mBAHuB;AAIrC3C,MAAAA,mBAAmB,EAAEwB,YAJgB;AAKrCzB,MAAAA,SAAS,EAAE6C,cAL0B;AAMrCtC,MAAAA,kBAAkB,EAAE4B,iBAAiB,GAAG,CAApB,GAAwB,CAAxB,GAA4BA;AANX,KAAR,CAA/B;AAQA,WAAO,CAACxC,eAAe,CAACmD,YAAD,CAAhB,EAAgCzD,cAAc,CAACO,KAAD,EAAQ,eAAR,CAA9C,CAAP;AACD,GApB0C,EAoBxCmD,KAAK,IAAI;AACV,QAAI;AACFC,MAAAA,eADE;AAEFC,MAAAA;AAFE,QAGAF,KAHJ;AAIA,WAAO;AACL7C,MAAAA,WAAW,EAAE8C,eAAe,GAAG,EAD1B;AAELH,MAAAA,cAAc,EAAEI;AAFX,KAAP;AAID,GA7B0C,EA6BxC;AACDC,IAAAA,UAAU,EAAE;AADX,GA7BwC,CAA3C;AAgCA,SAAOP,aAAa,CAACF,SAAD,CAApB;AACD,CAlCD","sourcesContent":["import { resetComponent } from '../../style';\nimport { initZoomMotion } from '../../style/motion';\nimport getArrowStyle, { MAX_VERTICAL_CONTENT_RADIUS } from '../../style/placementArrow';\nimport { genComponentStyleHook, genPresetColor, mergeToken } from '../../theme/internal';\nconst genTooltipStyle = token => {\n  const {\n    componentCls,\n    // ant-tooltip\n    tooltipMaxWidth,\n    tooltipColor,\n    tooltipBg,\n    tooltipBorderRadius,\n    zIndexPopup,\n    controlHeight,\n    boxShadowSecondary,\n    paddingSM,\n    paddingXS,\n    tooltipRadiusOuter\n  } = token;\n  return [{\n    [componentCls]: Object.assign(Object.assign(Object.assign(Object.assign({}, resetComponent(token)), {\n      position: 'absolute',\n      zIndex: zIndexPopup,\n      display: 'block',\n      width: 'max-content',\n      maxWidth: tooltipMaxWidth,\n      visibility: 'visible',\n      transformOrigin: `var(--arrow-x, 50%) var(--arrow-y, 50%)`,\n      '&-hidden': {\n        display: 'none'\n      },\n      '--antd-arrow-background-color': tooltipBg,\n      // Wrapper for the tooltip content\n      [`${componentCls}-inner`]: {\n        minWidth: controlHeight,\n        minHeight: controlHeight,\n        padding: `${paddingSM / 2}px ${paddingXS}px`,\n        color: tooltipColor,\n        textAlign: 'start',\n        textDecoration: 'none',\n        wordWrap: 'break-word',\n        backgroundColor: tooltipBg,\n        borderRadius: tooltipBorderRadius,\n        boxShadow: boxShadowSecondary,\n        boxSizing: 'border-box'\n      },\n      // Limit left and right placement radius\n      [[`&-placement-left`, `&-placement-leftTop`, `&-placement-leftBottom`, `&-placement-right`, `&-placement-rightTop`, `&-placement-rightBottom`].join(',')]: {\n        [`${componentCls}-inner`]: {\n          borderRadius: Math.min(tooltipBorderRadius, MAX_VERTICAL_CONTENT_RADIUS)\n        }\n      },\n      [`${componentCls}-content`]: {\n        position: 'relative'\n      }\n    }), genPresetColor(token, (colorKey, _ref) => {\n      let {\n        darkColor\n      } = _ref;\n      return {\n        [`&${componentCls}-${colorKey}`]: {\n          [`${componentCls}-inner`]: {\n            backgroundColor: darkColor\n          },\n          [`${componentCls}-arrow`]: {\n            '--antd-arrow-background-color': darkColor\n          }\n        }\n      };\n    })), {\n      // RTL\n      '&-rtl': {\n        direction: 'rtl'\n      }\n    })\n  },\n  // Arrow Style\n  getArrowStyle(mergeToken(token, {\n    borderRadiusOuter: tooltipRadiusOuter\n  }), {\n    colorBg: 'var(--antd-arrow-background-color)',\n    contentRadius: tooltipBorderRadius,\n    limitVerticalRadius: true\n  }),\n  // Pure Render\n  {\n    [`${componentCls}-pure`]: {\n      position: 'relative',\n      maxWidth: 'none',\n      margin: token.sizePopupArrow\n    }\n  }];\n};\n// ============================== Export ==============================\nexport default ((prefixCls, injectStyle) => {\n  const useOriginHook = genComponentStyleHook('Tooltip', token => {\n    // Popover use Tooltip as internal component. We do not need to handle this.\n    if (injectStyle === false) {\n      return [];\n    }\n    const {\n      borderRadius,\n      colorTextLightSolid,\n      colorBgDefault,\n      borderRadiusOuter\n    } = token;\n    const TooltipToken = mergeToken(token, {\n      // default variables\n      tooltipMaxWidth: 250,\n      tooltipColor: colorTextLightSolid,\n      tooltipBorderRadius: borderRadius,\n      tooltipBg: colorBgDefault,\n      tooltipRadiusOuter: borderRadiusOuter > 4 ? 4 : borderRadiusOuter\n    });\n    return [genTooltipStyle(TooltipToken), initZoomMotion(token, 'zoom-big-fast')];\n  }, _ref2 => {\n    let {\n      zIndexPopupBase,\n      colorBgSpotlight\n    } = _ref2;\n    return {\n      zIndexPopup: zIndexPopupBase + 70,\n      colorBgDefault: colorBgSpotlight\n    };\n  }, {\n    resetStyle: false\n  });\n  return useOriginHook(prefixCls);\n});"]},"metadata":{},"sourceType":"module"}