{"ast":null,"code":"import { prepareComponentToken, prepareToken } from '.';\nimport { resetComponent } from '../../style';\nimport { genComponentStyleHook, genPresetColor } from '../../theme/internal'; // ============================== Ribbon ==============================\n\nconst genRibbonStyle = token => {\n  const {\n    antCls,\n    badgeFontHeight,\n    marginXS,\n    badgeRibbonOffset\n  } = token;\n  const ribbonPrefixCls = `${antCls}-ribbon`;\n  const ribbonWrapperPrefixCls = `${antCls}-ribbon-wrapper`;\n  const statusRibbonPreset = genPresetColor(token, (colorKey, _ref) => {\n    let {\n      darkColor\n    } = _ref;\n    return {\n      [`&${ribbonPrefixCls}-color-${colorKey}`]: {\n        background: darkColor,\n        color: darkColor\n      }\n    };\n  });\n  return {\n    [`${ribbonWrapperPrefixCls}`]: {\n      position: 'relative'\n    },\n    [`${ribbonPrefixCls}`]: Object.assign(Object.assign(Object.assign(Object.assign({}, resetComponent(token)), {\n      position: 'absolute',\n      top: marginXS,\n      padding: `0 ${token.paddingXS}px`,\n      color: token.colorPrimary,\n      lineHeight: `${badgeFontHeight}px`,\n      whiteSpace: 'nowrap',\n      backgroundColor: token.colorPrimary,\n      borderRadius: token.borderRadiusSM,\n      [`${ribbonPrefixCls}-text`]: {\n        color: token.colorTextLightSolid\n      },\n      [`${ribbonPrefixCls}-corner`]: {\n        position: 'absolute',\n        top: '100%',\n        width: badgeRibbonOffset,\n        height: badgeRibbonOffset,\n        color: 'currentcolor',\n        border: `${badgeRibbonOffset / 2}px solid`,\n        transform: token.badgeRibbonCornerTransform,\n        transformOrigin: 'top',\n        filter: token.badgeRibbonCornerFilter\n      }\n    }), statusRibbonPreset), {\n      [`&${ribbonPrefixCls}-placement-end`]: {\n        insetInlineEnd: -badgeRibbonOffset,\n        borderEndEndRadius: 0,\n        [`${ribbonPrefixCls}-corner`]: {\n          insetInlineEnd: 0,\n          borderInlineEndColor: 'transparent',\n          borderBlockEndColor: 'transparent'\n        }\n      },\n      [`&${ribbonPrefixCls}-placement-start`]: {\n        insetInlineStart: -badgeRibbonOffset,\n        borderEndStartRadius: 0,\n        [`${ribbonPrefixCls}-corner`]: {\n          insetInlineStart: 0,\n          borderBlockEndColor: 'transparent',\n          borderInlineStartColor: 'transparent'\n        }\n      },\n      // ====================== RTL =======================\n      '&-rtl': {\n        direction: 'rtl'\n      }\n    })\n  };\n}; // ============================== Export ==============================\n\n\nexport default genComponentStyleHook(['Badge', 'Ribbon'], token => {\n  const badgeToken = prepareToken(token);\n  return [genRibbonStyle(badgeToken)];\n}, prepareComponentToken);","map":{"version":3,"sources":["/Users/ravisrivastava/Downloads/newbcom/node_modules/antd/es/badge/style/ribbon.js"],"names":["prepareComponentToken","prepareToken","resetComponent","genComponentStyleHook","genPresetColor","genRibbonStyle","token","antCls","badgeFontHeight","marginXS","badgeRibbonOffset","ribbonPrefixCls","ribbonWrapperPrefixCls","statusRibbonPreset","colorKey","_ref","darkColor","background","color","position","Object","assign","top","padding","paddingXS","colorPrimary","lineHeight","whiteSpace","backgroundColor","borderRadius","borderRadiusSM","colorTextLightSolid","width","height","border","transform","badgeRibbonCornerTransform","transformOrigin","filter","badgeRibbonCornerFilter","insetInlineEnd","borderEndEndRadius","borderInlineEndColor","borderBlockEndColor","insetInlineStart","borderEndStartRadius","borderInlineStartColor","direction","badgeToken"],"mappings":"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","sourcesContent":["import { prepareComponentToken, prepareToken } from '.';\nimport { resetComponent } from '../../style';\nimport { genComponentStyleHook, genPresetColor } from '../../theme/internal';\n// ============================== Ribbon ==============================\nconst genRibbonStyle = token => {\n  const {\n    antCls,\n    badgeFontHeight,\n    marginXS,\n    badgeRibbonOffset\n  } = token;\n  const ribbonPrefixCls = `${antCls}-ribbon`;\n  const ribbonWrapperPrefixCls = `${antCls}-ribbon-wrapper`;\n  const statusRibbonPreset = genPresetColor(token, (colorKey, _ref) => {\n    let {\n      darkColor\n    } = _ref;\n    return {\n      [`&${ribbonPrefixCls}-color-${colorKey}`]: {\n        background: darkColor,\n        color: darkColor\n      }\n    };\n  });\n  return {\n    [`${ribbonWrapperPrefixCls}`]: {\n      position: 'relative'\n    },\n    [`${ribbonPrefixCls}`]: Object.assign(Object.assign(Object.assign(Object.assign({}, resetComponent(token)), {\n      position: 'absolute',\n      top: marginXS,\n      padding: `0 ${token.paddingXS}px`,\n      color: token.colorPrimary,\n      lineHeight: `${badgeFontHeight}px`,\n      whiteSpace: 'nowrap',\n      backgroundColor: token.colorPrimary,\n      borderRadius: token.borderRadiusSM,\n      [`${ribbonPrefixCls}-text`]: {\n        color: token.colorTextLightSolid\n      },\n      [`${ribbonPrefixCls}-corner`]: {\n        position: 'absolute',\n        top: '100%',\n        width: badgeRibbonOffset,\n        height: badgeRibbonOffset,\n        color: 'currentcolor',\n        border: `${badgeRibbonOffset / 2}px solid`,\n        transform: token.badgeRibbonCornerTransform,\n        transformOrigin: 'top',\n        filter: token.badgeRibbonCornerFilter\n      }\n    }), statusRibbonPreset), {\n      [`&${ribbonPrefixCls}-placement-end`]: {\n        insetInlineEnd: -badgeRibbonOffset,\n        borderEndEndRadius: 0,\n        [`${ribbonPrefixCls}-corner`]: {\n          insetInlineEnd: 0,\n          borderInlineEndColor: 'transparent',\n          borderBlockEndColor: 'transparent'\n        }\n      },\n      [`&${ribbonPrefixCls}-placement-start`]: {\n        insetInlineStart: -badgeRibbonOffset,\n        borderEndStartRadius: 0,\n        [`${ribbonPrefixCls}-corner`]: {\n          insetInlineStart: 0,\n          borderBlockEndColor: 'transparent',\n          borderInlineStartColor: 'transparent'\n        }\n      },\n      // ====================== RTL =======================\n      '&-rtl': {\n        direction: 'rtl'\n      }\n    })\n  };\n};\n// ============================== Export ==============================\nexport default genComponentStyleHook(['Badge', 'Ribbon'], token => {\n  const badgeToken = prepareToken(token);\n  return [genRibbonStyle(badgeToken)];\n}, prepareComponentToken);"]},"metadata":{},"sourceType":"module"}