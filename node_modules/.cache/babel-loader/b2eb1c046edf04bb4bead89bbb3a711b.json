{"ast":null,"code":"import { resetComponent } from '../../style';\nimport { genComponentStyleHook, mergeToken } from '../../theme/internal';\n\nconst genBaseStyle = token => {\n  const {\n    antCls,\n    componentCls,\n    iconCls,\n    avatarBg,\n    avatarColor,\n    containerSize,\n    containerSizeLG,\n    containerSizeSM,\n    textFontSize,\n    textFontSizeLG,\n    textFontSizeSM,\n    borderRadius,\n    borderRadiusLG,\n    borderRadiusSM,\n    lineWidth,\n    lineType\n  } = token; // Avatar size style\n\n  const avatarSizeStyle = (size, fontSize, radius) => ({\n    width: size,\n    height: size,\n    lineHeight: `${size - lineWidth * 2}px`,\n    borderRadius: '50%',\n    [`&${componentCls}-square`]: {\n      borderRadius: radius\n    },\n    [`${componentCls}-string`]: {\n      position: 'absolute',\n      left: {\n        _skip_check_: true,\n        value: '50%'\n      },\n      transformOrigin: '0 center'\n    },\n    [`&${componentCls}-icon`]: {\n      fontSize,\n      [`> ${iconCls}`]: {\n        margin: 0\n      }\n    }\n  });\n\n  return {\n    [componentCls]: Object.assign(Object.assign(Object.assign(Object.assign({}, resetComponent(token)), {\n      position: 'relative',\n      display: 'inline-block',\n      overflow: 'hidden',\n      color: avatarColor,\n      whiteSpace: 'nowrap',\n      textAlign: 'center',\n      verticalAlign: 'middle',\n      background: avatarBg,\n      border: `${lineWidth}px ${lineType} transparent`,\n      [`&-image`]: {\n        background: 'transparent'\n      },\n      [`${antCls}-image-img`]: {\n        display: 'block'\n      }\n    }), avatarSizeStyle(containerSize, textFontSize, borderRadius)), {\n      [`&-lg`]: Object.assign({}, avatarSizeStyle(containerSizeLG, textFontSizeLG, borderRadiusLG)),\n      [`&-sm`]: Object.assign({}, avatarSizeStyle(containerSizeSM, textFontSizeSM, borderRadiusSM)),\n      '> img': {\n        display: 'block',\n        width: '100%',\n        height: '100%',\n        objectFit: 'cover'\n      }\n    })\n  };\n};\n\nconst genGroupStyle = token => {\n  const {\n    componentCls,\n    groupBorderColor,\n    groupOverlapping,\n    groupSpace\n  } = token;\n  return {\n    [`${componentCls}-group`]: {\n      display: 'inline-flex',\n      [`${componentCls}`]: {\n        borderColor: groupBorderColor\n      },\n      [`> *:not(:first-child)`]: {\n        marginInlineStart: groupOverlapping\n      }\n    },\n    [`${componentCls}-group-popover`]: {\n      [`${componentCls} + ${componentCls}`]: {\n        marginInlineStart: groupSpace\n      }\n    }\n  };\n};\n\nexport default genComponentStyleHook('Avatar', token => {\n  const {\n    colorTextLightSolid,\n    colorTextPlaceholder\n  } = token;\n  const avatarToken = mergeToken(token, {\n    avatarBg: colorTextPlaceholder,\n    avatarColor: colorTextLightSolid\n  });\n  return [genBaseStyle(avatarToken), genGroupStyle(avatarToken)];\n}, token => {\n  const {\n    controlHeight,\n    controlHeightLG,\n    controlHeightSM,\n    fontSize,\n    fontSizeLG,\n    fontSizeXL,\n    fontSizeHeading3,\n    marginXS,\n    marginXXS,\n    colorBorderBg\n  } = token;\n  return {\n    containerSize: controlHeight,\n    containerSizeLG: controlHeightLG,\n    containerSizeSM: controlHeightSM,\n    textFontSize: Math.round((fontSizeLG + fontSizeXL) / 2),\n    textFontSizeLG: fontSizeHeading3,\n    textFontSizeSM: fontSize,\n    groupSpace: marginXXS,\n    groupOverlapping: -marginXS,\n    groupBorderColor: colorBorderBg\n  };\n});","map":{"version":3,"sources":["/Users/ravisrivastava/Downloads/newbcom/node_modules/antd/es/avatar/style/index.js"],"names":["resetComponent","genComponentStyleHook","mergeToken","genBaseStyle","token","antCls","componentCls","iconCls","avatarBg","avatarColor","containerSize","containerSizeLG","containerSizeSM","textFontSize","textFontSizeLG","textFontSizeSM","borderRadius","borderRadiusLG","borderRadiusSM","lineWidth","lineType","avatarSizeStyle","size","fontSize","radius","width","height","lineHeight","position","left","_skip_check_","value","transformOrigin","margin","Object","assign","display","overflow","color","whiteSpace","textAlign","verticalAlign","background","border","objectFit","genGroupStyle","groupBorderColor","groupOverlapping","groupSpace","borderColor","marginInlineStart","colorTextLightSolid","colorTextPlaceholder","avatarToken","controlHeight","controlHeightLG","controlHeightSM","fontSizeLG","fontSizeXL","fontSizeHeading3","marginXS","marginXXS","colorBorderBg","Math","round"],"mappings":"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","sourcesContent":["import { resetComponent } from '../../style';\nimport { genComponentStyleHook, mergeToken } from '../../theme/internal';\nconst genBaseStyle = token => {\n  const {\n    antCls,\n    componentCls,\n    iconCls,\n    avatarBg,\n    avatarColor,\n    containerSize,\n    containerSizeLG,\n    containerSizeSM,\n    textFontSize,\n    textFontSizeLG,\n    textFontSizeSM,\n    borderRadius,\n    borderRadiusLG,\n    borderRadiusSM,\n    lineWidth,\n    lineType\n  } = token;\n  // Avatar size style\n  const avatarSizeStyle = (size, fontSize, radius) => ({\n    width: size,\n    height: size,\n    lineHeight: `${size - lineWidth * 2}px`,\n    borderRadius: '50%',\n    [`&${componentCls}-square`]: {\n      borderRadius: radius\n    },\n    [`${componentCls}-string`]: {\n      position: 'absolute',\n      left: {\n        _skip_check_: true,\n        value: '50%'\n      },\n      transformOrigin: '0 center'\n    },\n    [`&${componentCls}-icon`]: {\n      fontSize,\n      [`> ${iconCls}`]: {\n        margin: 0\n      }\n    }\n  });\n  return {\n    [componentCls]: Object.assign(Object.assign(Object.assign(Object.assign({}, resetComponent(token)), {\n      position: 'relative',\n      display: 'inline-block',\n      overflow: 'hidden',\n      color: avatarColor,\n      whiteSpace: 'nowrap',\n      textAlign: 'center',\n      verticalAlign: 'middle',\n      background: avatarBg,\n      border: `${lineWidth}px ${lineType} transparent`,\n      [`&-image`]: {\n        background: 'transparent'\n      },\n      [`${antCls}-image-img`]: {\n        display: 'block'\n      }\n    }), avatarSizeStyle(containerSize, textFontSize, borderRadius)), {\n      [`&-lg`]: Object.assign({}, avatarSizeStyle(containerSizeLG, textFontSizeLG, borderRadiusLG)),\n      [`&-sm`]: Object.assign({}, avatarSizeStyle(containerSizeSM, textFontSizeSM, borderRadiusSM)),\n      '> img': {\n        display: 'block',\n        width: '100%',\n        height: '100%',\n        objectFit: 'cover'\n      }\n    })\n  };\n};\nconst genGroupStyle = token => {\n  const {\n    componentCls,\n    groupBorderColor,\n    groupOverlapping,\n    groupSpace\n  } = token;\n  return {\n    [`${componentCls}-group`]: {\n      display: 'inline-flex',\n      [`${componentCls}`]: {\n        borderColor: groupBorderColor\n      },\n      [`> *:not(:first-child)`]: {\n        marginInlineStart: groupOverlapping\n      }\n    },\n    [`${componentCls}-group-popover`]: {\n      [`${componentCls} + ${componentCls}`]: {\n        marginInlineStart: groupSpace\n      }\n    }\n  };\n};\nexport default genComponentStyleHook('Avatar', token => {\n  const {\n    colorTextLightSolid,\n    colorTextPlaceholder\n  } = token;\n  const avatarToken = mergeToken(token, {\n    avatarBg: colorTextPlaceholder,\n    avatarColor: colorTextLightSolid\n  });\n  return [genBaseStyle(avatarToken), genGroupStyle(avatarToken)];\n}, token => {\n  const {\n    controlHeight,\n    controlHeightLG,\n    controlHeightSM,\n    fontSize,\n    fontSizeLG,\n    fontSizeXL,\n    fontSizeHeading3,\n    marginXS,\n    marginXXS,\n    colorBorderBg\n  } = token;\n  return {\n    containerSize: controlHeight,\n    containerSizeLG: controlHeightLG,\n    containerSizeSM: controlHeightSM,\n    textFontSize: Math.round((fontSizeLG + fontSizeXL) / 2),\n    textFontSizeLG: fontSizeHeading3,\n    textFontSizeSM: fontSize,\n    groupSpace: marginXXS,\n    groupOverlapping: -marginXS,\n    groupBorderColor: colorBorderBg\n  };\n});"]},"metadata":{},"sourceType":"module"}