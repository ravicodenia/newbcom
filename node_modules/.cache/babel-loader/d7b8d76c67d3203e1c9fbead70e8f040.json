{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"children\"],\n    _excluded2 = [\"fixed\"];\nimport toArray from \"rc-util/es/Children/toArray\";\nimport warning from \"rc-util/es/warning\";\nimport * as React from 'react';\nimport { EXPAND_COLUMN } from \"../../constant\";\nimport { INTERNAL_COL_DEFINE } from \"../../utils/legacyUtil\";\nimport useWidthColumns from \"./useWidthColumns\";\nexport function convertChildrenToColumns(children) {\n  return toArray(children).filter(function (node) {\n    return /*#__PURE__*/React.isValidElement(node);\n  }).map(function (_ref) {\n    var key = _ref.key,\n        props = _ref.props;\n\n    var nodeChildren = props.children,\n        restProps = _objectWithoutProperties(props, _excluded);\n\n    var column = _objectSpread({\n      key: key\n    }, restProps);\n\n    if (nodeChildren) {\n      column.children = convertChildrenToColumns(nodeChildren);\n    }\n\n    return column;\n  });\n}\n\nfunction flatColumns(columns) {\n  var parentKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'key';\n  return columns.filter(function (column) {\n    return column && _typeof(column) === 'object';\n  }).reduce(function (list, column, index) {\n    var fixed = column.fixed; // Convert `fixed='true'` to `fixed='left'` instead\n\n    var parsedFixed = fixed === true ? 'left' : fixed;\n    var mergedKey = \"\".concat(parentKey, \"-\").concat(index);\n    var subColumns = column.children;\n\n    if (subColumns && subColumns.length > 0) {\n      return [].concat(_toConsumableArray(list), _toConsumableArray(flatColumns(subColumns, mergedKey).map(function (subColum) {\n        return _objectSpread({\n          fixed: parsedFixed\n        }, subColum);\n      })));\n    }\n\n    return [].concat(_toConsumableArray(list), [_objectSpread(_objectSpread({\n      key: mergedKey\n    }, column), {}, {\n      fixed: parsedFixed\n    })]);\n  }, []);\n}\n\nfunction warningFixed(flattenColumns) {\n  var allFixLeft = true;\n\n  for (var i = 0; i < flattenColumns.length; i += 1) {\n    var col = flattenColumns[i];\n\n    if (allFixLeft && col.fixed !== 'left') {\n      allFixLeft = false;\n    } else if (!allFixLeft && col.fixed === 'left') {\n      warning(false, \"Index \".concat(i - 1, \" of `columns` missing `fixed='left'` prop.\"));\n      break;\n    }\n  }\n\n  var allFixRight = true;\n\n  for (var _i = flattenColumns.length - 1; _i >= 0; _i -= 1) {\n    var _col = flattenColumns[_i];\n\n    if (allFixRight && _col.fixed !== 'right') {\n      allFixRight = false;\n    } else if (!allFixRight && _col.fixed === 'right') {\n      warning(false, \"Index \".concat(_i + 1, \" of `columns` missing `fixed='right'` prop.\"));\n      break;\n    }\n  }\n}\n\nfunction revertForRtl(columns) {\n  return columns.map(function (column) {\n    var fixed = column.fixed,\n        restProps = _objectWithoutProperties(column, _excluded2); // Convert `fixed='left'` to `fixed='right'` instead\n\n\n    var parsedFixed = fixed;\n\n    if (fixed === 'left') {\n      parsedFixed = 'right';\n    } else if (fixed === 'right') {\n      parsedFixed = 'left';\n    }\n\n    return _objectSpread({\n      fixed: parsedFixed\n    }, restProps);\n  });\n}\n/**\n * Parse `columns` & `children` into `columns`.\n */\n\n\nfunction useColumns(_ref2, transformColumns) {\n  var prefixCls = _ref2.prefixCls,\n      columns = _ref2.columns,\n      children = _ref2.children,\n      expandable = _ref2.expandable,\n      expandedKeys = _ref2.expandedKeys,\n      columnTitle = _ref2.columnTitle,\n      getRowKey = _ref2.getRowKey,\n      onTriggerExpand = _ref2.onTriggerExpand,\n      expandIcon = _ref2.expandIcon,\n      rowExpandable = _ref2.rowExpandable,\n      expandIconColumnIndex = _ref2.expandIconColumnIndex,\n      direction = _ref2.direction,\n      expandRowByClick = _ref2.expandRowByClick,\n      columnWidth = _ref2.columnWidth,\n      fixed = _ref2.fixed,\n      scrollWidth = _ref2.scrollWidth,\n      clientWidth = _ref2.clientWidth;\n  var baseColumns = React.useMemo(function () {\n    return columns || convertChildrenToColumns(children);\n  }, [columns, children]); // ========================== Expand ==========================\n\n  var withExpandColumns = React.useMemo(function () {\n    if (expandable) {\n      var _expandColumn;\n\n      var cloneColumns = baseColumns.slice(); // >>> Warning if use `expandIconColumnIndex`\n\n      if (process.env.NODE_ENV !== 'production' && expandIconColumnIndex >= 0) {\n        warning(false, '`expandIconColumnIndex` is deprecated. Please use `Table.EXPAND_COLUMN` in `columns` instead.');\n      } // >>> Insert expand column if not exist\n\n\n      if (!cloneColumns.includes(EXPAND_COLUMN)) {\n        var expandColIndex = expandIconColumnIndex || 0;\n\n        if (expandColIndex >= 0) {\n          cloneColumns.splice(expandColIndex, 0, EXPAND_COLUMN);\n        }\n      } // >>> Deduplicate additional expand column\n\n\n      if (process.env.NODE_ENV !== 'production' && cloneColumns.filter(function (c) {\n        return c === EXPAND_COLUMN;\n      }).length > 1) {\n        warning(false, 'There exist more than one `EXPAND_COLUMN` in `columns`.');\n      }\n\n      var expandColumnIndex = cloneColumns.indexOf(EXPAND_COLUMN);\n      cloneColumns = cloneColumns.filter(function (column, index) {\n        return column !== EXPAND_COLUMN || index === expandColumnIndex;\n      }); // >>> Check if expand column need to fixed\n\n      var prevColumn = baseColumns[expandColumnIndex];\n      var fixedColumn;\n\n      if ((fixed === 'left' || fixed) && !expandIconColumnIndex) {\n        fixedColumn = 'left';\n      } else if ((fixed === 'right' || fixed) && expandIconColumnIndex === baseColumns.length) {\n        fixedColumn = 'right';\n      } else {\n        fixedColumn = prevColumn ? prevColumn.fixed : null;\n      } // >>> Create expandable column\n\n\n      var expandColumn = (_expandColumn = {}, _defineProperty(_expandColumn, INTERNAL_COL_DEFINE, {\n        className: \"\".concat(prefixCls, \"-expand-icon-col\"),\n        columnType: 'EXPAND_COLUMN'\n      }), _defineProperty(_expandColumn, \"title\", columnTitle), _defineProperty(_expandColumn, \"fixed\", fixedColumn), _defineProperty(_expandColumn, \"className\", \"\".concat(prefixCls, \"-row-expand-icon-cell\")), _defineProperty(_expandColumn, \"width\", columnWidth), _defineProperty(_expandColumn, \"render\", function render(_, record, index) {\n        var rowKey = getRowKey(record, index);\n        var expanded = expandedKeys.has(rowKey);\n        var recordExpandable = rowExpandable ? rowExpandable(record) : true;\n        var icon = expandIcon({\n          prefixCls: prefixCls,\n          expanded: expanded,\n          expandable: recordExpandable,\n          record: record,\n          onExpand: onTriggerExpand\n        });\n\n        if (expandRowByClick) {\n          return /*#__PURE__*/React.createElement(\"span\", {\n            onClick: function onClick(e) {\n              return e.stopPropagation();\n            }\n          }, icon);\n        }\n\n        return icon;\n      }), _expandColumn);\n      return cloneColumns.map(function (col) {\n        return col === EXPAND_COLUMN ? expandColumn : col;\n      });\n    }\n\n    if (process.env.NODE_ENV !== 'production' && baseColumns.includes(EXPAND_COLUMN)) {\n      warning(false, '`expandable` is not config but there exist `EXPAND_COLUMN` in `columns`.');\n    }\n\n    return baseColumns.filter(function (col) {\n      return col !== EXPAND_COLUMN;\n    });\n  }, [expandable, baseColumns, getRowKey, expandedKeys, expandIcon, direction]); // ========================= Transform ========================\n\n  var mergedColumns = React.useMemo(function () {\n    var finalColumns = withExpandColumns;\n\n    if (transformColumns) {\n      finalColumns = transformColumns(finalColumns);\n    } // Always provides at least one column for table display\n\n\n    if (!finalColumns.length) {\n      finalColumns = [{\n        render: function render() {\n          return null;\n        }\n      }];\n    }\n\n    return finalColumns;\n  }, [transformColumns, withExpandColumns, direction]); // ========================== Flatten =========================\n\n  var flattenColumns = React.useMemo(function () {\n    if (direction === 'rtl') {\n      return revertForRtl(flatColumns(mergedColumns));\n    }\n\n    return flatColumns(mergedColumns);\n  }, [mergedColumns, direction, scrollWidth]); // Only check out of production since it's waste for each render\n\n  if (process.env.NODE_ENV !== 'production') {\n    warningFixed(direction === 'rtl' ? flattenColumns.slice().reverse() : flattenColumns);\n  } // ========================= FillWidth ========================\n\n\n  var _useWidthColumns = useWidthColumns(flattenColumns, scrollWidth, clientWidth),\n      _useWidthColumns2 = _slicedToArray(_useWidthColumns, 2),\n      filledColumns = _useWidthColumns2[0],\n      realScrollWidth = _useWidthColumns2[1];\n\n  return [mergedColumns, filledColumns, realScrollWidth];\n}\n\nexport default useColumns;","map":{"version":3,"sources":["/Users/ravisrivastava/Downloads/newbcom/node_modules/rc-table/es/hooks/useColumns/index.js"],"names":["_slicedToArray","_defineProperty","_toConsumableArray","_typeof","_objectSpread","_objectWithoutProperties","_excluded","_excluded2","toArray","warning","React","EXPAND_COLUMN","INTERNAL_COL_DEFINE","useWidthColumns","convertChildrenToColumns","children","filter","node","isValidElement","map","_ref","key","props","nodeChildren","restProps","column","flatColumns","columns","parentKey","arguments","length","undefined","reduce","list","index","fixed","parsedFixed","mergedKey","concat","subColumns","subColum","warningFixed","flattenColumns","allFixLeft","i","col","allFixRight","_i","_col","revertForRtl","useColumns","_ref2","transformColumns","prefixCls","expandable","expandedKeys","columnTitle","getRowKey","onTriggerExpand","expandIcon","rowExpandable","expandIconColumnIndex","direction","expandRowByClick","columnWidth","scrollWidth","clientWidth","baseColumns","useMemo","withExpandColumns","_expandColumn","cloneColumns","slice","process","env","NODE_ENV","includes","expandColIndex","splice","c","expandColumnIndex","indexOf","prevColumn","fixedColumn","expandColumn","className","columnType","render","_","record","rowKey","expanded","has","recordExpandable","icon","onExpand","createElement","onClick","e","stopPropagation","mergedColumns","finalColumns","reverse","_useWidthColumns","_useWidthColumns2","filledColumns","realScrollWidth"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,0CAA3B;AACA,OAAOC,eAAP,MAA4B,2CAA5B;AACA,OAAOC,kBAAP,MAA+B,8CAA/B;AACA,OAAOC,OAAP,MAAoB,mCAApB;AACA,OAAOC,aAAP,MAA0B,0CAA1B;AACA,OAAOC,wBAAP,MAAqC,oDAArC;AACA,IAAIC,SAAS,GAAG,CAAC,UAAD,CAAhB;AAAA,IACEC,UAAU,GAAG,CAAC,OAAD,CADf;AAEA,OAAOC,OAAP,MAAoB,6BAApB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,aAAT,QAA8B,gBAA9B;AACA,SAASC,mBAAT,QAAoC,wBAApC;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAO,SAASC,wBAAT,CAAkCC,QAAlC,EAA4C;AACjD,SAAOP,OAAO,CAACO,QAAD,CAAP,CAAkBC,MAAlB,CAAyB,UAAUC,IAAV,EAAgB;AAC9C,WAAO,aAAaP,KAAK,CAACQ,cAAN,CAAqBD,IAArB,CAApB;AACD,GAFM,EAEJE,GAFI,CAEA,UAAUC,IAAV,EAAgB;AACrB,QAAIC,GAAG,GAAGD,IAAI,CAACC,GAAf;AAAA,QACEC,KAAK,GAAGF,IAAI,CAACE,KADf;;AAEA,QAAIC,YAAY,GAAGD,KAAK,CAACP,QAAzB;AAAA,QACES,SAAS,GAAGnB,wBAAwB,CAACiB,KAAD,EAAQhB,SAAR,CADtC;;AAEA,QAAImB,MAAM,GAAGrB,aAAa,CAAC;AACzBiB,MAAAA,GAAG,EAAEA;AADoB,KAAD,EAEvBG,SAFuB,CAA1B;;AAGA,QAAID,YAAJ,EAAkB;AAChBE,MAAAA,MAAM,CAACV,QAAP,GAAkBD,wBAAwB,CAACS,YAAD,CAA1C;AACD;;AACD,WAAOE,MAAP;AACD,GAdM,CAAP;AAeD;;AACD,SAASC,WAAT,CAAqBC,OAArB,EAA8B;AAC5B,MAAIC,SAAS,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,KAApF;AACA,SAAOF,OAAO,CAACX,MAAR,CAAe,UAAUS,MAAV,EAAkB;AACtC,WAAOA,MAAM,IAAItB,OAAO,CAACsB,MAAD,CAAP,KAAoB,QAArC;AACD,GAFM,EAEJO,MAFI,CAEG,UAAUC,IAAV,EAAgBR,MAAhB,EAAwBS,KAAxB,EAA+B;AACvC,QAAIC,KAAK,GAAGV,MAAM,CAACU,KAAnB,CADuC,CAEvC;;AACA,QAAIC,WAAW,GAAGD,KAAK,KAAK,IAAV,GAAiB,MAAjB,GAA0BA,KAA5C;AACA,QAAIE,SAAS,GAAG,GAAGC,MAAH,CAAUV,SAAV,EAAqB,GAArB,EAA0BU,MAA1B,CAAiCJ,KAAjC,CAAhB;AACA,QAAIK,UAAU,GAAGd,MAAM,CAACV,QAAxB;;AACA,QAAIwB,UAAU,IAAIA,UAAU,CAACT,MAAX,GAAoB,CAAtC,EAAyC;AACvC,aAAO,GAAGQ,MAAH,CAAUpC,kBAAkB,CAAC+B,IAAD,CAA5B,EAAoC/B,kBAAkB,CAACwB,WAAW,CAACa,UAAD,EAAaF,SAAb,CAAX,CAAmClB,GAAnC,CAAuC,UAAUqB,QAAV,EAAoB;AACvH,eAAOpC,aAAa,CAAC;AACnB+B,UAAAA,KAAK,EAAEC;AADY,SAAD,EAEjBI,QAFiB,CAApB;AAGD,OAJ6D,CAAD,CAAtD,CAAP;AAKD;;AACD,WAAO,GAAGF,MAAH,CAAUpC,kBAAkB,CAAC+B,IAAD,CAA5B,EAAoC,CAAC7B,aAAa,CAACA,aAAa,CAAC;AACtEiB,MAAAA,GAAG,EAAEgB;AADiE,KAAD,EAEpEZ,MAFoE,CAAd,EAE7C,EAF6C,EAEzC;AACdU,MAAAA,KAAK,EAAEC;AADO,KAFyC,CAAd,CAApC,CAAP;AAKD,GApBM,EAoBJ,EApBI,CAAP;AAqBD;;AACD,SAASK,YAAT,CAAsBC,cAAtB,EAAsC;AACpC,MAAIC,UAAU,GAAG,IAAjB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,cAAc,CAACZ,MAAnC,EAA2Cc,CAAC,IAAI,CAAhD,EAAmD;AACjD,QAAIC,GAAG,GAAGH,cAAc,CAACE,CAAD,CAAxB;;AACA,QAAID,UAAU,IAAIE,GAAG,CAACV,KAAJ,KAAc,MAAhC,EAAwC;AACtCQ,MAAAA,UAAU,GAAG,KAAb;AACD,KAFD,MAEO,IAAI,CAACA,UAAD,IAAeE,GAAG,CAACV,KAAJ,KAAc,MAAjC,EAAyC;AAC9C1B,MAAAA,OAAO,CAAC,KAAD,EAAQ,SAAS6B,MAAT,CAAgBM,CAAC,GAAG,CAApB,EAAuB,4CAAvB,CAAR,CAAP;AACA;AACD;AACF;;AACD,MAAIE,WAAW,GAAG,IAAlB;;AACA,OAAK,IAAIC,EAAE,GAAGL,cAAc,CAACZ,MAAf,GAAwB,CAAtC,EAAyCiB,EAAE,IAAI,CAA/C,EAAkDA,EAAE,IAAI,CAAxD,EAA2D;AACzD,QAAIC,IAAI,GAAGN,cAAc,CAACK,EAAD,CAAzB;;AACA,QAAID,WAAW,IAAIE,IAAI,CAACb,KAAL,KAAe,OAAlC,EAA2C;AACzCW,MAAAA,WAAW,GAAG,KAAd;AACD,KAFD,MAEO,IAAI,CAACA,WAAD,IAAgBE,IAAI,CAACb,KAAL,KAAe,OAAnC,EAA4C;AACjD1B,MAAAA,OAAO,CAAC,KAAD,EAAQ,SAAS6B,MAAT,CAAgBS,EAAE,GAAG,CAArB,EAAwB,6CAAxB,CAAR,CAAP;AACA;AACD;AACF;AACF;;AACD,SAASE,YAAT,CAAsBtB,OAAtB,EAA+B;AAC7B,SAAOA,OAAO,CAACR,GAAR,CAAY,UAAUM,MAAV,EAAkB;AACnC,QAAIU,KAAK,GAAGV,MAAM,CAACU,KAAnB;AAAA,QACEX,SAAS,GAAGnB,wBAAwB,CAACoB,MAAD,EAASlB,UAAT,CADtC,CADmC,CAInC;;;AACA,QAAI6B,WAAW,GAAGD,KAAlB;;AACA,QAAIA,KAAK,KAAK,MAAd,EAAsB;AACpBC,MAAAA,WAAW,GAAG,OAAd;AACD,KAFD,MAEO,IAAID,KAAK,KAAK,OAAd,EAAuB;AAC5BC,MAAAA,WAAW,GAAG,MAAd;AACD;;AACD,WAAOhC,aAAa,CAAC;AACnB+B,MAAAA,KAAK,EAAEC;AADY,KAAD,EAEjBZ,SAFiB,CAApB;AAGD,GAdM,CAAP;AAeD;AAED;AACA;AACA;;;AACA,SAAS0B,UAAT,CAAoBC,KAApB,EAA2BC,gBAA3B,EAA6C;AAC3C,MAAIC,SAAS,GAAGF,KAAK,CAACE,SAAtB;AAAA,MACE1B,OAAO,GAAGwB,KAAK,CAACxB,OADlB;AAAA,MAEEZ,QAAQ,GAAGoC,KAAK,CAACpC,QAFnB;AAAA,MAGEuC,UAAU,GAAGH,KAAK,CAACG,UAHrB;AAAA,MAIEC,YAAY,GAAGJ,KAAK,CAACI,YAJvB;AAAA,MAKEC,WAAW,GAAGL,KAAK,CAACK,WALtB;AAAA,MAMEC,SAAS,GAAGN,KAAK,CAACM,SANpB;AAAA,MAOEC,eAAe,GAAGP,KAAK,CAACO,eAP1B;AAAA,MAQEC,UAAU,GAAGR,KAAK,CAACQ,UARrB;AAAA,MASEC,aAAa,GAAGT,KAAK,CAACS,aATxB;AAAA,MAUEC,qBAAqB,GAAGV,KAAK,CAACU,qBAVhC;AAAA,MAWEC,SAAS,GAAGX,KAAK,CAACW,SAXpB;AAAA,MAYEC,gBAAgB,GAAGZ,KAAK,CAACY,gBAZ3B;AAAA,MAaEC,WAAW,GAAGb,KAAK,CAACa,WAbtB;AAAA,MAcE7B,KAAK,GAAGgB,KAAK,CAAChB,KAdhB;AAAA,MAeE8B,WAAW,GAAGd,KAAK,CAACc,WAftB;AAAA,MAgBEC,WAAW,GAAGf,KAAK,CAACe,WAhBtB;AAiBA,MAAIC,WAAW,GAAGzD,KAAK,CAAC0D,OAAN,CAAc,YAAY;AAC1C,WAAOzC,OAAO,IAAIb,wBAAwB,CAACC,QAAD,CAA1C;AACD,GAFiB,EAEf,CAACY,OAAD,EAAUZ,QAAV,CAFe,CAAlB,CAlB2C,CAsB3C;;AACA,MAAIsD,iBAAiB,GAAG3D,KAAK,CAAC0D,OAAN,CAAc,YAAY;AAChD,QAAId,UAAJ,EAAgB;AACd,UAAIgB,aAAJ;;AACA,UAAIC,YAAY,GAAGJ,WAAW,CAACK,KAAZ,EAAnB,CAFc,CAId;;AACA,UAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyCd,qBAAqB,IAAI,CAAtE,EAAyE;AACvEpD,QAAAA,OAAO,CAAC,KAAD,EAAQ,+FAAR,CAAP;AACD,OAPa,CASd;;;AACA,UAAI,CAAC8D,YAAY,CAACK,QAAb,CAAsBjE,aAAtB,CAAL,EAA2C;AACzC,YAAIkE,cAAc,GAAGhB,qBAAqB,IAAI,CAA9C;;AACA,YAAIgB,cAAc,IAAI,CAAtB,EAAyB;AACvBN,UAAAA,YAAY,CAACO,MAAb,CAAoBD,cAApB,EAAoC,CAApC,EAAuClE,aAAvC;AACD;AACF,OAfa,CAiBd;;;AACA,UAAI8D,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyCJ,YAAY,CAACvD,MAAb,CAAoB,UAAU+D,CAAV,EAAa;AAC5E,eAAOA,CAAC,KAAKpE,aAAb;AACD,OAF4C,EAE1CmB,MAF0C,GAEjC,CAFZ,EAEe;AACbrB,QAAAA,OAAO,CAAC,KAAD,EAAQ,yDAAR,CAAP;AACD;;AACD,UAAIuE,iBAAiB,GAAGT,YAAY,CAACU,OAAb,CAAqBtE,aAArB,CAAxB;AACA4D,MAAAA,YAAY,GAAGA,YAAY,CAACvD,MAAb,CAAoB,UAAUS,MAAV,EAAkBS,KAAlB,EAAyB;AAC1D,eAAOT,MAAM,KAAKd,aAAX,IAA4BuB,KAAK,KAAK8C,iBAA7C;AACD,OAFc,CAAf,CAxBc,CA4Bd;;AACA,UAAIE,UAAU,GAAGf,WAAW,CAACa,iBAAD,CAA5B;AACA,UAAIG,WAAJ;;AACA,UAAI,CAAChD,KAAK,KAAK,MAAV,IAAoBA,KAArB,KAA+B,CAAC0B,qBAApC,EAA2D;AACzDsB,QAAAA,WAAW,GAAG,MAAd;AACD,OAFD,MAEO,IAAI,CAAChD,KAAK,KAAK,OAAV,IAAqBA,KAAtB,KAAgC0B,qBAAqB,KAAKM,WAAW,CAACrC,MAA1E,EAAkF;AACvFqD,QAAAA,WAAW,GAAG,OAAd;AACD,OAFM,MAEA;AACLA,QAAAA,WAAW,GAAGD,UAAU,GAAGA,UAAU,CAAC/C,KAAd,GAAsB,IAA9C;AACD,OArCa,CAuCd;;;AACA,UAAIiD,YAAY,IAAId,aAAa,GAAG,EAAhB,EAAoBrE,eAAe,CAACqE,aAAD,EAAgB1D,mBAAhB,EAAqC;AAC1FyE,QAAAA,SAAS,EAAE,GAAG/C,MAAH,CAAUe,SAAV,EAAqB,kBAArB,CAD+E;AAE1FiC,QAAAA,UAAU,EAAE;AAF8E,OAArC,CAAnC,EAGhBrF,eAAe,CAACqE,aAAD,EAAgB,OAAhB,EAAyBd,WAAzB,CAHC,EAGsCvD,eAAe,CAACqE,aAAD,EAAgB,OAAhB,EAAyBa,WAAzB,CAHrD,EAG4FlF,eAAe,CAACqE,aAAD,EAAgB,WAAhB,EAA6B,GAAGhC,MAAH,CAAUe,SAAV,EAAqB,uBAArB,CAA7B,CAH3G,EAGwLpD,eAAe,CAACqE,aAAD,EAAgB,OAAhB,EAAyBN,WAAzB,CAHvM,EAG8O/D,eAAe,CAACqE,aAAD,EAAgB,QAAhB,EAA0B,SAASiB,MAAT,CAAgBC,CAAhB,EAAmBC,MAAnB,EAA2BvD,KAA3B,EAAkC;AAC3U,YAAIwD,MAAM,GAAGjC,SAAS,CAACgC,MAAD,EAASvD,KAAT,CAAtB;AACA,YAAIyD,QAAQ,GAAGpC,YAAY,CAACqC,GAAb,CAAiBF,MAAjB,CAAf;AACA,YAAIG,gBAAgB,GAAGjC,aAAa,GAAGA,aAAa,CAAC6B,MAAD,CAAhB,GAA2B,IAA/D;AACA,YAAIK,IAAI,GAAGnC,UAAU,CAAC;AACpBN,UAAAA,SAAS,EAAEA,SADS;AAEpBsC,UAAAA,QAAQ,EAAEA,QAFU;AAGpBrC,UAAAA,UAAU,EAAEuC,gBAHQ;AAIpBJ,UAAAA,MAAM,EAAEA,MAJY;AAKpBM,UAAAA,QAAQ,EAAErC;AALU,SAAD,CAArB;;AAOA,YAAIK,gBAAJ,EAAsB;AACpB,iBAAO,aAAarD,KAAK,CAACsF,aAAN,CAAoB,MAApB,EAA4B;AAC9CC,YAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBC,CAAjB,EAAoB;AAC3B,qBAAOA,CAAC,CAACC,eAAF,EAAP;AACD;AAH6C,WAA5B,EAIjBL,IAJiB,CAApB;AAKD;;AACD,eAAOA,IAAP;AACD,OAnBgR,CAH7P,EAsBhBxB,aAtBY,CAAhB;AAuBA,aAAOC,YAAY,CAACpD,GAAb,CAAiB,UAAU0B,GAAV,EAAe;AACrC,eAAOA,GAAG,KAAKlC,aAAR,GAAwByE,YAAxB,GAAuCvC,GAA9C;AACD,OAFM,CAAP;AAGD;;AACD,QAAI4B,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyCR,WAAW,CAACS,QAAZ,CAAqBjE,aAArB,CAA7C,EAAkF;AAChFF,MAAAA,OAAO,CAAC,KAAD,EAAQ,0EAAR,CAAP;AACD;;AACD,WAAO0D,WAAW,CAACnD,MAAZ,CAAmB,UAAU6B,GAAV,EAAe;AACvC,aAAOA,GAAG,KAAKlC,aAAf;AACD,KAFM,CAAP;AAGD,GA1EuB,EA0ErB,CAAC2C,UAAD,EAAaa,WAAb,EAA0BV,SAA1B,EAAqCF,YAArC,EAAmDI,UAAnD,EAA+DG,SAA/D,CA1EqB,CAAxB,CAvB2C,CAmG3C;;AACA,MAAIsC,aAAa,GAAG1F,KAAK,CAAC0D,OAAN,CAAc,YAAY;AAC5C,QAAIiC,YAAY,GAAGhC,iBAAnB;;AACA,QAAIjB,gBAAJ,EAAsB;AACpBiD,MAAAA,YAAY,GAAGjD,gBAAgB,CAACiD,YAAD,CAA/B;AACD,KAJ2C,CAM5C;;;AACA,QAAI,CAACA,YAAY,CAACvE,MAAlB,EAA0B;AACxBuE,MAAAA,YAAY,GAAG,CAAC;AACdd,QAAAA,MAAM,EAAE,SAASA,MAAT,GAAkB;AACxB,iBAAO,IAAP;AACD;AAHa,OAAD,CAAf;AAKD;;AACD,WAAOc,YAAP;AACD,GAfmB,EAejB,CAACjD,gBAAD,EAAmBiB,iBAAnB,EAAsCP,SAAtC,CAfiB,CAApB,CApG2C,CAqH3C;;AACA,MAAIpB,cAAc,GAAGhC,KAAK,CAAC0D,OAAN,CAAc,YAAY;AAC7C,QAAIN,SAAS,KAAK,KAAlB,EAAyB;AACvB,aAAOb,YAAY,CAACvB,WAAW,CAAC0E,aAAD,CAAZ,CAAnB;AACD;;AACD,WAAO1E,WAAW,CAAC0E,aAAD,CAAlB;AACD,GALoB,EAKlB,CAACA,aAAD,EAAgBtC,SAAhB,EAA2BG,WAA3B,CALkB,CAArB,CAtH2C,CA6H3C;;AACA,MAAIQ,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzClC,IAAAA,YAAY,CAACqB,SAAS,KAAK,KAAd,GAAsBpB,cAAc,CAAC8B,KAAf,GAAuB8B,OAAvB,EAAtB,GAAyD5D,cAA1D,CAAZ;AACD,GAhI0C,CAkI3C;;;AACA,MAAI6D,gBAAgB,GAAG1F,eAAe,CAAC6B,cAAD,EAAiBuB,WAAjB,EAA8BC,WAA9B,CAAtC;AAAA,MACEsC,iBAAiB,GAAGxG,cAAc,CAACuG,gBAAD,EAAmB,CAAnB,CADpC;AAAA,MAEEE,aAAa,GAAGD,iBAAiB,CAAC,CAAD,CAFnC;AAAA,MAGEE,eAAe,GAAGF,iBAAiB,CAAC,CAAD,CAHrC;;AAIA,SAAO,CAACJ,aAAD,EAAgBK,aAAhB,EAA+BC,eAA/B,CAAP;AACD;;AACD,eAAexD,UAAf","sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"children\"],\n  _excluded2 = [\"fixed\"];\nimport toArray from \"rc-util/es/Children/toArray\";\nimport warning from \"rc-util/es/warning\";\nimport * as React from 'react';\nimport { EXPAND_COLUMN } from \"../../constant\";\nimport { INTERNAL_COL_DEFINE } from \"../../utils/legacyUtil\";\nimport useWidthColumns from \"./useWidthColumns\";\nexport function convertChildrenToColumns(children) {\n  return toArray(children).filter(function (node) {\n    return /*#__PURE__*/React.isValidElement(node);\n  }).map(function (_ref) {\n    var key = _ref.key,\n      props = _ref.props;\n    var nodeChildren = props.children,\n      restProps = _objectWithoutProperties(props, _excluded);\n    var column = _objectSpread({\n      key: key\n    }, restProps);\n    if (nodeChildren) {\n      column.children = convertChildrenToColumns(nodeChildren);\n    }\n    return column;\n  });\n}\nfunction flatColumns(columns) {\n  var parentKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'key';\n  return columns.filter(function (column) {\n    return column && _typeof(column) === 'object';\n  }).reduce(function (list, column, index) {\n    var fixed = column.fixed;\n    // Convert `fixed='true'` to `fixed='left'` instead\n    var parsedFixed = fixed === true ? 'left' : fixed;\n    var mergedKey = \"\".concat(parentKey, \"-\").concat(index);\n    var subColumns = column.children;\n    if (subColumns && subColumns.length > 0) {\n      return [].concat(_toConsumableArray(list), _toConsumableArray(flatColumns(subColumns, mergedKey).map(function (subColum) {\n        return _objectSpread({\n          fixed: parsedFixed\n        }, subColum);\n      })));\n    }\n    return [].concat(_toConsumableArray(list), [_objectSpread(_objectSpread({\n      key: mergedKey\n    }, column), {}, {\n      fixed: parsedFixed\n    })]);\n  }, []);\n}\nfunction warningFixed(flattenColumns) {\n  var allFixLeft = true;\n  for (var i = 0; i < flattenColumns.length; i += 1) {\n    var col = flattenColumns[i];\n    if (allFixLeft && col.fixed !== 'left') {\n      allFixLeft = false;\n    } else if (!allFixLeft && col.fixed === 'left') {\n      warning(false, \"Index \".concat(i - 1, \" of `columns` missing `fixed='left'` prop.\"));\n      break;\n    }\n  }\n  var allFixRight = true;\n  for (var _i = flattenColumns.length - 1; _i >= 0; _i -= 1) {\n    var _col = flattenColumns[_i];\n    if (allFixRight && _col.fixed !== 'right') {\n      allFixRight = false;\n    } else if (!allFixRight && _col.fixed === 'right') {\n      warning(false, \"Index \".concat(_i + 1, \" of `columns` missing `fixed='right'` prop.\"));\n      break;\n    }\n  }\n}\nfunction revertForRtl(columns) {\n  return columns.map(function (column) {\n    var fixed = column.fixed,\n      restProps = _objectWithoutProperties(column, _excluded2);\n\n    // Convert `fixed='left'` to `fixed='right'` instead\n    var parsedFixed = fixed;\n    if (fixed === 'left') {\n      parsedFixed = 'right';\n    } else if (fixed === 'right') {\n      parsedFixed = 'left';\n    }\n    return _objectSpread({\n      fixed: parsedFixed\n    }, restProps);\n  });\n}\n\n/**\n * Parse `columns` & `children` into `columns`.\n */\nfunction useColumns(_ref2, transformColumns) {\n  var prefixCls = _ref2.prefixCls,\n    columns = _ref2.columns,\n    children = _ref2.children,\n    expandable = _ref2.expandable,\n    expandedKeys = _ref2.expandedKeys,\n    columnTitle = _ref2.columnTitle,\n    getRowKey = _ref2.getRowKey,\n    onTriggerExpand = _ref2.onTriggerExpand,\n    expandIcon = _ref2.expandIcon,\n    rowExpandable = _ref2.rowExpandable,\n    expandIconColumnIndex = _ref2.expandIconColumnIndex,\n    direction = _ref2.direction,\n    expandRowByClick = _ref2.expandRowByClick,\n    columnWidth = _ref2.columnWidth,\n    fixed = _ref2.fixed,\n    scrollWidth = _ref2.scrollWidth,\n    clientWidth = _ref2.clientWidth;\n  var baseColumns = React.useMemo(function () {\n    return columns || convertChildrenToColumns(children);\n  }, [columns, children]);\n\n  // ========================== Expand ==========================\n  var withExpandColumns = React.useMemo(function () {\n    if (expandable) {\n      var _expandColumn;\n      var cloneColumns = baseColumns.slice();\n\n      // >>> Warning if use `expandIconColumnIndex`\n      if (process.env.NODE_ENV !== 'production' && expandIconColumnIndex >= 0) {\n        warning(false, '`expandIconColumnIndex` is deprecated. Please use `Table.EXPAND_COLUMN` in `columns` instead.');\n      }\n\n      // >>> Insert expand column if not exist\n      if (!cloneColumns.includes(EXPAND_COLUMN)) {\n        var expandColIndex = expandIconColumnIndex || 0;\n        if (expandColIndex >= 0) {\n          cloneColumns.splice(expandColIndex, 0, EXPAND_COLUMN);\n        }\n      }\n\n      // >>> Deduplicate additional expand column\n      if (process.env.NODE_ENV !== 'production' && cloneColumns.filter(function (c) {\n        return c === EXPAND_COLUMN;\n      }).length > 1) {\n        warning(false, 'There exist more than one `EXPAND_COLUMN` in `columns`.');\n      }\n      var expandColumnIndex = cloneColumns.indexOf(EXPAND_COLUMN);\n      cloneColumns = cloneColumns.filter(function (column, index) {\n        return column !== EXPAND_COLUMN || index === expandColumnIndex;\n      });\n\n      // >>> Check if expand column need to fixed\n      var prevColumn = baseColumns[expandColumnIndex];\n      var fixedColumn;\n      if ((fixed === 'left' || fixed) && !expandIconColumnIndex) {\n        fixedColumn = 'left';\n      } else if ((fixed === 'right' || fixed) && expandIconColumnIndex === baseColumns.length) {\n        fixedColumn = 'right';\n      } else {\n        fixedColumn = prevColumn ? prevColumn.fixed : null;\n      }\n\n      // >>> Create expandable column\n      var expandColumn = (_expandColumn = {}, _defineProperty(_expandColumn, INTERNAL_COL_DEFINE, {\n        className: \"\".concat(prefixCls, \"-expand-icon-col\"),\n        columnType: 'EXPAND_COLUMN'\n      }), _defineProperty(_expandColumn, \"title\", columnTitle), _defineProperty(_expandColumn, \"fixed\", fixedColumn), _defineProperty(_expandColumn, \"className\", \"\".concat(prefixCls, \"-row-expand-icon-cell\")), _defineProperty(_expandColumn, \"width\", columnWidth), _defineProperty(_expandColumn, \"render\", function render(_, record, index) {\n        var rowKey = getRowKey(record, index);\n        var expanded = expandedKeys.has(rowKey);\n        var recordExpandable = rowExpandable ? rowExpandable(record) : true;\n        var icon = expandIcon({\n          prefixCls: prefixCls,\n          expanded: expanded,\n          expandable: recordExpandable,\n          record: record,\n          onExpand: onTriggerExpand\n        });\n        if (expandRowByClick) {\n          return /*#__PURE__*/React.createElement(\"span\", {\n            onClick: function onClick(e) {\n              return e.stopPropagation();\n            }\n          }, icon);\n        }\n        return icon;\n      }), _expandColumn);\n      return cloneColumns.map(function (col) {\n        return col === EXPAND_COLUMN ? expandColumn : col;\n      });\n    }\n    if (process.env.NODE_ENV !== 'production' && baseColumns.includes(EXPAND_COLUMN)) {\n      warning(false, '`expandable` is not config but there exist `EXPAND_COLUMN` in `columns`.');\n    }\n    return baseColumns.filter(function (col) {\n      return col !== EXPAND_COLUMN;\n    });\n  }, [expandable, baseColumns, getRowKey, expandedKeys, expandIcon, direction]);\n\n  // ========================= Transform ========================\n  var mergedColumns = React.useMemo(function () {\n    var finalColumns = withExpandColumns;\n    if (transformColumns) {\n      finalColumns = transformColumns(finalColumns);\n    }\n\n    // Always provides at least one column for table display\n    if (!finalColumns.length) {\n      finalColumns = [{\n        render: function render() {\n          return null;\n        }\n      }];\n    }\n    return finalColumns;\n  }, [transformColumns, withExpandColumns, direction]);\n\n  // ========================== Flatten =========================\n  var flattenColumns = React.useMemo(function () {\n    if (direction === 'rtl') {\n      return revertForRtl(flatColumns(mergedColumns));\n    }\n    return flatColumns(mergedColumns);\n  }, [mergedColumns, direction, scrollWidth]);\n\n  // Only check out of production since it's waste for each render\n  if (process.env.NODE_ENV !== 'production') {\n    warningFixed(direction === 'rtl' ? flattenColumns.slice().reverse() : flattenColumns);\n  }\n\n  // ========================= FillWidth ========================\n  var _useWidthColumns = useWidthColumns(flattenColumns, scrollWidth, clientWidth),\n    _useWidthColumns2 = _slicedToArray(_useWidthColumns, 2),\n    filledColumns = _useWidthColumns2[0],\n    realScrollWidth = _useWidthColumns2[1];\n  return [mergedColumns, filledColumns, realScrollWidth];\n}\nexport default useColumns;"]},"metadata":{},"sourceType":"module"}