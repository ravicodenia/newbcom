{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"id\", \"prefixCls\", \"fieldNames\", \"defaultValue\", \"value\", \"changeOnSelect\", \"onChange\", \"displayRender\", \"checkable\", \"autoClearSearchValue\", \"searchValue\", \"onSearch\", \"showSearch\", \"expandTrigger\", \"options\", \"dropdownPrefixCls\", \"loadData\", \"popupVisible\", \"open\", \"popupClassName\", \"dropdownClassName\", \"dropdownMenuColumnStyle\", \"popupPlacement\", \"placement\", \"onDropdownVisibleChange\", \"onPopupVisibleChange\", \"expandIcon\", \"loadingIcon\", \"children\", \"dropdownMatchSelectWidth\", \"showCheckedStrategy\"];\nimport { BaseSelect } from 'rc-select';\nimport useId from \"rc-select/es/hooks/useId\";\nimport { conductCheck } from \"rc-tree/es/utils/conductUtil\";\nimport useEvent from \"rc-util/es/hooks/useEvent\";\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport * as React from 'react';\nimport CascaderContext from \"./context\";\nimport useDisplayValues from \"./hooks/useDisplayValues\";\nimport useEntities from \"./hooks/useEntities\";\nimport useMissingValues from \"./hooks/useMissingValues\";\nimport useSearchConfig from \"./hooks/useSearchConfig\";\nimport useSearchOptions from \"./hooks/useSearchOptions\";\nimport OptionList from \"./OptionList\";\nimport { fillFieldNames, SHOW_CHILD, SHOW_PARENT, toPathKey, toPathKeys } from \"./utils/commonUtil\";\nimport { formatStrategyValues, toPathOptions } from \"./utils/treeUtil\";\nimport warningProps, { warningNullOptions } from \"./utils/warningPropsUtil\";\n\nfunction isMultipleValue(value) {\n  return Array.isArray(value) && Array.isArray(value[0]);\n}\n\nfunction toRawValues(value) {\n  if (!value) {\n    return [];\n  }\n\n  if (isMultipleValue(value)) {\n    return value;\n  }\n\n  return (value.length === 0 ? [] : [value]).map(function (val) {\n    return Array.isArray(val) ? val : [val];\n  });\n}\n\nvar Cascader = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var id = props.id,\n      _props$prefixCls = props.prefixCls,\n      prefixCls = _props$prefixCls === void 0 ? 'rc-cascader' : _props$prefixCls,\n      fieldNames = props.fieldNames,\n      defaultValue = props.defaultValue,\n      value = props.value,\n      changeOnSelect = props.changeOnSelect,\n      onChange = props.onChange,\n      displayRender = props.displayRender,\n      checkable = props.checkable,\n      _props$autoClearSearc = props.autoClearSearchValue,\n      autoClearSearchValue = _props$autoClearSearc === void 0 ? true : _props$autoClearSearc,\n      searchValue = props.searchValue,\n      onSearch = props.onSearch,\n      showSearch = props.showSearch,\n      expandTrigger = props.expandTrigger,\n      options = props.options,\n      dropdownPrefixCls = props.dropdownPrefixCls,\n      loadData = props.loadData,\n      popupVisible = props.popupVisible,\n      open = props.open,\n      popupClassName = props.popupClassName,\n      dropdownClassName = props.dropdownClassName,\n      dropdownMenuColumnStyle = props.dropdownMenuColumnStyle,\n      popupPlacement = props.popupPlacement,\n      placement = props.placement,\n      onDropdownVisibleChange = props.onDropdownVisibleChange,\n      onPopupVisibleChange = props.onPopupVisibleChange,\n      _props$expandIcon = props.expandIcon,\n      expandIcon = _props$expandIcon === void 0 ? '>' : _props$expandIcon,\n      loadingIcon = props.loadingIcon,\n      children = props.children,\n      _props$dropdownMatchS = props.dropdownMatchSelectWidth,\n      dropdownMatchSelectWidth = _props$dropdownMatchS === void 0 ? false : _props$dropdownMatchS,\n      _props$showCheckedStr = props.showCheckedStrategy,\n      showCheckedStrategy = _props$showCheckedStr === void 0 ? SHOW_PARENT : _props$showCheckedStr,\n      restProps = _objectWithoutProperties(props, _excluded);\n\n  var mergedId = useId(id);\n  var multiple = !!checkable; // =========================== Values ===========================\n\n  var _useMergedState = useMergedState(defaultValue, {\n    value: value,\n    postState: toRawValues\n  }),\n      _useMergedState2 = _slicedToArray(_useMergedState, 2),\n      rawValues = _useMergedState2[0],\n      setRawValues = _useMergedState2[1]; // ========================= FieldNames =========================\n\n\n  var mergedFieldNames = React.useMemo(function () {\n    return fillFieldNames(fieldNames);\n  },\n  /* eslint-disable react-hooks/exhaustive-deps */\n  [JSON.stringify(fieldNames)]\n  /* eslint-enable react-hooks/exhaustive-deps */\n  ); // =========================== Option ===========================\n\n  var mergedOptions = React.useMemo(function () {\n    return options || [];\n  }, [options]); // Only used in multiple mode, this fn will not call in single mode\n\n  var getPathKeyEntities = useEntities(mergedOptions, mergedFieldNames);\n  /** Convert path key back to value format */\n\n  var getValueByKeyPath = React.useCallback(function (pathKeys) {\n    var keyPathEntities = getPathKeyEntities();\n    return pathKeys.map(function (pathKey) {\n      var nodes = keyPathEntities[pathKey].nodes;\n      return nodes.map(function (node) {\n        return node[mergedFieldNames.value];\n      });\n    });\n  }, [getPathKeyEntities, mergedFieldNames]); // =========================== Search ===========================\n\n  var _useMergedState3 = useMergedState('', {\n    value: searchValue,\n    postState: function postState(search) {\n      return search || '';\n    }\n  }),\n      _useMergedState4 = _slicedToArray(_useMergedState3, 2),\n      mergedSearchValue = _useMergedState4[0],\n      setSearchValue = _useMergedState4[1];\n\n  var onInternalSearch = function onInternalSearch(searchText, info) {\n    setSearchValue(searchText);\n\n    if (info.source !== 'blur' && onSearch) {\n      onSearch(searchText);\n    }\n  };\n\n  var _useSearchConfig = useSearchConfig(showSearch),\n      _useSearchConfig2 = _slicedToArray(_useSearchConfig, 2),\n      mergedShowSearch = _useSearchConfig2[0],\n      searchConfig = _useSearchConfig2[1];\n\n  var searchOptions = useSearchOptions(mergedSearchValue, mergedOptions, mergedFieldNames, dropdownPrefixCls || prefixCls, searchConfig, changeOnSelect); // =========================== Values ===========================\n\n  var getMissingValues = useMissingValues(mergedOptions, mergedFieldNames); // Fill `rawValues` with checked conduction values\n\n  var _React$useMemo = React.useMemo(function () {\n    var _getMissingValues = getMissingValues(rawValues),\n        _getMissingValues2 = _slicedToArray(_getMissingValues, 2),\n        existValues = _getMissingValues2[0],\n        missingValues = _getMissingValues2[1];\n\n    if (!multiple || !rawValues.length) {\n      return [existValues, [], missingValues];\n    }\n\n    var keyPathValues = toPathKeys(existValues);\n    var keyPathEntities = getPathKeyEntities();\n\n    var _conductCheck = conductCheck(keyPathValues, true, keyPathEntities),\n        checkedKeys = _conductCheck.checkedKeys,\n        halfCheckedKeys = _conductCheck.halfCheckedKeys; // Convert key back to value cells\n\n\n    return [getValueByKeyPath(checkedKeys), getValueByKeyPath(halfCheckedKeys), missingValues];\n  }, [multiple, rawValues, getPathKeyEntities, getValueByKeyPath, getMissingValues]),\n      _React$useMemo2 = _slicedToArray(_React$useMemo, 3),\n      checkedValues = _React$useMemo2[0],\n      halfCheckedValues = _React$useMemo2[1],\n      missingCheckedValues = _React$useMemo2[2];\n\n  var deDuplicatedValues = React.useMemo(function () {\n    var checkedKeys = toPathKeys(checkedValues);\n    var deduplicateKeys = formatStrategyValues(checkedKeys, getPathKeyEntities, showCheckedStrategy);\n    return [].concat(_toConsumableArray(missingCheckedValues), _toConsumableArray(getValueByKeyPath(deduplicateKeys)));\n  }, [checkedValues, getPathKeyEntities, getValueByKeyPath, missingCheckedValues, showCheckedStrategy]);\n  var displayValues = useDisplayValues(deDuplicatedValues, mergedOptions, mergedFieldNames, multiple, displayRender); // =========================== Change ===========================\n\n  var triggerChange = useEvent(function (nextValues) {\n    setRawValues(nextValues); // Save perf if no need trigger event\n\n    if (onChange) {\n      var nextRawValues = toRawValues(nextValues);\n      var valueOptions = nextRawValues.map(function (valueCells) {\n        return toPathOptions(valueCells, mergedOptions, mergedFieldNames).map(function (valueOpt) {\n          return valueOpt.option;\n        });\n      });\n      var triggerValues = multiple ? nextRawValues : nextRawValues[0];\n      var triggerOptions = multiple ? valueOptions : valueOptions[0];\n      onChange(triggerValues, triggerOptions);\n    }\n  }); // =========================== Select ===========================\n\n  var onInternalSelect = useEvent(function (valuePath) {\n    if (!multiple || autoClearSearchValue) {\n      setSearchValue('');\n    }\n\n    if (!multiple) {\n      triggerChange(valuePath);\n    } else {\n      // Prepare conduct required info\n      var pathKey = toPathKey(valuePath);\n      var checkedPathKeys = toPathKeys(checkedValues);\n      var halfCheckedPathKeys = toPathKeys(halfCheckedValues);\n      var existInChecked = checkedPathKeys.includes(pathKey);\n      var existInMissing = missingCheckedValues.some(function (valueCells) {\n        return toPathKey(valueCells) === pathKey;\n      }); // Do update\n\n      var nextCheckedValues = checkedValues;\n      var nextMissingValues = missingCheckedValues;\n\n      if (existInMissing && !existInChecked) {\n        // Missing value only do filter\n        nextMissingValues = missingCheckedValues.filter(function (valueCells) {\n          return toPathKey(valueCells) !== pathKey;\n        });\n      } else {\n        // Update checked key first\n        var nextRawCheckedKeys = existInChecked ? checkedPathKeys.filter(function (key) {\n          return key !== pathKey;\n        }) : [].concat(_toConsumableArray(checkedPathKeys), [pathKey]);\n        var pathKeyEntities = getPathKeyEntities(); // Conduction by selected or not\n\n        var checkedKeys;\n\n        if (existInChecked) {\n          var _conductCheck2 = conductCheck(nextRawCheckedKeys, {\n            checked: false,\n            halfCheckedKeys: halfCheckedPathKeys\n          }, pathKeyEntities);\n\n          checkedKeys = _conductCheck2.checkedKeys;\n        } else {\n          var _conductCheck3 = conductCheck(nextRawCheckedKeys, true, pathKeyEntities);\n\n          checkedKeys = _conductCheck3.checkedKeys;\n        } // Roll up to parent level keys\n\n\n        var deDuplicatedKeys = formatStrategyValues(checkedKeys, getPathKeyEntities, showCheckedStrategy);\n        nextCheckedValues = getValueByKeyPath(deDuplicatedKeys);\n      }\n\n      triggerChange([].concat(_toConsumableArray(nextMissingValues), _toConsumableArray(nextCheckedValues)));\n    }\n  }); // Display Value change logic\n\n  var onDisplayValuesChange = function onDisplayValuesChange(_, info) {\n    if (info.type === 'clear') {\n      triggerChange([]);\n      return;\n    } // Cascader do not support `add` type. Only support `remove`\n\n\n    var _ref = info.values[0],\n        valueCells = _ref.valueCells;\n    onInternalSelect(valueCells);\n  }; // ============================ Open ============================\n\n\n  var mergedOpen = open !== undefined ? open : popupVisible;\n  var mergedDropdownClassName = dropdownClassName || popupClassName;\n  var mergedPlacement = placement || popupPlacement;\n\n  var onInternalDropdownVisibleChange = function onInternalDropdownVisibleChange(nextVisible) {\n    onDropdownVisibleChange === null || onDropdownVisibleChange === void 0 ? void 0 : onDropdownVisibleChange(nextVisible);\n    onPopupVisibleChange === null || onPopupVisibleChange === void 0 ? void 0 : onPopupVisibleChange(nextVisible);\n  }; // ========================== Warning ===========================\n\n\n  if (process.env.NODE_ENV !== 'production') {\n    warningProps(props);\n    warningNullOptions(mergedOptions, mergedFieldNames);\n  } // ========================== Context ===========================\n\n\n  var cascaderContext = React.useMemo(function () {\n    return {\n      options: mergedOptions,\n      fieldNames: mergedFieldNames,\n      values: checkedValues,\n      halfValues: halfCheckedValues,\n      changeOnSelect: changeOnSelect,\n      onSelect: onInternalSelect,\n      checkable: checkable,\n      searchOptions: searchOptions,\n      dropdownPrefixCls: dropdownPrefixCls,\n      loadData: loadData,\n      expandTrigger: expandTrigger,\n      expandIcon: expandIcon,\n      loadingIcon: loadingIcon,\n      dropdownMenuColumnStyle: dropdownMenuColumnStyle\n    };\n  }, [mergedOptions, mergedFieldNames, checkedValues, halfCheckedValues, changeOnSelect, onInternalSelect, checkable, searchOptions, dropdownPrefixCls, loadData, expandTrigger, expandIcon, loadingIcon, dropdownMenuColumnStyle]); // ==============================================================\n  // ==                          Render                          ==\n  // ==============================================================\n\n  var emptyOptions = !(mergedSearchValue ? searchOptions : mergedOptions).length;\n  var dropdownStyle = // Search to match width\n  mergedSearchValue && searchConfig.matchInputWidth || // Empty keep the width\n  emptyOptions ? {} : {\n    minWidth: 'auto'\n  };\n  return /*#__PURE__*/React.createElement(CascaderContext.Provider, {\n    value: cascaderContext\n  }, /*#__PURE__*/React.createElement(BaseSelect, _extends({}, restProps, {\n    // MISC\n    ref: ref,\n    id: mergedId,\n    prefixCls: prefixCls,\n    autoClearSearchValue: autoClearSearchValue,\n    dropdownMatchSelectWidth: dropdownMatchSelectWidth,\n    dropdownStyle: dropdownStyle // Value\n    ,\n    displayValues: displayValues,\n    onDisplayValuesChange: onDisplayValuesChange,\n    mode: multiple ? 'multiple' : undefined // Search\n    ,\n    searchValue: mergedSearchValue,\n    onSearch: onInternalSearch,\n    showSearch: mergedShowSearch // Options\n    ,\n    OptionList: OptionList,\n    emptyOptions: emptyOptions // Open\n    ,\n    open: mergedOpen,\n    dropdownClassName: mergedDropdownClassName,\n    placement: mergedPlacement,\n    onDropdownVisibleChange: onInternalDropdownVisibleChange // Children\n    ,\n    getRawInputElement: function getRawInputElement() {\n      return children;\n    }\n  })));\n});\n\nif (process.env.NODE_ENV !== 'production') {\n  Cascader.displayName = 'Cascader';\n}\n\nCascader.SHOW_PARENT = SHOW_PARENT;\nCascader.SHOW_CHILD = SHOW_CHILD;\nexport default Cascader;","map":{"version":3,"sources":["/Users/ravisrivastava/Downloads/newbcom/node_modules/rc-cascader/es/Cascader.js"],"names":["_extends","_toConsumableArray","_slicedToArray","_objectWithoutProperties","_excluded","BaseSelect","useId","conductCheck","useEvent","useMergedState","React","CascaderContext","useDisplayValues","useEntities","useMissingValues","useSearchConfig","useSearchOptions","OptionList","fillFieldNames","SHOW_CHILD","SHOW_PARENT","toPathKey","toPathKeys","formatStrategyValues","toPathOptions","warningProps","warningNullOptions","isMultipleValue","value","Array","isArray","toRawValues","length","map","val","Cascader","forwardRef","props","ref","id","_props$prefixCls","prefixCls","fieldNames","defaultValue","changeOnSelect","onChange","displayRender","checkable","_props$autoClearSearc","autoClearSearchValue","searchValue","onSearch","showSearch","expandTrigger","options","dropdownPrefixCls","loadData","popupVisible","open","popupClassName","dropdownClassName","dropdownMenuColumnStyle","popupPlacement","placement","onDropdownVisibleChange","onPopupVisibleChange","_props$expandIcon","expandIcon","loadingIcon","children","_props$dropdownMatchS","dropdownMatchSelectWidth","_props$showCheckedStr","showCheckedStrategy","restProps","mergedId","multiple","_useMergedState","postState","_useMergedState2","rawValues","setRawValues","mergedFieldNames","useMemo","JSON","stringify","mergedOptions","getPathKeyEntities","getValueByKeyPath","useCallback","pathKeys","keyPathEntities","pathKey","nodes","node","_useMergedState3","search","_useMergedState4","mergedSearchValue","setSearchValue","onInternalSearch","searchText","info","source","_useSearchConfig","_useSearchConfig2","mergedShowSearch","searchConfig","searchOptions","getMissingValues","_React$useMemo","_getMissingValues","_getMissingValues2","existValues","missingValues","keyPathValues","_conductCheck","checkedKeys","halfCheckedKeys","_React$useMemo2","checkedValues","halfCheckedValues","missingCheckedValues","deDuplicatedValues","deduplicateKeys","concat","displayValues","triggerChange","nextValues","nextRawValues","valueOptions","valueCells","valueOpt","option","triggerValues","triggerOptions","onInternalSelect","valuePath","checkedPathKeys","halfCheckedPathKeys","existInChecked","includes","existInMissing","some","nextCheckedValues","nextMissingValues","filter","nextRawCheckedKeys","key","pathKeyEntities","_conductCheck2","checked","_conductCheck3","deDuplicatedKeys","onDisplayValuesChange","_","type","_ref","values","mergedOpen","undefined","mergedDropdownClassName","mergedPlacement","onInternalDropdownVisibleChange","nextVisible","process","env","NODE_ENV","cascaderContext","halfValues","onSelect","emptyOptions","dropdownStyle","matchInputWidth","minWidth","createElement","Provider","mode","getRawInputElement","displayName"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"id\", \"prefixCls\", \"fieldNames\", \"defaultValue\", \"value\", \"changeOnSelect\", \"onChange\", \"displayRender\", \"checkable\", \"autoClearSearchValue\", \"searchValue\", \"onSearch\", \"showSearch\", \"expandTrigger\", \"options\", \"dropdownPrefixCls\", \"loadData\", \"popupVisible\", \"open\", \"popupClassName\", \"dropdownClassName\", \"dropdownMenuColumnStyle\", \"popupPlacement\", \"placement\", \"onDropdownVisibleChange\", \"onPopupVisibleChange\", \"expandIcon\", \"loadingIcon\", \"children\", \"dropdownMatchSelectWidth\", \"showCheckedStrategy\"];\nimport { BaseSelect } from 'rc-select';\nimport useId from \"rc-select/es/hooks/useId\";\nimport { conductCheck } from \"rc-tree/es/utils/conductUtil\";\nimport useEvent from \"rc-util/es/hooks/useEvent\";\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport * as React from 'react';\nimport CascaderContext from \"./context\";\nimport useDisplayValues from \"./hooks/useDisplayValues\";\nimport useEntities from \"./hooks/useEntities\";\nimport useMissingValues from \"./hooks/useMissingValues\";\nimport useSearchConfig from \"./hooks/useSearchConfig\";\nimport useSearchOptions from \"./hooks/useSearchOptions\";\nimport OptionList from \"./OptionList\";\nimport { fillFieldNames, SHOW_CHILD, SHOW_PARENT, toPathKey, toPathKeys } from \"./utils/commonUtil\";\nimport { formatStrategyValues, toPathOptions } from \"./utils/treeUtil\";\nimport warningProps, { warningNullOptions } from \"./utils/warningPropsUtil\";\nfunction isMultipleValue(value) {\n  return Array.isArray(value) && Array.isArray(value[0]);\n}\nfunction toRawValues(value) {\n  if (!value) {\n    return [];\n  }\n  if (isMultipleValue(value)) {\n    return value;\n  }\n  return (value.length === 0 ? [] : [value]).map(function (val) {\n    return Array.isArray(val) ? val : [val];\n  });\n}\nvar Cascader = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var id = props.id,\n    _props$prefixCls = props.prefixCls,\n    prefixCls = _props$prefixCls === void 0 ? 'rc-cascader' : _props$prefixCls,\n    fieldNames = props.fieldNames,\n    defaultValue = props.defaultValue,\n    value = props.value,\n    changeOnSelect = props.changeOnSelect,\n    onChange = props.onChange,\n    displayRender = props.displayRender,\n    checkable = props.checkable,\n    _props$autoClearSearc = props.autoClearSearchValue,\n    autoClearSearchValue = _props$autoClearSearc === void 0 ? true : _props$autoClearSearc,\n    searchValue = props.searchValue,\n    onSearch = props.onSearch,\n    showSearch = props.showSearch,\n    expandTrigger = props.expandTrigger,\n    options = props.options,\n    dropdownPrefixCls = props.dropdownPrefixCls,\n    loadData = props.loadData,\n    popupVisible = props.popupVisible,\n    open = props.open,\n    popupClassName = props.popupClassName,\n    dropdownClassName = props.dropdownClassName,\n    dropdownMenuColumnStyle = props.dropdownMenuColumnStyle,\n    popupPlacement = props.popupPlacement,\n    placement = props.placement,\n    onDropdownVisibleChange = props.onDropdownVisibleChange,\n    onPopupVisibleChange = props.onPopupVisibleChange,\n    _props$expandIcon = props.expandIcon,\n    expandIcon = _props$expandIcon === void 0 ? '>' : _props$expandIcon,\n    loadingIcon = props.loadingIcon,\n    children = props.children,\n    _props$dropdownMatchS = props.dropdownMatchSelectWidth,\n    dropdownMatchSelectWidth = _props$dropdownMatchS === void 0 ? false : _props$dropdownMatchS,\n    _props$showCheckedStr = props.showCheckedStrategy,\n    showCheckedStrategy = _props$showCheckedStr === void 0 ? SHOW_PARENT : _props$showCheckedStr,\n    restProps = _objectWithoutProperties(props, _excluded);\n  var mergedId = useId(id);\n  var multiple = !!checkable;\n\n  // =========================== Values ===========================\n  var _useMergedState = useMergedState(defaultValue, {\n      value: value,\n      postState: toRawValues\n    }),\n    _useMergedState2 = _slicedToArray(_useMergedState, 2),\n    rawValues = _useMergedState2[0],\n    setRawValues = _useMergedState2[1];\n\n  // ========================= FieldNames =========================\n  var mergedFieldNames = React.useMemo(function () {\n    return fillFieldNames(fieldNames);\n  }, /* eslint-disable react-hooks/exhaustive-deps */\n  [JSON.stringify(fieldNames)]\n  /* eslint-enable react-hooks/exhaustive-deps */);\n\n  // =========================== Option ===========================\n  var mergedOptions = React.useMemo(function () {\n    return options || [];\n  }, [options]);\n\n  // Only used in multiple mode, this fn will not call in single mode\n  var getPathKeyEntities = useEntities(mergedOptions, mergedFieldNames);\n\n  /** Convert path key back to value format */\n  var getValueByKeyPath = React.useCallback(function (pathKeys) {\n    var keyPathEntities = getPathKeyEntities();\n    return pathKeys.map(function (pathKey) {\n      var nodes = keyPathEntities[pathKey].nodes;\n      return nodes.map(function (node) {\n        return node[mergedFieldNames.value];\n      });\n    });\n  }, [getPathKeyEntities, mergedFieldNames]);\n\n  // =========================== Search ===========================\n  var _useMergedState3 = useMergedState('', {\n      value: searchValue,\n      postState: function postState(search) {\n        return search || '';\n      }\n    }),\n    _useMergedState4 = _slicedToArray(_useMergedState3, 2),\n    mergedSearchValue = _useMergedState4[0],\n    setSearchValue = _useMergedState4[1];\n  var onInternalSearch = function onInternalSearch(searchText, info) {\n    setSearchValue(searchText);\n    if (info.source !== 'blur' && onSearch) {\n      onSearch(searchText);\n    }\n  };\n  var _useSearchConfig = useSearchConfig(showSearch),\n    _useSearchConfig2 = _slicedToArray(_useSearchConfig, 2),\n    mergedShowSearch = _useSearchConfig2[0],\n    searchConfig = _useSearchConfig2[1];\n  var searchOptions = useSearchOptions(mergedSearchValue, mergedOptions, mergedFieldNames, dropdownPrefixCls || prefixCls, searchConfig, changeOnSelect);\n\n  // =========================== Values ===========================\n  var getMissingValues = useMissingValues(mergedOptions, mergedFieldNames);\n\n  // Fill `rawValues` with checked conduction values\n  var _React$useMemo = React.useMemo(function () {\n      var _getMissingValues = getMissingValues(rawValues),\n        _getMissingValues2 = _slicedToArray(_getMissingValues, 2),\n        existValues = _getMissingValues2[0],\n        missingValues = _getMissingValues2[1];\n      if (!multiple || !rawValues.length) {\n        return [existValues, [], missingValues];\n      }\n      var keyPathValues = toPathKeys(existValues);\n      var keyPathEntities = getPathKeyEntities();\n      var _conductCheck = conductCheck(keyPathValues, true, keyPathEntities),\n        checkedKeys = _conductCheck.checkedKeys,\n        halfCheckedKeys = _conductCheck.halfCheckedKeys;\n\n      // Convert key back to value cells\n      return [getValueByKeyPath(checkedKeys), getValueByKeyPath(halfCheckedKeys), missingValues];\n    }, [multiple, rawValues, getPathKeyEntities, getValueByKeyPath, getMissingValues]),\n    _React$useMemo2 = _slicedToArray(_React$useMemo, 3),\n    checkedValues = _React$useMemo2[0],\n    halfCheckedValues = _React$useMemo2[1],\n    missingCheckedValues = _React$useMemo2[2];\n  var deDuplicatedValues = React.useMemo(function () {\n    var checkedKeys = toPathKeys(checkedValues);\n    var deduplicateKeys = formatStrategyValues(checkedKeys, getPathKeyEntities, showCheckedStrategy);\n    return [].concat(_toConsumableArray(missingCheckedValues), _toConsumableArray(getValueByKeyPath(deduplicateKeys)));\n  }, [checkedValues, getPathKeyEntities, getValueByKeyPath, missingCheckedValues, showCheckedStrategy]);\n  var displayValues = useDisplayValues(deDuplicatedValues, mergedOptions, mergedFieldNames, multiple, displayRender);\n\n  // =========================== Change ===========================\n  var triggerChange = useEvent(function (nextValues) {\n    setRawValues(nextValues);\n\n    // Save perf if no need trigger event\n    if (onChange) {\n      var nextRawValues = toRawValues(nextValues);\n      var valueOptions = nextRawValues.map(function (valueCells) {\n        return toPathOptions(valueCells, mergedOptions, mergedFieldNames).map(function (valueOpt) {\n          return valueOpt.option;\n        });\n      });\n      var triggerValues = multiple ? nextRawValues : nextRawValues[0];\n      var triggerOptions = multiple ? valueOptions : valueOptions[0];\n      onChange(triggerValues, triggerOptions);\n    }\n  });\n\n  // =========================== Select ===========================\n  var onInternalSelect = useEvent(function (valuePath) {\n    if (!multiple || autoClearSearchValue) {\n      setSearchValue('');\n    }\n    if (!multiple) {\n      triggerChange(valuePath);\n    } else {\n      // Prepare conduct required info\n      var pathKey = toPathKey(valuePath);\n      var checkedPathKeys = toPathKeys(checkedValues);\n      var halfCheckedPathKeys = toPathKeys(halfCheckedValues);\n      var existInChecked = checkedPathKeys.includes(pathKey);\n      var existInMissing = missingCheckedValues.some(function (valueCells) {\n        return toPathKey(valueCells) === pathKey;\n      });\n\n      // Do update\n      var nextCheckedValues = checkedValues;\n      var nextMissingValues = missingCheckedValues;\n      if (existInMissing && !existInChecked) {\n        // Missing value only do filter\n        nextMissingValues = missingCheckedValues.filter(function (valueCells) {\n          return toPathKey(valueCells) !== pathKey;\n        });\n      } else {\n        // Update checked key first\n        var nextRawCheckedKeys = existInChecked ? checkedPathKeys.filter(function (key) {\n          return key !== pathKey;\n        }) : [].concat(_toConsumableArray(checkedPathKeys), [pathKey]);\n        var pathKeyEntities = getPathKeyEntities();\n\n        // Conduction by selected or not\n        var checkedKeys;\n        if (existInChecked) {\n          var _conductCheck2 = conductCheck(nextRawCheckedKeys, {\n            checked: false,\n            halfCheckedKeys: halfCheckedPathKeys\n          }, pathKeyEntities);\n          checkedKeys = _conductCheck2.checkedKeys;\n        } else {\n          var _conductCheck3 = conductCheck(nextRawCheckedKeys, true, pathKeyEntities);\n          checkedKeys = _conductCheck3.checkedKeys;\n        }\n\n        // Roll up to parent level keys\n        var deDuplicatedKeys = formatStrategyValues(checkedKeys, getPathKeyEntities, showCheckedStrategy);\n        nextCheckedValues = getValueByKeyPath(deDuplicatedKeys);\n      }\n      triggerChange([].concat(_toConsumableArray(nextMissingValues), _toConsumableArray(nextCheckedValues)));\n    }\n  });\n\n  // Display Value change logic\n  var onDisplayValuesChange = function onDisplayValuesChange(_, info) {\n    if (info.type === 'clear') {\n      triggerChange([]);\n      return;\n    }\n\n    // Cascader do not support `add` type. Only support `remove`\n    var _ref = info.values[0],\n      valueCells = _ref.valueCells;\n    onInternalSelect(valueCells);\n  };\n\n  // ============================ Open ============================\n  var mergedOpen = open !== undefined ? open : popupVisible;\n  var mergedDropdownClassName = dropdownClassName || popupClassName;\n  var mergedPlacement = placement || popupPlacement;\n  var onInternalDropdownVisibleChange = function onInternalDropdownVisibleChange(nextVisible) {\n    onDropdownVisibleChange === null || onDropdownVisibleChange === void 0 ? void 0 : onDropdownVisibleChange(nextVisible);\n    onPopupVisibleChange === null || onPopupVisibleChange === void 0 ? void 0 : onPopupVisibleChange(nextVisible);\n  };\n\n  // ========================== Warning ===========================\n  if (process.env.NODE_ENV !== 'production') {\n    warningProps(props);\n    warningNullOptions(mergedOptions, mergedFieldNames);\n  }\n\n  // ========================== Context ===========================\n  var cascaderContext = React.useMemo(function () {\n    return {\n      options: mergedOptions,\n      fieldNames: mergedFieldNames,\n      values: checkedValues,\n      halfValues: halfCheckedValues,\n      changeOnSelect: changeOnSelect,\n      onSelect: onInternalSelect,\n      checkable: checkable,\n      searchOptions: searchOptions,\n      dropdownPrefixCls: dropdownPrefixCls,\n      loadData: loadData,\n      expandTrigger: expandTrigger,\n      expandIcon: expandIcon,\n      loadingIcon: loadingIcon,\n      dropdownMenuColumnStyle: dropdownMenuColumnStyle\n    };\n  }, [mergedOptions, mergedFieldNames, checkedValues, halfCheckedValues, changeOnSelect, onInternalSelect, checkable, searchOptions, dropdownPrefixCls, loadData, expandTrigger, expandIcon, loadingIcon, dropdownMenuColumnStyle]);\n\n  // ==============================================================\n  // ==                          Render                          ==\n  // ==============================================================\n  var emptyOptions = !(mergedSearchValue ? searchOptions : mergedOptions).length;\n  var dropdownStyle =\n  // Search to match width\n  mergedSearchValue && searchConfig.matchInputWidth ||\n  // Empty keep the width\n  emptyOptions ? {} : {\n    minWidth: 'auto'\n  };\n  return /*#__PURE__*/React.createElement(CascaderContext.Provider, {\n    value: cascaderContext\n  }, /*#__PURE__*/React.createElement(BaseSelect, _extends({}, restProps, {\n    // MISC\n    ref: ref,\n    id: mergedId,\n    prefixCls: prefixCls,\n    autoClearSearchValue: autoClearSearchValue,\n    dropdownMatchSelectWidth: dropdownMatchSelectWidth,\n    dropdownStyle: dropdownStyle\n    // Value\n    ,\n    displayValues: displayValues,\n    onDisplayValuesChange: onDisplayValuesChange,\n    mode: multiple ? 'multiple' : undefined\n    // Search\n    ,\n    searchValue: mergedSearchValue,\n    onSearch: onInternalSearch,\n    showSearch: mergedShowSearch\n    // Options\n    ,\n    OptionList: OptionList,\n    emptyOptions: emptyOptions\n    // Open\n    ,\n    open: mergedOpen,\n    dropdownClassName: mergedDropdownClassName,\n    placement: mergedPlacement,\n    onDropdownVisibleChange: onInternalDropdownVisibleChange\n    // Children\n    ,\n    getRawInputElement: function getRawInputElement() {\n      return children;\n    }\n  })));\n});\nif (process.env.NODE_ENV !== 'production') {\n  Cascader.displayName = 'Cascader';\n}\nCascader.SHOW_PARENT = SHOW_PARENT;\nCascader.SHOW_CHILD = SHOW_CHILD;\nexport default Cascader;"]},"metadata":{},"sourceType":"module"}