{"ast":null,"code":"\"use client\";\n\nimport React, { useContext, useMemo, useRef, useState } from 'react';\nimport classNames from 'classnames';\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport genPurePanel from '../_util/PurePanel';\nimport { getStatusClassNames } from '../_util/statusUtils';\nimport { devUseWarning } from '../_util/warning';\nimport { ConfigContext } from '../config-provider/context';\nimport useSize from '../config-provider/hooks/useSize';\nimport { FormItemInputContext, NoFormStyle } from '../form/context';\nimport Popover from '../popover';\nimport { useToken } from '../theme/internal';\nimport ColorPickerPanel from './ColorPickerPanel';\nimport ColorTrigger from './components/ColorTrigger';\nimport useColorState from './hooks/useColorState';\nimport useStyle from './style/index';\nimport { customizePrefixCls, genAlphaColor, generateColor, getAlphaColor } from './util';\n\nconst ColorPicker = props => {\n  const {\n    value,\n    defaultValue,\n    format,\n    defaultFormat,\n    allowClear = false,\n    presets,\n    children,\n    trigger = 'click',\n    open,\n    disabled,\n    placement = 'bottomLeft',\n    arrow = true,\n    panelRender,\n    showText,\n    style,\n    className,\n    size: customizeSize,\n    rootClassName,\n    styles,\n    disabledAlpha = false,\n    onFormatChange,\n    onChange,\n    onClear,\n    onOpenChange,\n    onChangeComplete,\n    getPopupContainer,\n    autoAdjustOverflow = true,\n    destroyTooltipOnHide\n  } = props;\n  const {\n    getPrefixCls,\n    direction,\n    colorPicker\n  } = useContext(ConfigContext);\n  const [, token] = useToken();\n  const [colorValue, setColorValue] = useColorState(token.colorPrimary, {\n    value,\n    defaultValue\n  });\n  const [popupOpen, setPopupOpen] = useMergedState(false, {\n    value: open,\n    postState: openData => !disabled && openData,\n    onChange: onOpenChange\n  });\n  const [formatValue, setFormatValue] = useMergedState(format, {\n    value: format,\n    defaultValue: defaultFormat,\n    onChange: onFormatChange\n  });\n  const [colorCleared, setColorCleared] = useState(false);\n  const prefixCls = getPrefixCls('color-picker', customizePrefixCls);\n  const isAlphaColor = useMemo(() => getAlphaColor(colorValue) < 100, [colorValue]); // ===================== Form Status =====================\n\n  const {\n    status: contextStatus\n  } = React.useContext(FormItemInputContext); // ===================== Style =====================\n\n  const mergedSize = useSize(customizeSize);\n  const [wrapSSR, hashId] = useStyle(prefixCls);\n  const rtlCls = {\n    [`${prefixCls}-rtl`]: direction\n  };\n  const mergeRootCls = classNames(rootClassName, rtlCls);\n  const mergeCls = classNames(getStatusClassNames(prefixCls, contextStatus), {\n    [`${prefixCls}-sm`]: mergedSize === 'small',\n    [`${prefixCls}-lg`]: mergedSize === 'large'\n  }, colorPicker === null || colorPicker === void 0 ? void 0 : colorPicker.className, mergeRootCls, className, hashId);\n  const mergePopupCls = classNames(prefixCls, rtlCls);\n  const popupAllowCloseRef = useRef(true); // ===================== Warning ======================\n\n  if (process.env.NODE_ENV !== 'production') {\n    const warning = devUseWarning('ColorPicker');\n    process.env.NODE_ENV !== \"production\" ? warning(!(disabledAlpha && isAlphaColor), 'usage', '`disabledAlpha` will make the alpha to be 100% when use alpha color.') : void 0;\n  }\n\n  const handleChange = (data, type, pickColor) => {\n    let color = generateColor(data);\n    const isNull = value === null || !value && defaultValue === null;\n\n    if (colorCleared || isNull) {\n      setColorCleared(false); // ignore alpha slider\n\n      if (getAlphaColor(colorValue) === 0 && type !== 'alpha') {\n        color = genAlphaColor(color);\n      }\n    } // ignore alpha color\n\n\n    if (disabledAlpha && isAlphaColor) {\n      color = genAlphaColor(color);\n    } // Only for drag-and-drop color picking\n\n\n    if (pickColor) {\n      popupAllowCloseRef.current = false;\n    } else {\n      onChangeComplete === null || onChangeComplete === void 0 ? void 0 : onChangeComplete(color);\n    }\n\n    setColorValue(color);\n    onChange === null || onChange === void 0 ? void 0 : onChange(color, color.toHexString());\n  };\n\n  const handleClear = () => {\n    setColorCleared(true);\n    onClear === null || onClear === void 0 ? void 0 : onClear();\n  };\n\n  const handleChangeComplete = color => {\n    popupAllowCloseRef.current = true;\n    let changeColor = generateColor(color); // ignore alpha color\n\n    if (disabledAlpha && isAlphaColor) {\n      changeColor = genAlphaColor(color);\n    }\n\n    onChangeComplete === null || onChangeComplete === void 0 ? void 0 : onChangeComplete(changeColor);\n  };\n\n  const popoverProps = {\n    open: popupOpen,\n    trigger,\n    placement,\n    arrow,\n    rootClassName,\n    getPopupContainer,\n    autoAdjustOverflow,\n    destroyTooltipOnHide\n  };\n  const colorBaseProps = {\n    prefixCls,\n    color: colorValue,\n    allowClear,\n    colorCleared,\n    disabled,\n    disabledAlpha,\n    presets,\n    panelRender,\n    format: formatValue,\n    onFormatChange: setFormatValue,\n    onChangeComplete: handleChangeComplete\n  };\n  const mergedStyle = Object.assign(Object.assign({}, colorPicker === null || colorPicker === void 0 ? void 0 : colorPicker.style), style);\n  return wrapSSR( /*#__PURE__*/React.createElement(Popover, Object.assign({\n    style: styles === null || styles === void 0 ? void 0 : styles.popup,\n    overlayInnerStyle: styles === null || styles === void 0 ? void 0 : styles.popupOverlayInner,\n    onOpenChange: visible => {\n      if (popupAllowCloseRef.current && !disabled) {\n        setPopupOpen(visible);\n      }\n    },\n    content: /*#__PURE__*/React.createElement(NoFormStyle, {\n      override: true,\n      status: true\n    }, /*#__PURE__*/React.createElement(ColorPickerPanel, Object.assign({}, colorBaseProps, {\n      onChange: handleChange,\n      onChangeComplete: handleChangeComplete,\n      onClear: handleClear\n    }))),\n    overlayClassName: mergePopupCls\n  }, popoverProps), children || /*#__PURE__*/React.createElement(ColorTrigger, {\n    open: popupOpen,\n    className: mergeCls,\n    style: mergedStyle,\n    color: value ? generateColor(value) : colorValue,\n    prefixCls: prefixCls,\n    disabled: disabled,\n    colorCleared: colorCleared,\n    showText: showText,\n    format: formatValue\n  })));\n};\n\nif (process.env.NODE_ENV !== 'production') {\n  ColorPicker.displayName = 'ColorPicker';\n}\n\nconst PurePanel = genPurePanel(ColorPicker, 'color-picker',\n/* istanbul ignore next */\nprefixCls => prefixCls, props => Object.assign(Object.assign({}, props), {\n  placement: 'bottom',\n  autoAdjustOverflow: false\n}));\nColorPicker._InternalPanelDoNotUseOrYouWillBeFired = PurePanel;\nexport default ColorPicker;","map":{"version":3,"sources":["/Users/ravisrivastava/Downloads/newbcom/node_modules/antd/es/color-picker/ColorPicker.js"],"names":["React","useContext","useMemo","useRef","useState","classNames","useMergedState","genPurePanel","getStatusClassNames","devUseWarning","ConfigContext","useSize","FormItemInputContext","NoFormStyle","Popover","useToken","ColorPickerPanel","ColorTrigger","useColorState","useStyle","customizePrefixCls","genAlphaColor","generateColor","getAlphaColor","ColorPicker","props","value","defaultValue","format","defaultFormat","allowClear","presets","children","trigger","open","disabled","placement","arrow","panelRender","showText","style","className","size","customizeSize","rootClassName","styles","disabledAlpha","onFormatChange","onChange","onClear","onOpenChange","onChangeComplete","getPopupContainer","autoAdjustOverflow","destroyTooltipOnHide","getPrefixCls","direction","colorPicker","token","colorValue","setColorValue","colorPrimary","popupOpen","setPopupOpen","postState","openData","formatValue","setFormatValue","colorCleared","setColorCleared","prefixCls","isAlphaColor","status","contextStatus","mergedSize","wrapSSR","hashId","rtlCls","mergeRootCls","mergeCls","mergePopupCls","popupAllowCloseRef","process","env","NODE_ENV","warning","handleChange","data","type","pickColor","color","isNull","current","toHexString","handleClear","handleChangeComplete","changeColor","popoverProps","colorBaseProps","mergedStyle","Object","assign","createElement","popup","overlayInnerStyle","popupOverlayInner","visible","content","override","overlayClassName","displayName","PurePanel","_InternalPanelDoNotUseOrYouWillBeFired"],"mappings":"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","sourcesContent":["\"use client\";\n\nimport React, { useContext, useMemo, useRef, useState } from 'react';\nimport classNames from 'classnames';\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport genPurePanel from '../_util/PurePanel';\nimport { getStatusClassNames } from '../_util/statusUtils';\nimport { devUseWarning } from '../_util/warning';\nimport { ConfigContext } from '../config-provider/context';\nimport useSize from '../config-provider/hooks/useSize';\nimport { FormItemInputContext, NoFormStyle } from '../form/context';\nimport Popover from '../popover';\nimport { useToken } from '../theme/internal';\nimport ColorPickerPanel from './ColorPickerPanel';\nimport ColorTrigger from './components/ColorTrigger';\nimport useColorState from './hooks/useColorState';\nimport useStyle from './style/index';\nimport { customizePrefixCls, genAlphaColor, generateColor, getAlphaColor } from './util';\nconst ColorPicker = props => {\n  const {\n    value,\n    defaultValue,\n    format,\n    defaultFormat,\n    allowClear = false,\n    presets,\n    children,\n    trigger = 'click',\n    open,\n    disabled,\n    placement = 'bottomLeft',\n    arrow = true,\n    panelRender,\n    showText,\n    style,\n    className,\n    size: customizeSize,\n    rootClassName,\n    styles,\n    disabledAlpha = false,\n    onFormatChange,\n    onChange,\n    onClear,\n    onOpenChange,\n    onChangeComplete,\n    getPopupContainer,\n    autoAdjustOverflow = true,\n    destroyTooltipOnHide\n  } = props;\n  const {\n    getPrefixCls,\n    direction,\n    colorPicker\n  } = useContext(ConfigContext);\n  const [, token] = useToken();\n  const [colorValue, setColorValue] = useColorState(token.colorPrimary, {\n    value,\n    defaultValue\n  });\n  const [popupOpen, setPopupOpen] = useMergedState(false, {\n    value: open,\n    postState: openData => !disabled && openData,\n    onChange: onOpenChange\n  });\n  const [formatValue, setFormatValue] = useMergedState(format, {\n    value: format,\n    defaultValue: defaultFormat,\n    onChange: onFormatChange\n  });\n  const [colorCleared, setColorCleared] = useState(false);\n  const prefixCls = getPrefixCls('color-picker', customizePrefixCls);\n  const isAlphaColor = useMemo(() => getAlphaColor(colorValue) < 100, [colorValue]);\n  // ===================== Form Status =====================\n  const {\n    status: contextStatus\n  } = React.useContext(FormItemInputContext);\n  // ===================== Style =====================\n  const mergedSize = useSize(customizeSize);\n  const [wrapSSR, hashId] = useStyle(prefixCls);\n  const rtlCls = {\n    [`${prefixCls}-rtl`]: direction\n  };\n  const mergeRootCls = classNames(rootClassName, rtlCls);\n  const mergeCls = classNames(getStatusClassNames(prefixCls, contextStatus), {\n    [`${prefixCls}-sm`]: mergedSize === 'small',\n    [`${prefixCls}-lg`]: mergedSize === 'large'\n  }, colorPicker === null || colorPicker === void 0 ? void 0 : colorPicker.className, mergeRootCls, className, hashId);\n  const mergePopupCls = classNames(prefixCls, rtlCls);\n  const popupAllowCloseRef = useRef(true);\n  // ===================== Warning ======================\n  if (process.env.NODE_ENV !== 'production') {\n    const warning = devUseWarning('ColorPicker');\n    process.env.NODE_ENV !== \"production\" ? warning(!(disabledAlpha && isAlphaColor), 'usage', '`disabledAlpha` will make the alpha to be 100% when use alpha color.') : void 0;\n  }\n  const handleChange = (data, type, pickColor) => {\n    let color = generateColor(data);\n    const isNull = value === null || !value && defaultValue === null;\n    if (colorCleared || isNull) {\n      setColorCleared(false);\n      // ignore alpha slider\n      if (getAlphaColor(colorValue) === 0 && type !== 'alpha') {\n        color = genAlphaColor(color);\n      }\n    }\n    // ignore alpha color\n    if (disabledAlpha && isAlphaColor) {\n      color = genAlphaColor(color);\n    }\n    // Only for drag-and-drop color picking\n    if (pickColor) {\n      popupAllowCloseRef.current = false;\n    } else {\n      onChangeComplete === null || onChangeComplete === void 0 ? void 0 : onChangeComplete(color);\n    }\n    setColorValue(color);\n    onChange === null || onChange === void 0 ? void 0 : onChange(color, color.toHexString());\n  };\n  const handleClear = () => {\n    setColorCleared(true);\n    onClear === null || onClear === void 0 ? void 0 : onClear();\n  };\n  const handleChangeComplete = color => {\n    popupAllowCloseRef.current = true;\n    let changeColor = generateColor(color);\n    // ignore alpha color\n    if (disabledAlpha && isAlphaColor) {\n      changeColor = genAlphaColor(color);\n    }\n    onChangeComplete === null || onChangeComplete === void 0 ? void 0 : onChangeComplete(changeColor);\n  };\n  const popoverProps = {\n    open: popupOpen,\n    trigger,\n    placement,\n    arrow,\n    rootClassName,\n    getPopupContainer,\n    autoAdjustOverflow,\n    destroyTooltipOnHide\n  };\n  const colorBaseProps = {\n    prefixCls,\n    color: colorValue,\n    allowClear,\n    colorCleared,\n    disabled,\n    disabledAlpha,\n    presets,\n    panelRender,\n    format: formatValue,\n    onFormatChange: setFormatValue,\n    onChangeComplete: handleChangeComplete\n  };\n  const mergedStyle = Object.assign(Object.assign({}, colorPicker === null || colorPicker === void 0 ? void 0 : colorPicker.style), style);\n  return wrapSSR( /*#__PURE__*/React.createElement(Popover, Object.assign({\n    style: styles === null || styles === void 0 ? void 0 : styles.popup,\n    overlayInnerStyle: styles === null || styles === void 0 ? void 0 : styles.popupOverlayInner,\n    onOpenChange: visible => {\n      if (popupAllowCloseRef.current && !disabled) {\n        setPopupOpen(visible);\n      }\n    },\n    content: /*#__PURE__*/React.createElement(NoFormStyle, {\n      override: true,\n      status: true\n    }, /*#__PURE__*/React.createElement(ColorPickerPanel, Object.assign({}, colorBaseProps, {\n      onChange: handleChange,\n      onChangeComplete: handleChangeComplete,\n      onClear: handleClear\n    }))),\n    overlayClassName: mergePopupCls\n  }, popoverProps), children || /*#__PURE__*/React.createElement(ColorTrigger, {\n    open: popupOpen,\n    className: mergeCls,\n    style: mergedStyle,\n    color: value ? generateColor(value) : colorValue,\n    prefixCls: prefixCls,\n    disabled: disabled,\n    colorCleared: colorCleared,\n    showText: showText,\n    format: formatValue\n  })));\n};\nif (process.env.NODE_ENV !== 'production') {\n  ColorPicker.displayName = 'ColorPicker';\n}\nconst PurePanel = genPurePanel(ColorPicker, 'color-picker', /* istanbul ignore next */\nprefixCls => prefixCls, props => Object.assign(Object.assign({}, props), {\n  placement: 'bottom',\n  autoAdjustOverflow: false\n}));\nColorPicker._InternalPanelDoNotUseOrYouWillBeFired = PurePanel;\nexport default ColorPicker;"]},"metadata":{},"sourceType":"module"}