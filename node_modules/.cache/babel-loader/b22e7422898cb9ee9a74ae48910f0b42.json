{"ast":null,"code":"\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport toArray from \"rc-util/es/Children/toArray\";\nimport omit from \"rc-util/es/omit\";\nimport genPurePanel from '../_util/PurePanel';\nimport { isValidElement } from '../_util/reactNode';\nimport { devUseWarning } from '../_util/warning';\nimport { ConfigContext } from '../config-provider';\nimport Select from '../select';\nconst {\n  Option\n} = Select;\n\nfunction isSelectOptionOrSelectOptGroup(child) {\n  return child && child.type && (child.type.isSelectOption || child.type.isSelectOptGroup);\n}\n\nconst AutoComplete = (props, ref) => {\n  const {\n    prefixCls: customizePrefixCls,\n    className,\n    popupClassName,\n    dropdownClassName,\n    children,\n    dataSource\n  } = props;\n  const childNodes = toArray(children); // ============================= Input =============================\n\n  let customizeInput;\n\n  if (childNodes.length === 1 && isValidElement(childNodes[0]) && !isSelectOptionOrSelectOptGroup(childNodes[0])) {\n    [customizeInput] = childNodes;\n  }\n\n  const getInputElement = customizeInput ? () => customizeInput : undefined; // ============================ Options ============================\n\n  let optionChildren; // [Legacy] convert `children` or `dataSource` into option children\n\n  if (childNodes.length && isSelectOptionOrSelectOptGroup(childNodes[0])) {\n    optionChildren = children;\n  } else {\n    optionChildren = dataSource ? dataSource.map(item => {\n      if (isValidElement(item)) {\n        return item;\n      }\n\n      switch (typeof item) {\n        case 'string':\n          return /*#__PURE__*/React.createElement(Option, {\n            key: item,\n            value: item\n          }, item);\n\n        case 'object':\n          {\n            const {\n              value: optionValue\n            } = item;\n            return /*#__PURE__*/React.createElement(Option, {\n              key: optionValue,\n              value: optionValue\n            }, item.text);\n          }\n\n        default:\n          return undefined;\n      }\n    }) : [];\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    const warning = devUseWarning('AutoComplete');\n    warning.deprecated(!('dataSource' in props), 'dataSource', 'options');\n    process.env.NODE_ENV !== \"production\" ? warning(!customizeInput || !('size' in props), 'usage', 'You need to control style self instead of setting `size` when using customize input.') : void 0;\n    warning.deprecated(!dropdownClassName, 'dropdownClassName', 'popupClassName');\n  }\n\n  const {\n    getPrefixCls\n  } = React.useContext(ConfigContext);\n  const prefixCls = getPrefixCls('select', customizePrefixCls);\n  return /*#__PURE__*/React.createElement(Select, Object.assign({\n    ref: ref,\n    suffixIcon: null\n  }, omit(props, ['dataSource', 'dropdownClassName']), {\n    prefixCls: prefixCls,\n    popupClassName: popupClassName || dropdownClassName,\n    className: classNames(`${prefixCls}-auto-complete`, className),\n    mode: Select.SECRET_COMBOBOX_MODE_DO_NOT_USE,\n    // Internal api\n    getInputElement\n  }), optionChildren);\n};\n\nconst RefAutoComplete = /*#__PURE__*/React.forwardRef(AutoComplete); // We don't care debug panel\n\n/* istanbul ignore next */\n\nconst PurePanel = genPurePanel(RefAutoComplete);\nRefAutoComplete.Option = Option;\nRefAutoComplete._InternalPanelDoNotUseOrYouWillBeFired = PurePanel;\n\nif (process.env.NODE_ENV !== 'production') {\n  RefAutoComplete.displayName = 'AutoComplete';\n}\n\nexport default RefAutoComplete;","map":{"version":3,"sources":["/Users/ravisrivastava/Downloads/newbcom/node_modules/antd/es/auto-complete/index.js"],"names":["React","classNames","toArray","omit","genPurePanel","isValidElement","devUseWarning","ConfigContext","Select","Option","isSelectOptionOrSelectOptGroup","child","type","isSelectOption","isSelectOptGroup","AutoComplete","props","ref","prefixCls","customizePrefixCls","className","popupClassName","dropdownClassName","children","dataSource","childNodes","customizeInput","length","getInputElement","undefined","optionChildren","map","item","createElement","key","value","optionValue","text","process","env","NODE_ENV","warning","deprecated","getPrefixCls","useContext","Object","assign","suffixIcon","mode","SECRET_COMBOBOX_MODE_DO_NOT_USE","RefAutoComplete","forwardRef","PurePanel","_InternalPanelDoNotUseOrYouWillBeFired","displayName"],"mappings":"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","sourcesContent":["\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport toArray from \"rc-util/es/Children/toArray\";\nimport omit from \"rc-util/es/omit\";\nimport genPurePanel from '../_util/PurePanel';\nimport { isValidElement } from '../_util/reactNode';\nimport { devUseWarning } from '../_util/warning';\nimport { ConfigContext } from '../config-provider';\nimport Select from '../select';\nconst {\n  Option\n} = Select;\nfunction isSelectOptionOrSelectOptGroup(child) {\n  return child && child.type && (child.type.isSelectOption || child.type.isSelectOptGroup);\n}\nconst AutoComplete = (props, ref) => {\n  const {\n    prefixCls: customizePrefixCls,\n    className,\n    popupClassName,\n    dropdownClassName,\n    children,\n    dataSource\n  } = props;\n  const childNodes = toArray(children);\n  // ============================= Input =============================\n  let customizeInput;\n  if (childNodes.length === 1 && isValidElement(childNodes[0]) && !isSelectOptionOrSelectOptGroup(childNodes[0])) {\n    [customizeInput] = childNodes;\n  }\n  const getInputElement = customizeInput ? () => customizeInput : undefined;\n  // ============================ Options ============================\n  let optionChildren;\n  // [Legacy] convert `children` or `dataSource` into option children\n  if (childNodes.length && isSelectOptionOrSelectOptGroup(childNodes[0])) {\n    optionChildren = children;\n  } else {\n    optionChildren = dataSource ? dataSource.map(item => {\n      if (isValidElement(item)) {\n        return item;\n      }\n      switch (typeof item) {\n        case 'string':\n          return /*#__PURE__*/React.createElement(Option, {\n            key: item,\n            value: item\n          }, item);\n        case 'object':\n          {\n            const {\n              value: optionValue\n            } = item;\n            return /*#__PURE__*/React.createElement(Option, {\n              key: optionValue,\n              value: optionValue\n            }, item.text);\n          }\n        default:\n          return undefined;\n      }\n    }) : [];\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    const warning = devUseWarning('AutoComplete');\n    warning.deprecated(!('dataSource' in props), 'dataSource', 'options');\n    process.env.NODE_ENV !== \"production\" ? warning(!customizeInput || !('size' in props), 'usage', 'You need to control style self instead of setting `size` when using customize input.') : void 0;\n    warning.deprecated(!dropdownClassName, 'dropdownClassName', 'popupClassName');\n  }\n  const {\n    getPrefixCls\n  } = React.useContext(ConfigContext);\n  const prefixCls = getPrefixCls('select', customizePrefixCls);\n  return /*#__PURE__*/React.createElement(Select, Object.assign({\n    ref: ref,\n    suffixIcon: null\n  }, omit(props, ['dataSource', 'dropdownClassName']), {\n    prefixCls: prefixCls,\n    popupClassName: popupClassName || dropdownClassName,\n    className: classNames(`${prefixCls}-auto-complete`, className),\n    mode: Select.SECRET_COMBOBOX_MODE_DO_NOT_USE,\n    // Internal api\n    getInputElement\n  }), optionChildren);\n};\nconst RefAutoComplete = /*#__PURE__*/React.forwardRef(AutoComplete);\n// We don't care debug panel\n/* istanbul ignore next */\nconst PurePanel = genPurePanel(RefAutoComplete);\nRefAutoComplete.Option = Option;\nRefAutoComplete._InternalPanelDoNotUseOrYouWillBeFired = PurePanel;\nif (process.env.NODE_ENV !== 'production') {\n  RefAutoComplete.displayName = 'AutoComplete';\n}\nexport default RefAutoComplete;"]},"metadata":{},"sourceType":"module"}