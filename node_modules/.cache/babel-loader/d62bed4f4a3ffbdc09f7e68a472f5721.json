{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { getClientSize } from \"rc-util/es/Dom/css\";\nimport isEqual from \"rc-util/es/isEqual\";\nimport raf from \"rc-util/es/raf\";\nimport { useRef, useState } from 'react';\nvar initialTransform = {\n  x: 0,\n  y: 0,\n  rotate: 0,\n  scale: 1,\n  flipX: false,\n  flipY: false\n};\nexport default function useImageTransform(imgRef, minScale, maxScale, onTransform) {\n  var frame = useRef(null);\n  var queue = useRef([]);\n\n  var _useState = useState(initialTransform),\n      _useState2 = _slicedToArray(_useState, 2),\n      transform = _useState2[0],\n      setTransform = _useState2[1];\n\n  var resetTransform = function resetTransform(action) {\n    setTransform(initialTransform);\n\n    if (onTransform && !isEqual(initialTransform, transform)) {\n      onTransform({\n        transform: initialTransform,\n        action: action\n      });\n    }\n  };\n  /** Direct update transform */\n\n\n  var updateTransform = function updateTransform(newTransform, action) {\n    if (frame.current === null) {\n      queue.current = [];\n      frame.current = raf(function () {\n        setTransform(function (preState) {\n          var memoState = preState;\n          queue.current.forEach(function (queueState) {\n            memoState = _objectSpread(_objectSpread({}, memoState), queueState);\n          });\n          frame.current = null;\n          onTransform === null || onTransform === void 0 ? void 0 : onTransform({\n            transform: memoState,\n            action: action\n          });\n          return memoState;\n        });\n      });\n    }\n\n    queue.current.push(_objectSpread(_objectSpread({}, transform), newTransform));\n  };\n  /** Scale according to the position of clientX and clientY */\n\n\n  var dispatchZoomChange = function dispatchZoomChange(ratio, action, clientX, clientY) {\n    var _imgRef$current = imgRef.current,\n        width = _imgRef$current.width,\n        height = _imgRef$current.height,\n        offsetWidth = _imgRef$current.offsetWidth,\n        offsetHeight = _imgRef$current.offsetHeight,\n        offsetLeft = _imgRef$current.offsetLeft,\n        offsetTop = _imgRef$current.offsetTop;\n    var newRatio = ratio;\n    var newScale = transform.scale * ratio;\n\n    if (newScale > maxScale) {\n      newRatio = maxScale / transform.scale;\n      newScale = maxScale;\n    } else if (newScale < minScale) {\n      newRatio = minScale / transform.scale;\n      newScale = minScale;\n    }\n    /** Default center point scaling */\n\n\n    var mergedClientX = clientX !== null && clientX !== void 0 ? clientX : innerWidth / 2;\n    var mergedClientY = clientY !== null && clientY !== void 0 ? clientY : innerHeight / 2;\n    var diffRatio = newRatio - 1;\n    /** Deviation calculated from image size */\n\n    var diffImgX = diffRatio * width * 0.5;\n    var diffImgY = diffRatio * height * 0.5;\n    /** The difference between the click position and the edge of the document */\n\n    var diffOffsetLeft = diffRatio * (mergedClientX - transform.x - offsetLeft);\n    var diffOffsetTop = diffRatio * (mergedClientY - transform.y - offsetTop);\n    /** Final positioning */\n\n    var newX = transform.x - (diffOffsetLeft - diffImgX);\n    var newY = transform.y - (diffOffsetTop - diffImgY);\n    /**\n     * When zooming the image\n     * When the image size is smaller than the width and height of the window, the position is initialized\n     */\n\n    if (ratio < 1 && newScale === 1) {\n      var mergedWidth = offsetWidth * newScale;\n      var mergedHeight = offsetHeight * newScale;\n\n      var _getClientSize = getClientSize(),\n          clientWidth = _getClientSize.width,\n          clientHeight = _getClientSize.height;\n\n      if (mergedWidth <= clientWidth && mergedHeight <= clientHeight) {\n        newX = 0;\n        newY = 0;\n      }\n    }\n\n    updateTransform({\n      x: newX,\n      y: newY,\n      scale: newScale\n    }, action);\n  };\n\n  return {\n    transform: transform,\n    resetTransform: resetTransform,\n    updateTransform: updateTransform,\n    dispatchZoomChange: dispatchZoomChange\n  };\n}","map":{"version":3,"sources":["/Users/ravisrivastava/Downloads/newbcom/node_modules/rc-image/es/hooks/useImageTransform.js"],"names":["_objectSpread","_slicedToArray","getClientSize","isEqual","raf","useRef","useState","initialTransform","x","y","rotate","scale","flipX","flipY","useImageTransform","imgRef","minScale","maxScale","onTransform","frame","queue","_useState","_useState2","transform","setTransform","resetTransform","action","updateTransform","newTransform","current","preState","memoState","forEach","queueState","push","dispatchZoomChange","ratio","clientX","clientY","_imgRef$current","width","height","offsetWidth","offsetHeight","offsetLeft","offsetTop","newRatio","newScale","mergedClientX","innerWidth","mergedClientY","innerHeight","diffRatio","diffImgX","diffImgY","diffOffsetLeft","diffOffsetTop","newX","newY","mergedWidth","mergedHeight","_getClientSize","clientWidth","clientHeight"],"mappings":"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","sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { getClientSize } from \"rc-util/es/Dom/css\";\nimport isEqual from \"rc-util/es/isEqual\";\nimport raf from \"rc-util/es/raf\";\nimport { useRef, useState } from 'react';\nvar initialTransform = {\n  x: 0,\n  y: 0,\n  rotate: 0,\n  scale: 1,\n  flipX: false,\n  flipY: false\n};\nexport default function useImageTransform(imgRef, minScale, maxScale, onTransform) {\n  var frame = useRef(null);\n  var queue = useRef([]);\n  var _useState = useState(initialTransform),\n    _useState2 = _slicedToArray(_useState, 2),\n    transform = _useState2[0],\n    setTransform = _useState2[1];\n  var resetTransform = function resetTransform(action) {\n    setTransform(initialTransform);\n    if (onTransform && !isEqual(initialTransform, transform)) {\n      onTransform({\n        transform: initialTransform,\n        action: action\n      });\n    }\n  };\n\n  /** Direct update transform */\n  var updateTransform = function updateTransform(newTransform, action) {\n    if (frame.current === null) {\n      queue.current = [];\n      frame.current = raf(function () {\n        setTransform(function (preState) {\n          var memoState = preState;\n          queue.current.forEach(function (queueState) {\n            memoState = _objectSpread(_objectSpread({}, memoState), queueState);\n          });\n          frame.current = null;\n          onTransform === null || onTransform === void 0 ? void 0 : onTransform({\n            transform: memoState,\n            action: action\n          });\n          return memoState;\n        });\n      });\n    }\n    queue.current.push(_objectSpread(_objectSpread({}, transform), newTransform));\n  };\n\n  /** Scale according to the position of clientX and clientY */\n  var dispatchZoomChange = function dispatchZoomChange(ratio, action, clientX, clientY) {\n    var _imgRef$current = imgRef.current,\n      width = _imgRef$current.width,\n      height = _imgRef$current.height,\n      offsetWidth = _imgRef$current.offsetWidth,\n      offsetHeight = _imgRef$current.offsetHeight,\n      offsetLeft = _imgRef$current.offsetLeft,\n      offsetTop = _imgRef$current.offsetTop;\n    var newRatio = ratio;\n    var newScale = transform.scale * ratio;\n    if (newScale > maxScale) {\n      newRatio = maxScale / transform.scale;\n      newScale = maxScale;\n    } else if (newScale < minScale) {\n      newRatio = minScale / transform.scale;\n      newScale = minScale;\n    }\n\n    /** Default center point scaling */\n    var mergedClientX = clientX !== null && clientX !== void 0 ? clientX : innerWidth / 2;\n    var mergedClientY = clientY !== null && clientY !== void 0 ? clientY : innerHeight / 2;\n    var diffRatio = newRatio - 1;\n    /** Deviation calculated from image size */\n    var diffImgX = diffRatio * width * 0.5;\n    var diffImgY = diffRatio * height * 0.5;\n    /** The difference between the click position and the edge of the document */\n    var diffOffsetLeft = diffRatio * (mergedClientX - transform.x - offsetLeft);\n    var diffOffsetTop = diffRatio * (mergedClientY - transform.y - offsetTop);\n    /** Final positioning */\n    var newX = transform.x - (diffOffsetLeft - diffImgX);\n    var newY = transform.y - (diffOffsetTop - diffImgY);\n\n    /**\n     * When zooming the image\n     * When the image size is smaller than the width and height of the window, the position is initialized\n     */\n    if (ratio < 1 && newScale === 1) {\n      var mergedWidth = offsetWidth * newScale;\n      var mergedHeight = offsetHeight * newScale;\n      var _getClientSize = getClientSize(),\n        clientWidth = _getClientSize.width,\n        clientHeight = _getClientSize.height;\n      if (mergedWidth <= clientWidth && mergedHeight <= clientHeight) {\n        newX = 0;\n        newY = 0;\n      }\n    }\n    updateTransform({\n      x: newX,\n      y: newY,\n      scale: newScale\n    }, action);\n  };\n  return {\n    transform: transform,\n    resetTransform: resetTransform,\n    updateTransform: updateTransform,\n    dispatchZoomChange: dispatchZoomChange\n  };\n}"]},"metadata":{},"sourceType":"module"}