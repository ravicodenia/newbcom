{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { useEffect, useRef, useState } from 'react';\nimport raf from \"rc-util/es/raf\";\n\nvar useIndicator = function useIndicator(_ref) {\n  var activeTabOffset = _ref.activeTabOffset,\n      horizontal = _ref.horizontal,\n      rtl = _ref.rtl,\n      indicatorSize = _ref.indicatorSize;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      inkStyle = _useState2[0],\n      setInkStyle = _useState2[1];\n\n  var inkBarRafRef = useRef();\n\n  var getLength = function getLength(origin) {\n    if (typeof indicatorSize === 'function') {\n      return indicatorSize(origin);\n    }\n\n    if (typeof indicatorSize === 'number') {\n      return indicatorSize;\n    }\n\n    return origin;\n  }; // Delay set ink style to avoid remove tab blink\n\n\n  function cleanInkBarRaf() {\n    raf.cancel(inkBarRafRef.current);\n  }\n\n  useEffect(function () {\n    var newInkStyle = {};\n\n    if (activeTabOffset) {\n      if (horizontal) {\n        if (rtl) {\n          newInkStyle.right = activeTabOffset.right + activeTabOffset.width / 2;\n          newInkStyle.transform = 'translateX(50%)';\n        } else {\n          newInkStyle.left = activeTabOffset.left + activeTabOffset.width / 2;\n          newInkStyle.transform = 'translateX(-50%)';\n        }\n\n        newInkStyle.width = getLength(activeTabOffset.width);\n      } else {\n        newInkStyle.top = activeTabOffset.top + activeTabOffset.height / 2;\n        newInkStyle.transform = 'translateY(-50%)';\n        newInkStyle.height = getLength(activeTabOffset.height);\n      }\n    }\n\n    cleanInkBarRaf();\n    inkBarRafRef.current = raf(function () {\n      setInkStyle(newInkStyle);\n    });\n    return cleanInkBarRaf;\n  }, [activeTabOffset, horizontal, rtl, indicatorSize]);\n  return {\n    style: inkStyle\n  };\n};\n\nexport default useIndicator;","map":{"version":3,"sources":["/Users/ravisrivastava/Downloads/newbcom/node_modules/rc-tabs/es/hooks/useIndicator.js"],"names":["_slicedToArray","useEffect","useRef","useState","raf","useIndicator","_ref","activeTabOffset","horizontal","rtl","indicatorSize","_useState","_useState2","inkStyle","setInkStyle","inkBarRafRef","getLength","origin","cleanInkBarRaf","cancel","current","newInkStyle","right","width","transform","left","top","height","style"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,0CAA3B;AACA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,OAAOC,GAAP,MAAgB,gBAAhB;;AACA,IAAIC,YAAY,GAAG,SAASA,YAAT,CAAsBC,IAAtB,EAA4B;AAC7C,MAAIC,eAAe,GAAGD,IAAI,CAACC,eAA3B;AAAA,MACEC,UAAU,GAAGF,IAAI,CAACE,UADpB;AAAA,MAEEC,GAAG,GAAGH,IAAI,CAACG,GAFb;AAAA,MAGEC,aAAa,GAAGJ,IAAI,CAACI,aAHvB;;AAIA,MAAIC,SAAS,GAAGR,QAAQ,EAAxB;AAAA,MACES,UAAU,GAAGZ,cAAc,CAACW,SAAD,EAAY,CAAZ,CAD7B;AAAA,MAEEE,QAAQ,GAAGD,UAAU,CAAC,CAAD,CAFvB;AAAA,MAGEE,WAAW,GAAGF,UAAU,CAAC,CAAD,CAH1B;;AAIA,MAAIG,YAAY,GAAGb,MAAM,EAAzB;;AACA,MAAIc,SAAS,GAAG,SAASA,SAAT,CAAmBC,MAAnB,EAA2B;AACzC,QAAI,OAAOP,aAAP,KAAyB,UAA7B,EAAyC;AACvC,aAAOA,aAAa,CAACO,MAAD,CAApB;AACD;;AACD,QAAI,OAAOP,aAAP,KAAyB,QAA7B,EAAuC;AACrC,aAAOA,aAAP;AACD;;AACD,WAAOO,MAAP;AACD,GARD,CAV6C,CAoB7C;;;AACA,WAASC,cAAT,GAA0B;AACxBd,IAAAA,GAAG,CAACe,MAAJ,CAAWJ,YAAY,CAACK,OAAxB;AACD;;AACDnB,EAAAA,SAAS,CAAC,YAAY;AACpB,QAAIoB,WAAW,GAAG,EAAlB;;AACA,QAAId,eAAJ,EAAqB;AACnB,UAAIC,UAAJ,EAAgB;AACd,YAAIC,GAAJ,EAAS;AACPY,UAAAA,WAAW,CAACC,KAAZ,GAAoBf,eAAe,CAACe,KAAhB,GAAwBf,eAAe,CAACgB,KAAhB,GAAwB,CAApE;AACAF,UAAAA,WAAW,CAACG,SAAZ,GAAwB,iBAAxB;AACD,SAHD,MAGO;AACLH,UAAAA,WAAW,CAACI,IAAZ,GAAmBlB,eAAe,CAACkB,IAAhB,GAAuBlB,eAAe,CAACgB,KAAhB,GAAwB,CAAlE;AACAF,UAAAA,WAAW,CAACG,SAAZ,GAAwB,kBAAxB;AACD;;AACDH,QAAAA,WAAW,CAACE,KAAZ,GAAoBP,SAAS,CAACT,eAAe,CAACgB,KAAjB,CAA7B;AACD,OATD,MASO;AACLF,QAAAA,WAAW,CAACK,GAAZ,GAAkBnB,eAAe,CAACmB,GAAhB,GAAsBnB,eAAe,CAACoB,MAAhB,GAAyB,CAAjE;AACAN,QAAAA,WAAW,CAACG,SAAZ,GAAwB,kBAAxB;AACAH,QAAAA,WAAW,CAACM,MAAZ,GAAqBX,SAAS,CAACT,eAAe,CAACoB,MAAjB,CAA9B;AACD;AACF;;AACDT,IAAAA,cAAc;AACdH,IAAAA,YAAY,CAACK,OAAb,GAAuBhB,GAAG,CAAC,YAAY;AACrCU,MAAAA,WAAW,CAACO,WAAD,CAAX;AACD,KAFyB,CAA1B;AAGA,WAAOH,cAAP;AACD,GAvBQ,EAuBN,CAACX,eAAD,EAAkBC,UAAlB,EAA8BC,GAA9B,EAAmCC,aAAnC,CAvBM,CAAT;AAwBA,SAAO;AACLkB,IAAAA,KAAK,EAAEf;AADF,GAAP;AAGD,CAnDD;;AAoDA,eAAeR,YAAf","sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { useEffect, useRef, useState } from 'react';\nimport raf from \"rc-util/es/raf\";\nvar useIndicator = function useIndicator(_ref) {\n  var activeTabOffset = _ref.activeTabOffset,\n    horizontal = _ref.horizontal,\n    rtl = _ref.rtl,\n    indicatorSize = _ref.indicatorSize;\n  var _useState = useState(),\n    _useState2 = _slicedToArray(_useState, 2),\n    inkStyle = _useState2[0],\n    setInkStyle = _useState2[1];\n  var inkBarRafRef = useRef();\n  var getLength = function getLength(origin) {\n    if (typeof indicatorSize === 'function') {\n      return indicatorSize(origin);\n    }\n    if (typeof indicatorSize === 'number') {\n      return indicatorSize;\n    }\n    return origin;\n  };\n\n  // Delay set ink style to avoid remove tab blink\n  function cleanInkBarRaf() {\n    raf.cancel(inkBarRafRef.current);\n  }\n  useEffect(function () {\n    var newInkStyle = {};\n    if (activeTabOffset) {\n      if (horizontal) {\n        if (rtl) {\n          newInkStyle.right = activeTabOffset.right + activeTabOffset.width / 2;\n          newInkStyle.transform = 'translateX(50%)';\n        } else {\n          newInkStyle.left = activeTabOffset.left + activeTabOffset.width / 2;\n          newInkStyle.transform = 'translateX(-50%)';\n        }\n        newInkStyle.width = getLength(activeTabOffset.width);\n      } else {\n        newInkStyle.top = activeTabOffset.top + activeTabOffset.height / 2;\n        newInkStyle.transform = 'translateY(-50%)';\n        newInkStyle.height = getLength(activeTabOffset.height);\n      }\n    }\n    cleanInkBarRaf();\n    inkBarRafRef.current = raf(function () {\n      setInkStyle(newInkStyle);\n    });\n    return cleanInkBarRaf;\n  }, [activeTabOffset, horizontal, rtl, indicatorSize]);\n  return {\n    style: inkStyle\n  };\n};\nexport default useIndicator;"]},"metadata":{},"sourceType":"module"}