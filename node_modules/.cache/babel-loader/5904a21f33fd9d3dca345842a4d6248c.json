{"ast":null,"code":"\"use client\";\n\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as React from 'react';\nimport { useCallback, useMemo, useState } from 'react';\nimport DownOutlined from \"@ant-design/icons/es/icons/DownOutlined\";\nimport classNames from 'classnames';\nimport { INTERNAL_COL_DEFINE } from 'rc-table';\nimport { arrAdd, arrDel } from \"rc-tree/es/util\";\nimport { conductCheck } from \"rc-tree/es/utils/conductUtil\";\nimport { convertDataToEntities } from \"rc-tree/es/utils/treeUtil\";\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport { devUseWarning } from '../../_util/warning';\nimport Checkbox from '../../checkbox';\nimport Dropdown from '../../dropdown';\nimport Radio from '../../radio'; // TODO: warning if use ajax!!!\n\nexport const SELECTION_COLUMN = {};\nexport const SELECTION_ALL = 'SELECT_ALL';\nexport const SELECTION_INVERT = 'SELECT_INVERT';\nexport const SELECTION_NONE = 'SELECT_NONE';\nconst EMPTY_LIST = [];\n\nconst flattenData = (childrenColumnName, data) => {\n  let list = [];\n  (data || []).forEach(record => {\n    list.push(record);\n\n    if (record && typeof record === 'object' && childrenColumnName in record) {\n      list = [].concat(_toConsumableArray(list), _toConsumableArray(flattenData(childrenColumnName, record[childrenColumnName])));\n    }\n  });\n  return list;\n};\n\nconst useSelection = (config, rowSelection) => {\n  const {\n    preserveSelectedRowKeys,\n    selectedRowKeys,\n    defaultSelectedRowKeys,\n    getCheckboxProps,\n    onChange: onSelectionChange,\n    onSelect,\n    onSelectAll,\n    onSelectInvert,\n    onSelectNone,\n    onSelectMultiple,\n    columnWidth: selectionColWidth,\n    type: selectionType,\n    selections,\n    fixed,\n    renderCell: customizeRenderCell,\n    hideSelectAll,\n    checkStrictly = true\n  } = rowSelection || {};\n  const {\n    prefixCls,\n    data,\n    pageData,\n    getRecordByKey,\n    getRowKey,\n    expandType,\n    childrenColumnName,\n    locale: tableLocale,\n    getPopupContainer\n  } = config;\n  const warning = devUseWarning('Table'); // ========================= Keys =========================\n\n  const [mergedSelectedKeys, setMergedSelectedKeys] = useMergedState(selectedRowKeys || defaultSelectedRowKeys || EMPTY_LIST, {\n    value: selectedRowKeys\n  }); // ======================== Caches ========================\n\n  const preserveRecordsRef = React.useRef(new Map());\n  const updatePreserveRecordsCache = useCallback(keys => {\n    if (preserveSelectedRowKeys) {\n      const newCache = new Map(); // Keep key if mark as preserveSelectedRowKeys\n\n      keys.forEach(key => {\n        let record = getRecordByKey(key);\n\n        if (!record && preserveRecordsRef.current.has(key)) {\n          record = preserveRecordsRef.current.get(key);\n        }\n\n        newCache.set(key, record);\n      }); // Refresh to new cache\n\n      preserveRecordsRef.current = newCache;\n    }\n  }, [getRecordByKey, preserveSelectedRowKeys]); // Update cache with selectedKeys\n\n  React.useEffect(() => {\n    updatePreserveRecordsCache(mergedSelectedKeys);\n  }, [mergedSelectedKeys]);\n  const {\n    keyEntities\n  } = useMemo(() => {\n    if (checkStrictly) {\n      return {\n        keyEntities: null\n      };\n    }\n\n    let convertData = data;\n\n    if (preserveSelectedRowKeys) {\n      const keysSet = new Set(data.map((record, index) => getRowKey(record, index))); // remove preserveRecords that duplicate data\n\n      const preserveRecords = Array.from(preserveRecordsRef.current).reduce((total, _ref) => {\n        let [key, value] = _ref;\n        return keysSet.has(key) ? total : total.concat(value);\n      }, []);\n      convertData = [].concat(_toConsumableArray(convertData), _toConsumableArray(preserveRecords));\n    }\n\n    return convertDataToEntities(convertData, {\n      externalGetKey: getRowKey,\n      childrenPropName: childrenColumnName\n    });\n  }, [data, getRowKey, checkStrictly, childrenColumnName, preserveSelectedRowKeys]); // Get flatten data\n\n  const flattedData = useMemo(() => flattenData(childrenColumnName, pageData), [childrenColumnName, pageData]); // Get all checkbox props\n\n  const checkboxPropsMap = useMemo(() => {\n    const map = new Map();\n    flattedData.forEach((record, index) => {\n      const key = getRowKey(record, index);\n      const checkboxProps = (getCheckboxProps ? getCheckboxProps(record) : null) || {};\n      map.set(key, checkboxProps);\n      process.env.NODE_ENV !== \"production\" ? warning(!('checked' in checkboxProps || 'defaultChecked' in checkboxProps), 'usage', 'Do not set `checked` or `defaultChecked` in `getCheckboxProps`. Please use `selectedRowKeys` instead.') : void 0;\n    });\n    return map;\n  }, [flattedData, getRowKey, getCheckboxProps]);\n  const isCheckboxDisabled = useCallback(r => {\n    var _a;\n\n    return !!((_a = checkboxPropsMap.get(getRowKey(r))) === null || _a === void 0 ? void 0 : _a.disabled);\n  }, [checkboxPropsMap, getRowKey]);\n  const [derivedSelectedKeys, derivedHalfSelectedKeys] = useMemo(() => {\n    if (checkStrictly) {\n      return [mergedSelectedKeys || [], []];\n    }\n\n    const {\n      checkedKeys,\n      halfCheckedKeys\n    } = conductCheck(mergedSelectedKeys, true, keyEntities, isCheckboxDisabled);\n    return [checkedKeys || [], halfCheckedKeys];\n  }, [mergedSelectedKeys, checkStrictly, keyEntities, isCheckboxDisabled]);\n  const derivedSelectedKeySet = useMemo(() => {\n    const keys = selectionType === 'radio' ? derivedSelectedKeys.slice(0, 1) : derivedSelectedKeys;\n    return new Set(keys);\n  }, [derivedSelectedKeys, selectionType]);\n  const derivedHalfSelectedKeySet = useMemo(() => selectionType === 'radio' ? new Set() : new Set(derivedHalfSelectedKeys), [derivedHalfSelectedKeys, selectionType]); // Save last selected key to enable range selection\n\n  const [lastSelectedKey, setLastSelectedKey] = useState(null); // Reset if rowSelection reset\n\n  React.useEffect(() => {\n    if (!rowSelection) {\n      setMergedSelectedKeys(EMPTY_LIST);\n    }\n  }, [!!rowSelection]);\n  const setSelectedKeys = useCallback((keys, method) => {\n    let availableKeys;\n    let records;\n    updatePreserveRecordsCache(keys);\n\n    if (preserveSelectedRowKeys) {\n      availableKeys = keys;\n      records = keys.map(key => preserveRecordsRef.current.get(key));\n    } else {\n      // Filter key which not exist in the `dataSource`\n      availableKeys = [];\n      records = [];\n      keys.forEach(key => {\n        const record = getRecordByKey(key);\n\n        if (record !== undefined) {\n          availableKeys.push(key);\n          records.push(record);\n        }\n      });\n    }\n\n    setMergedSelectedKeys(availableKeys);\n    onSelectionChange === null || onSelectionChange === void 0 ? void 0 : onSelectionChange(availableKeys, records, {\n      type: method\n    });\n  }, [setMergedSelectedKeys, getRecordByKey, onSelectionChange, preserveSelectedRowKeys]); // ====================== Selections ======================\n  // Trigger single `onSelect` event\n\n  const triggerSingleSelection = useCallback((key, selected, keys, event) => {\n    if (onSelect) {\n      const rows = keys.map(k => getRecordByKey(k));\n      onSelect(getRecordByKey(key), selected, rows, event);\n    }\n\n    setSelectedKeys(keys, 'single');\n  }, [onSelect, getRecordByKey, setSelectedKeys]);\n  const mergedSelections = useMemo(() => {\n    if (!selections || hideSelectAll) {\n      return null;\n    }\n\n    const selectionList = selections === true ? [SELECTION_ALL, SELECTION_INVERT, SELECTION_NONE] : selections;\n    return selectionList.map(selection => {\n      if (selection === SELECTION_ALL) {\n        return {\n          key: 'all',\n          text: tableLocale.selectionAll,\n\n          onSelect() {\n            setSelectedKeys(data.map((record, index) => getRowKey(record, index)).filter(key => {\n              const checkProps = checkboxPropsMap.get(key);\n              return !(checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled) || derivedSelectedKeySet.has(key);\n            }), 'all');\n          }\n\n        };\n      }\n\n      if (selection === SELECTION_INVERT) {\n        return {\n          key: 'invert',\n          text: tableLocale.selectInvert,\n\n          onSelect() {\n            const keySet = new Set(derivedSelectedKeySet);\n            pageData.forEach((record, index) => {\n              const key = getRowKey(record, index);\n              const checkProps = checkboxPropsMap.get(key);\n\n              if (!(checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled)) {\n                if (keySet.has(key)) {\n                  keySet.delete(key);\n                } else {\n                  keySet.add(key);\n                }\n              }\n            });\n            const keys = Array.from(keySet);\n\n            if (onSelectInvert) {\n              warning.deprecated(false, 'onSelectInvert', 'onChange');\n              onSelectInvert(keys);\n            }\n\n            setSelectedKeys(keys, 'invert');\n          }\n\n        };\n      }\n\n      if (selection === SELECTION_NONE) {\n        return {\n          key: 'none',\n          text: tableLocale.selectNone,\n\n          onSelect() {\n            onSelectNone === null || onSelectNone === void 0 ? void 0 : onSelectNone();\n            setSelectedKeys(Array.from(derivedSelectedKeySet).filter(key => {\n              const checkProps = checkboxPropsMap.get(key);\n              return checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled;\n            }), 'none');\n          }\n\n        };\n      }\n\n      return selection;\n    }).map(selection => Object.assign(Object.assign({}, selection), {\n      onSelect: function () {\n        var _a2;\n\n        var _a;\n\n        for (var _len = arguments.length, rest = new Array(_len), _key = 0; _key < _len; _key++) {\n          rest[_key] = arguments[_key];\n        }\n\n        (_a = selection.onSelect) === null || _a === void 0 ? void 0 : (_a2 = _a).call.apply(_a2, [selection].concat(rest));\n        setLastSelectedKey(null);\n      }\n    }));\n  }, [selections, derivedSelectedKeySet, pageData, getRowKey, onSelectInvert, setSelectedKeys]); // ======================= Columns ========================\n\n  const transformColumns = useCallback(columns => {\n    var _a; // >>>>>>>>>>> Skip if not exists `rowSelection`\n\n\n    if (!rowSelection) {\n      process.env.NODE_ENV !== \"production\" ? warning(!columns.includes(SELECTION_COLUMN), 'usage', '`rowSelection` is not config but `SELECTION_COLUMN` exists in the `columns`.') : void 0;\n      return columns.filter(col => col !== SELECTION_COLUMN);\n    } // >>>>>>>>>>> Support selection\n\n\n    let cloneColumns = _toConsumableArray(columns);\n\n    const keySet = new Set(derivedSelectedKeySet); // Record key only need check with enabled\n\n    const recordKeys = flattedData.map(getRowKey).filter(key => !checkboxPropsMap.get(key).disabled);\n    const checkedCurrentAll = recordKeys.every(key => keySet.has(key));\n    const checkedCurrentSome = recordKeys.some(key => keySet.has(key));\n\n    const onSelectAllChange = () => {\n      const changeKeys = [];\n\n      if (checkedCurrentAll) {\n        recordKeys.forEach(key => {\n          keySet.delete(key);\n          changeKeys.push(key);\n        });\n      } else {\n        recordKeys.forEach(key => {\n          if (!keySet.has(key)) {\n            keySet.add(key);\n            changeKeys.push(key);\n          }\n        });\n      }\n\n      const keys = Array.from(keySet);\n      onSelectAll === null || onSelectAll === void 0 ? void 0 : onSelectAll(!checkedCurrentAll, keys.map(k => getRecordByKey(k)), changeKeys.map(k => getRecordByKey(k)));\n      setSelectedKeys(keys, 'all');\n      setLastSelectedKey(null);\n    }; // ===================== Render =====================\n    // Title Cell\n\n\n    let title;\n\n    if (selectionType !== 'radio') {\n      let customizeSelections;\n\n      if (mergedSelections) {\n        const menu = {\n          getPopupContainer,\n          items: mergedSelections.map((selection, index) => {\n            const {\n              key,\n              text,\n              onSelect: onSelectionClick\n            } = selection;\n            return {\n              key: key !== null && key !== void 0 ? key : index,\n              onClick: () => {\n                onSelectionClick === null || onSelectionClick === void 0 ? void 0 : onSelectionClick(recordKeys);\n              },\n              label: text\n            };\n          })\n        };\n        customizeSelections = /*#__PURE__*/React.createElement(\"div\", {\n          className: `${prefixCls}-selection-extra`\n        }, /*#__PURE__*/React.createElement(Dropdown, {\n          menu: menu,\n          getPopupContainer: getPopupContainer\n        }, /*#__PURE__*/React.createElement(\"span\", null, /*#__PURE__*/React.createElement(DownOutlined, null))));\n      }\n\n      const allDisabledData = flattedData.map((record, index) => {\n        const key = getRowKey(record, index);\n        const checkboxProps = checkboxPropsMap.get(key) || {};\n        return Object.assign({\n          checked: keySet.has(key)\n        }, checkboxProps);\n      }).filter(_ref2 => {\n        let {\n          disabled\n        } = _ref2;\n        return disabled;\n      });\n      const allDisabled = !!allDisabledData.length && allDisabledData.length === flattedData.length;\n      const allDisabledAndChecked = allDisabled && allDisabledData.every(_ref3 => {\n        let {\n          checked\n        } = _ref3;\n        return checked;\n      });\n      const allDisabledSomeChecked = allDisabled && allDisabledData.some(_ref4 => {\n        let {\n          checked\n        } = _ref4;\n        return checked;\n      });\n      title = !hideSelectAll && /*#__PURE__*/React.createElement(\"div\", {\n        className: `${prefixCls}-selection`\n      }, /*#__PURE__*/React.createElement(Checkbox, {\n        checked: !allDisabled ? !!flattedData.length && checkedCurrentAll : allDisabledAndChecked,\n        indeterminate: !allDisabled ? !checkedCurrentAll && checkedCurrentSome : !allDisabledAndChecked && allDisabledSomeChecked,\n        onChange: onSelectAllChange,\n        disabled: flattedData.length === 0 || allDisabled,\n        \"aria-label\": customizeSelections ? 'Custom selection' : 'Select all',\n        skipGroup: true\n      }), customizeSelections);\n    } // Body Cell\n\n\n    let renderCell;\n\n    if (selectionType === 'radio') {\n      renderCell = (_, record, index) => {\n        const key = getRowKey(record, index);\n        const checked = keySet.has(key);\n        return {\n          node: /*#__PURE__*/React.createElement(Radio, Object.assign({}, checkboxPropsMap.get(key), {\n            checked: checked,\n            onClick: e => e.stopPropagation(),\n            onChange: event => {\n              if (!keySet.has(key)) {\n                triggerSingleSelection(key, true, [key], event.nativeEvent);\n              }\n            }\n          })),\n          checked\n        };\n      };\n    } else {\n      renderCell = (_, record, index) => {\n        var _a;\n\n        const key = getRowKey(record, index);\n        const checked = keySet.has(key);\n        const indeterminate = derivedHalfSelectedKeySet.has(key);\n        const checkboxProps = checkboxPropsMap.get(key);\n        let mergedIndeterminate;\n\n        if (expandType === 'nest') {\n          mergedIndeterminate = indeterminate;\n          process.env.NODE_ENV !== \"production\" ? warning(typeof (checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.indeterminate) !== 'boolean', 'usage', 'set `indeterminate` using `rowSelection.getCheckboxProps` is not allowed with tree structured dataSource.') : void 0;\n        } else {\n          mergedIndeterminate = (_a = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.indeterminate) !== null && _a !== void 0 ? _a : indeterminate;\n        } // Record checked\n\n\n        return {\n          node: /*#__PURE__*/React.createElement(Checkbox, Object.assign({}, checkboxProps, {\n            indeterminate: mergedIndeterminate,\n            checked: checked,\n            skipGroup: true,\n            onClick: e => e.stopPropagation(),\n            onChange: _ref5 => {\n              let {\n                nativeEvent\n              } = _ref5;\n              const {\n                shiftKey\n              } = nativeEvent;\n              let startIndex = -1;\n              let endIndex = -1; // Get range of this\n\n              if (shiftKey && checkStrictly) {\n                const pointKeys = new Set([lastSelectedKey, key]);\n                recordKeys.some((recordKey, recordIndex) => {\n                  if (pointKeys.has(recordKey)) {\n                    if (startIndex === -1) {\n                      startIndex = recordIndex;\n                    } else {\n                      endIndex = recordIndex;\n                      return true;\n                    }\n                  }\n\n                  return false;\n                });\n              }\n\n              if (endIndex !== -1 && startIndex !== endIndex && checkStrictly) {\n                // Batch update selections\n                const rangeKeys = recordKeys.slice(startIndex, endIndex + 1);\n                const changedKeys = [];\n\n                if (checked) {\n                  rangeKeys.forEach(recordKey => {\n                    if (keySet.has(recordKey)) {\n                      changedKeys.push(recordKey);\n                      keySet.delete(recordKey);\n                    }\n                  });\n                } else {\n                  rangeKeys.forEach(recordKey => {\n                    if (!keySet.has(recordKey)) {\n                      changedKeys.push(recordKey);\n                      keySet.add(recordKey);\n                    }\n                  });\n                }\n\n                const keys = Array.from(keySet);\n                onSelectMultiple === null || onSelectMultiple === void 0 ? void 0 : onSelectMultiple(!checked, keys.map(recordKey => getRecordByKey(recordKey)), changedKeys.map(recordKey => getRecordByKey(recordKey)));\n                setSelectedKeys(keys, 'multiple');\n              } else {\n                // Single record selected\n                const originCheckedKeys = derivedSelectedKeys;\n\n                if (checkStrictly) {\n                  const checkedKeys = checked ? arrDel(originCheckedKeys, key) : arrAdd(originCheckedKeys, key);\n                  triggerSingleSelection(key, !checked, checkedKeys, nativeEvent);\n                } else {\n                  // Always fill first\n                  const result = conductCheck([].concat(_toConsumableArray(originCheckedKeys), [key]), true, keyEntities, isCheckboxDisabled);\n                  const {\n                    checkedKeys,\n                    halfCheckedKeys\n                  } = result;\n                  let nextCheckedKeys = checkedKeys; // If remove, we do it again to correction\n\n                  if (checked) {\n                    const tempKeySet = new Set(checkedKeys);\n                    tempKeySet.delete(key);\n                    nextCheckedKeys = conductCheck(Array.from(tempKeySet), {\n                      checked: false,\n                      halfCheckedKeys\n                    }, keyEntities, isCheckboxDisabled).checkedKeys;\n                  }\n\n                  triggerSingleSelection(key, !checked, nextCheckedKeys, nativeEvent);\n                }\n              }\n\n              if (checked) {\n                setLastSelectedKey(null);\n              } else {\n                setLastSelectedKey(key);\n              }\n            }\n          })),\n          checked\n        };\n      };\n    }\n\n    const renderSelectionCell = (_, record, index) => {\n      const {\n        node,\n        checked\n      } = renderCell(_, record, index);\n\n      if (customizeRenderCell) {\n        return customizeRenderCell(checked, record, index, node);\n      }\n\n      return node;\n    }; // Insert selection column if not exist\n\n\n    if (!cloneColumns.includes(SELECTION_COLUMN)) {\n      // Always after expand icon\n      if (cloneColumns.findIndex(col => {\n        var _a;\n\n        return ((_a = col[INTERNAL_COL_DEFINE]) === null || _a === void 0 ? void 0 : _a.columnType) === 'EXPAND_COLUMN';\n      }) === 0) {\n        const [expandColumn, ...restColumns] = cloneColumns;\n        cloneColumns = [expandColumn, SELECTION_COLUMN].concat(_toConsumableArray(restColumns));\n      } else {\n        // Normal insert at first column\n        cloneColumns = [SELECTION_COLUMN].concat(_toConsumableArray(cloneColumns));\n      }\n    } // Deduplicate selection column\n\n\n    const selectionColumnIndex = cloneColumns.indexOf(SELECTION_COLUMN);\n    process.env.NODE_ENV !== \"production\" ? warning(cloneColumns.filter(col => col === SELECTION_COLUMN).length <= 1, 'usage', 'Multiple `SELECTION_COLUMN` exist in `columns`.') : void 0;\n    cloneColumns = cloneColumns.filter((column, index) => column !== SELECTION_COLUMN || index === selectionColumnIndex); // Fixed column logic\n\n    const prevCol = cloneColumns[selectionColumnIndex - 1];\n    const nextCol = cloneColumns[selectionColumnIndex + 1];\n    let mergedFixed = fixed;\n\n    if (mergedFixed === undefined) {\n      if ((nextCol === null || nextCol === void 0 ? void 0 : nextCol.fixed) !== undefined) {\n        mergedFixed = nextCol.fixed;\n      } else if ((prevCol === null || prevCol === void 0 ? void 0 : prevCol.fixed) !== undefined) {\n        mergedFixed = prevCol.fixed;\n      }\n    }\n\n    if (mergedFixed && prevCol && ((_a = prevCol[INTERNAL_COL_DEFINE]) === null || _a === void 0 ? void 0 : _a.columnType) === 'EXPAND_COLUMN' && prevCol.fixed === undefined) {\n      prevCol.fixed = mergedFixed;\n    }\n\n    const columnCls = classNames(`${prefixCls}-selection-col`, {\n      [`${prefixCls}-selection-col-with-dropdown`]: selections && selectionType === 'checkbox'\n    }); // Replace with real selection column\n\n    const selectionColumn = {\n      fixed: mergedFixed,\n      width: selectionColWidth,\n      className: `${prefixCls}-selection-column`,\n      title: rowSelection.columnTitle || title,\n      render: renderSelectionCell,\n      onCell: rowSelection.onCell,\n      [INTERNAL_COL_DEFINE]: {\n        className: columnCls\n      }\n    };\n    return cloneColumns.map(col => col === SELECTION_COLUMN ? selectionColumn : col);\n  }, [getRowKey, flattedData, rowSelection, derivedSelectedKeys, derivedSelectedKeySet, derivedHalfSelectedKeySet, selectionColWidth, mergedSelections, expandType, lastSelectedKey, checkboxPropsMap, onSelectMultiple, triggerSingleSelection, isCheckboxDisabled]);\n  return [transformColumns, derivedSelectedKeySet];\n};\n\nexport default useSelection;","map":{"version":3,"sources":["/Users/ravisrivastava/Downloads/newbcom/node_modules/antd/es/table/hooks/useSelection.js"],"names":["_toConsumableArray","React","useCallback","useMemo","useState","DownOutlined","classNames","INTERNAL_COL_DEFINE","arrAdd","arrDel","conductCheck","convertDataToEntities","useMergedState","devUseWarning","Checkbox","Dropdown","Radio","SELECTION_COLUMN","SELECTION_ALL","SELECTION_INVERT","SELECTION_NONE","EMPTY_LIST","flattenData","childrenColumnName","data","list","forEach","record","push","concat","useSelection","config","rowSelection","preserveSelectedRowKeys","selectedRowKeys","defaultSelectedRowKeys","getCheckboxProps","onChange","onSelectionChange","onSelect","onSelectAll","onSelectInvert","onSelectNone","onSelectMultiple","columnWidth","selectionColWidth","type","selectionType","selections","fixed","renderCell","customizeRenderCell","hideSelectAll","checkStrictly","prefixCls","pageData","getRecordByKey","getRowKey","expandType","locale","tableLocale","getPopupContainer","warning","mergedSelectedKeys","setMergedSelectedKeys","value","preserveRecordsRef","useRef","Map","updatePreserveRecordsCache","keys","newCache","key","current","has","get","set","useEffect","keyEntities","convertData","keysSet","Set","map","index","preserveRecords","Array","from","reduce","total","_ref","externalGetKey","childrenPropName","flattedData","checkboxPropsMap","checkboxProps","process","env","NODE_ENV","isCheckboxDisabled","r","_a","disabled","derivedSelectedKeys","derivedHalfSelectedKeys","checkedKeys","halfCheckedKeys","derivedSelectedKeySet","slice","derivedHalfSelectedKeySet","lastSelectedKey","setLastSelectedKey","setSelectedKeys","method","availableKeys","records","undefined","triggerSingleSelection","selected","event","rows","k","mergedSelections","selectionList","selection","text","selectionAll","filter","checkProps","selectInvert","keySet","delete","add","deprecated","selectNone","Object","assign","_a2","_len","arguments","length","rest","_key","call","apply","transformColumns","columns","includes","col","cloneColumns","recordKeys","checkedCurrentAll","every","checkedCurrentSome","some","onSelectAllChange","changeKeys","title","customizeSelections","menu","items","onSelectionClick","onClick","label","createElement","className","allDisabledData","checked","_ref2","allDisabled","allDisabledAndChecked","_ref3","allDisabledSomeChecked","_ref4","indeterminate","skipGroup","_","node","e","stopPropagation","nativeEvent","mergedIndeterminate","_ref5","shiftKey","startIndex","endIndex","pointKeys","recordKey","recordIndex","rangeKeys","changedKeys","originCheckedKeys","result","nextCheckedKeys","tempKeySet","renderSelectionCell","findIndex","columnType","expandColumn","restColumns","selectionColumnIndex","indexOf","column","prevCol","nextCol","mergedFixed","columnCls","selectionColumn","width","columnTitle","render","onCell"],"mappings":"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","sourcesContent":["\"use client\";\n\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as React from 'react';\nimport { useCallback, useMemo, useState } from 'react';\nimport DownOutlined from \"@ant-design/icons/es/icons/DownOutlined\";\nimport classNames from 'classnames';\nimport { INTERNAL_COL_DEFINE } from 'rc-table';\nimport { arrAdd, arrDel } from \"rc-tree/es/util\";\nimport { conductCheck } from \"rc-tree/es/utils/conductUtil\";\nimport { convertDataToEntities } from \"rc-tree/es/utils/treeUtil\";\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport { devUseWarning } from '../../_util/warning';\nimport Checkbox from '../../checkbox';\nimport Dropdown from '../../dropdown';\nimport Radio from '../../radio';\n// TODO: warning if use ajax!!!\nexport const SELECTION_COLUMN = {};\nexport const SELECTION_ALL = 'SELECT_ALL';\nexport const SELECTION_INVERT = 'SELECT_INVERT';\nexport const SELECTION_NONE = 'SELECT_NONE';\nconst EMPTY_LIST = [];\nconst flattenData = (childrenColumnName, data) => {\n  let list = [];\n  (data || []).forEach(record => {\n    list.push(record);\n    if (record && typeof record === 'object' && childrenColumnName in record) {\n      list = [].concat(_toConsumableArray(list), _toConsumableArray(flattenData(childrenColumnName, record[childrenColumnName])));\n    }\n  });\n  return list;\n};\nconst useSelection = (config, rowSelection) => {\n  const {\n    preserveSelectedRowKeys,\n    selectedRowKeys,\n    defaultSelectedRowKeys,\n    getCheckboxProps,\n    onChange: onSelectionChange,\n    onSelect,\n    onSelectAll,\n    onSelectInvert,\n    onSelectNone,\n    onSelectMultiple,\n    columnWidth: selectionColWidth,\n    type: selectionType,\n    selections,\n    fixed,\n    renderCell: customizeRenderCell,\n    hideSelectAll,\n    checkStrictly = true\n  } = rowSelection || {};\n  const {\n    prefixCls,\n    data,\n    pageData,\n    getRecordByKey,\n    getRowKey,\n    expandType,\n    childrenColumnName,\n    locale: tableLocale,\n    getPopupContainer\n  } = config;\n  const warning = devUseWarning('Table');\n  // ========================= Keys =========================\n  const [mergedSelectedKeys, setMergedSelectedKeys] = useMergedState(selectedRowKeys || defaultSelectedRowKeys || EMPTY_LIST, {\n    value: selectedRowKeys\n  });\n  // ======================== Caches ========================\n  const preserveRecordsRef = React.useRef(new Map());\n  const updatePreserveRecordsCache = useCallback(keys => {\n    if (preserveSelectedRowKeys) {\n      const newCache = new Map();\n      // Keep key if mark as preserveSelectedRowKeys\n      keys.forEach(key => {\n        let record = getRecordByKey(key);\n        if (!record && preserveRecordsRef.current.has(key)) {\n          record = preserveRecordsRef.current.get(key);\n        }\n        newCache.set(key, record);\n      });\n      // Refresh to new cache\n      preserveRecordsRef.current = newCache;\n    }\n  }, [getRecordByKey, preserveSelectedRowKeys]);\n  // Update cache with selectedKeys\n  React.useEffect(() => {\n    updatePreserveRecordsCache(mergedSelectedKeys);\n  }, [mergedSelectedKeys]);\n  const {\n    keyEntities\n  } = useMemo(() => {\n    if (checkStrictly) {\n      return {\n        keyEntities: null\n      };\n    }\n    let convertData = data;\n    if (preserveSelectedRowKeys) {\n      const keysSet = new Set(data.map((record, index) => getRowKey(record, index)));\n      // remove preserveRecords that duplicate data\n      const preserveRecords = Array.from(preserveRecordsRef.current).reduce((total, _ref) => {\n        let [key, value] = _ref;\n        return keysSet.has(key) ? total : total.concat(value);\n      }, []);\n      convertData = [].concat(_toConsumableArray(convertData), _toConsumableArray(preserveRecords));\n    }\n    return convertDataToEntities(convertData, {\n      externalGetKey: getRowKey,\n      childrenPropName: childrenColumnName\n    });\n  }, [data, getRowKey, checkStrictly, childrenColumnName, preserveSelectedRowKeys]);\n  // Get flatten data\n  const flattedData = useMemo(() => flattenData(childrenColumnName, pageData), [childrenColumnName, pageData]);\n  // Get all checkbox props\n  const checkboxPropsMap = useMemo(() => {\n    const map = new Map();\n    flattedData.forEach((record, index) => {\n      const key = getRowKey(record, index);\n      const checkboxProps = (getCheckboxProps ? getCheckboxProps(record) : null) || {};\n      map.set(key, checkboxProps);\n      process.env.NODE_ENV !== \"production\" ? warning(!('checked' in checkboxProps || 'defaultChecked' in checkboxProps), 'usage', 'Do not set `checked` or `defaultChecked` in `getCheckboxProps`. Please use `selectedRowKeys` instead.') : void 0;\n    });\n    return map;\n  }, [flattedData, getRowKey, getCheckboxProps]);\n  const isCheckboxDisabled = useCallback(r => {\n    var _a;\n    return !!((_a = checkboxPropsMap.get(getRowKey(r))) === null || _a === void 0 ? void 0 : _a.disabled);\n  }, [checkboxPropsMap, getRowKey]);\n  const [derivedSelectedKeys, derivedHalfSelectedKeys] = useMemo(() => {\n    if (checkStrictly) {\n      return [mergedSelectedKeys || [], []];\n    }\n    const {\n      checkedKeys,\n      halfCheckedKeys\n    } = conductCheck(mergedSelectedKeys, true, keyEntities, isCheckboxDisabled);\n    return [checkedKeys || [], halfCheckedKeys];\n  }, [mergedSelectedKeys, checkStrictly, keyEntities, isCheckboxDisabled]);\n  const derivedSelectedKeySet = useMemo(() => {\n    const keys = selectionType === 'radio' ? derivedSelectedKeys.slice(0, 1) : derivedSelectedKeys;\n    return new Set(keys);\n  }, [derivedSelectedKeys, selectionType]);\n  const derivedHalfSelectedKeySet = useMemo(() => selectionType === 'radio' ? new Set() : new Set(derivedHalfSelectedKeys), [derivedHalfSelectedKeys, selectionType]);\n  // Save last selected key to enable range selection\n  const [lastSelectedKey, setLastSelectedKey] = useState(null);\n  // Reset if rowSelection reset\n  React.useEffect(() => {\n    if (!rowSelection) {\n      setMergedSelectedKeys(EMPTY_LIST);\n    }\n  }, [!!rowSelection]);\n  const setSelectedKeys = useCallback((keys, method) => {\n    let availableKeys;\n    let records;\n    updatePreserveRecordsCache(keys);\n    if (preserveSelectedRowKeys) {\n      availableKeys = keys;\n      records = keys.map(key => preserveRecordsRef.current.get(key));\n    } else {\n      // Filter key which not exist in the `dataSource`\n      availableKeys = [];\n      records = [];\n      keys.forEach(key => {\n        const record = getRecordByKey(key);\n        if (record !== undefined) {\n          availableKeys.push(key);\n          records.push(record);\n        }\n      });\n    }\n    setMergedSelectedKeys(availableKeys);\n    onSelectionChange === null || onSelectionChange === void 0 ? void 0 : onSelectionChange(availableKeys, records, {\n      type: method\n    });\n  }, [setMergedSelectedKeys, getRecordByKey, onSelectionChange, preserveSelectedRowKeys]);\n  // ====================== Selections ======================\n  // Trigger single `onSelect` event\n  const triggerSingleSelection = useCallback((key, selected, keys, event) => {\n    if (onSelect) {\n      const rows = keys.map(k => getRecordByKey(k));\n      onSelect(getRecordByKey(key), selected, rows, event);\n    }\n    setSelectedKeys(keys, 'single');\n  }, [onSelect, getRecordByKey, setSelectedKeys]);\n  const mergedSelections = useMemo(() => {\n    if (!selections || hideSelectAll) {\n      return null;\n    }\n    const selectionList = selections === true ? [SELECTION_ALL, SELECTION_INVERT, SELECTION_NONE] : selections;\n    return selectionList.map(selection => {\n      if (selection === SELECTION_ALL) {\n        return {\n          key: 'all',\n          text: tableLocale.selectionAll,\n          onSelect() {\n            setSelectedKeys(data.map((record, index) => getRowKey(record, index)).filter(key => {\n              const checkProps = checkboxPropsMap.get(key);\n              return !(checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled) || derivedSelectedKeySet.has(key);\n            }), 'all');\n          }\n        };\n      }\n      if (selection === SELECTION_INVERT) {\n        return {\n          key: 'invert',\n          text: tableLocale.selectInvert,\n          onSelect() {\n            const keySet = new Set(derivedSelectedKeySet);\n            pageData.forEach((record, index) => {\n              const key = getRowKey(record, index);\n              const checkProps = checkboxPropsMap.get(key);\n              if (!(checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled)) {\n                if (keySet.has(key)) {\n                  keySet.delete(key);\n                } else {\n                  keySet.add(key);\n                }\n              }\n            });\n            const keys = Array.from(keySet);\n            if (onSelectInvert) {\n              warning.deprecated(false, 'onSelectInvert', 'onChange');\n              onSelectInvert(keys);\n            }\n            setSelectedKeys(keys, 'invert');\n          }\n        };\n      }\n      if (selection === SELECTION_NONE) {\n        return {\n          key: 'none',\n          text: tableLocale.selectNone,\n          onSelect() {\n            onSelectNone === null || onSelectNone === void 0 ? void 0 : onSelectNone();\n            setSelectedKeys(Array.from(derivedSelectedKeySet).filter(key => {\n              const checkProps = checkboxPropsMap.get(key);\n              return checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled;\n            }), 'none');\n          }\n        };\n      }\n      return selection;\n    }).map(selection => Object.assign(Object.assign({}, selection), {\n      onSelect: function () {\n        var _a2;\n        var _a;\n        for (var _len = arguments.length, rest = new Array(_len), _key = 0; _key < _len; _key++) {\n          rest[_key] = arguments[_key];\n        }\n        (_a = selection.onSelect) === null || _a === void 0 ? void 0 : (_a2 = _a).call.apply(_a2, [selection].concat(rest));\n        setLastSelectedKey(null);\n      }\n    }));\n  }, [selections, derivedSelectedKeySet, pageData, getRowKey, onSelectInvert, setSelectedKeys]);\n  // ======================= Columns ========================\n  const transformColumns = useCallback(columns => {\n    var _a;\n    // >>>>>>>>>>> Skip if not exists `rowSelection`\n    if (!rowSelection) {\n      process.env.NODE_ENV !== \"production\" ? warning(!columns.includes(SELECTION_COLUMN), 'usage', '`rowSelection` is not config but `SELECTION_COLUMN` exists in the `columns`.') : void 0;\n      return columns.filter(col => col !== SELECTION_COLUMN);\n    }\n    // >>>>>>>>>>> Support selection\n    let cloneColumns = _toConsumableArray(columns);\n    const keySet = new Set(derivedSelectedKeySet);\n    // Record key only need check with enabled\n    const recordKeys = flattedData.map(getRowKey).filter(key => !checkboxPropsMap.get(key).disabled);\n    const checkedCurrentAll = recordKeys.every(key => keySet.has(key));\n    const checkedCurrentSome = recordKeys.some(key => keySet.has(key));\n    const onSelectAllChange = () => {\n      const changeKeys = [];\n      if (checkedCurrentAll) {\n        recordKeys.forEach(key => {\n          keySet.delete(key);\n          changeKeys.push(key);\n        });\n      } else {\n        recordKeys.forEach(key => {\n          if (!keySet.has(key)) {\n            keySet.add(key);\n            changeKeys.push(key);\n          }\n        });\n      }\n      const keys = Array.from(keySet);\n      onSelectAll === null || onSelectAll === void 0 ? void 0 : onSelectAll(!checkedCurrentAll, keys.map(k => getRecordByKey(k)), changeKeys.map(k => getRecordByKey(k)));\n      setSelectedKeys(keys, 'all');\n      setLastSelectedKey(null);\n    };\n    // ===================== Render =====================\n    // Title Cell\n    let title;\n    if (selectionType !== 'radio') {\n      let customizeSelections;\n      if (mergedSelections) {\n        const menu = {\n          getPopupContainer,\n          items: mergedSelections.map((selection, index) => {\n            const {\n              key,\n              text,\n              onSelect: onSelectionClick\n            } = selection;\n            return {\n              key: key !== null && key !== void 0 ? key : index,\n              onClick: () => {\n                onSelectionClick === null || onSelectionClick === void 0 ? void 0 : onSelectionClick(recordKeys);\n              },\n              label: text\n            };\n          })\n        };\n        customizeSelections = /*#__PURE__*/React.createElement(\"div\", {\n          className: `${prefixCls}-selection-extra`\n        }, /*#__PURE__*/React.createElement(Dropdown, {\n          menu: menu,\n          getPopupContainer: getPopupContainer\n        }, /*#__PURE__*/React.createElement(\"span\", null, /*#__PURE__*/React.createElement(DownOutlined, null))));\n      }\n      const allDisabledData = flattedData.map((record, index) => {\n        const key = getRowKey(record, index);\n        const checkboxProps = checkboxPropsMap.get(key) || {};\n        return Object.assign({\n          checked: keySet.has(key)\n        }, checkboxProps);\n      }).filter(_ref2 => {\n        let {\n          disabled\n        } = _ref2;\n        return disabled;\n      });\n      const allDisabled = !!allDisabledData.length && allDisabledData.length === flattedData.length;\n      const allDisabledAndChecked = allDisabled && allDisabledData.every(_ref3 => {\n        let {\n          checked\n        } = _ref3;\n        return checked;\n      });\n      const allDisabledSomeChecked = allDisabled && allDisabledData.some(_ref4 => {\n        let {\n          checked\n        } = _ref4;\n        return checked;\n      });\n      title = !hideSelectAll && /*#__PURE__*/React.createElement(\"div\", {\n        className: `${prefixCls}-selection`\n      }, /*#__PURE__*/React.createElement(Checkbox, {\n        checked: !allDisabled ? !!flattedData.length && checkedCurrentAll : allDisabledAndChecked,\n        indeterminate: !allDisabled ? !checkedCurrentAll && checkedCurrentSome : !allDisabledAndChecked && allDisabledSomeChecked,\n        onChange: onSelectAllChange,\n        disabled: flattedData.length === 0 || allDisabled,\n        \"aria-label\": customizeSelections ? 'Custom selection' : 'Select all',\n        skipGroup: true\n      }), customizeSelections);\n    }\n    // Body Cell\n    let renderCell;\n    if (selectionType === 'radio') {\n      renderCell = (_, record, index) => {\n        const key = getRowKey(record, index);\n        const checked = keySet.has(key);\n        return {\n          node: /*#__PURE__*/React.createElement(Radio, Object.assign({}, checkboxPropsMap.get(key), {\n            checked: checked,\n            onClick: e => e.stopPropagation(),\n            onChange: event => {\n              if (!keySet.has(key)) {\n                triggerSingleSelection(key, true, [key], event.nativeEvent);\n              }\n            }\n          })),\n          checked\n        };\n      };\n    } else {\n      renderCell = (_, record, index) => {\n        var _a;\n        const key = getRowKey(record, index);\n        const checked = keySet.has(key);\n        const indeterminate = derivedHalfSelectedKeySet.has(key);\n        const checkboxProps = checkboxPropsMap.get(key);\n        let mergedIndeterminate;\n        if (expandType === 'nest') {\n          mergedIndeterminate = indeterminate;\n          process.env.NODE_ENV !== \"production\" ? warning(typeof (checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.indeterminate) !== 'boolean', 'usage', 'set `indeterminate` using `rowSelection.getCheckboxProps` is not allowed with tree structured dataSource.') : void 0;\n        } else {\n          mergedIndeterminate = (_a = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.indeterminate) !== null && _a !== void 0 ? _a : indeterminate;\n        }\n        // Record checked\n        return {\n          node: /*#__PURE__*/React.createElement(Checkbox, Object.assign({}, checkboxProps, {\n            indeterminate: mergedIndeterminate,\n            checked: checked,\n            skipGroup: true,\n            onClick: e => e.stopPropagation(),\n            onChange: _ref5 => {\n              let {\n                nativeEvent\n              } = _ref5;\n              const {\n                shiftKey\n              } = nativeEvent;\n              let startIndex = -1;\n              let endIndex = -1;\n              // Get range of this\n              if (shiftKey && checkStrictly) {\n                const pointKeys = new Set([lastSelectedKey, key]);\n                recordKeys.some((recordKey, recordIndex) => {\n                  if (pointKeys.has(recordKey)) {\n                    if (startIndex === -1) {\n                      startIndex = recordIndex;\n                    } else {\n                      endIndex = recordIndex;\n                      return true;\n                    }\n                  }\n                  return false;\n                });\n              }\n              if (endIndex !== -1 && startIndex !== endIndex && checkStrictly) {\n                // Batch update selections\n                const rangeKeys = recordKeys.slice(startIndex, endIndex + 1);\n                const changedKeys = [];\n                if (checked) {\n                  rangeKeys.forEach(recordKey => {\n                    if (keySet.has(recordKey)) {\n                      changedKeys.push(recordKey);\n                      keySet.delete(recordKey);\n                    }\n                  });\n                } else {\n                  rangeKeys.forEach(recordKey => {\n                    if (!keySet.has(recordKey)) {\n                      changedKeys.push(recordKey);\n                      keySet.add(recordKey);\n                    }\n                  });\n                }\n                const keys = Array.from(keySet);\n                onSelectMultiple === null || onSelectMultiple === void 0 ? void 0 : onSelectMultiple(!checked, keys.map(recordKey => getRecordByKey(recordKey)), changedKeys.map(recordKey => getRecordByKey(recordKey)));\n                setSelectedKeys(keys, 'multiple');\n              } else {\n                // Single record selected\n                const originCheckedKeys = derivedSelectedKeys;\n                if (checkStrictly) {\n                  const checkedKeys = checked ? arrDel(originCheckedKeys, key) : arrAdd(originCheckedKeys, key);\n                  triggerSingleSelection(key, !checked, checkedKeys, nativeEvent);\n                } else {\n                  // Always fill first\n                  const result = conductCheck([].concat(_toConsumableArray(originCheckedKeys), [key]), true, keyEntities, isCheckboxDisabled);\n                  const {\n                    checkedKeys,\n                    halfCheckedKeys\n                  } = result;\n                  let nextCheckedKeys = checkedKeys;\n                  // If remove, we do it again to correction\n                  if (checked) {\n                    const tempKeySet = new Set(checkedKeys);\n                    tempKeySet.delete(key);\n                    nextCheckedKeys = conductCheck(Array.from(tempKeySet), {\n                      checked: false,\n                      halfCheckedKeys\n                    }, keyEntities, isCheckboxDisabled).checkedKeys;\n                  }\n                  triggerSingleSelection(key, !checked, nextCheckedKeys, nativeEvent);\n                }\n              }\n              if (checked) {\n                setLastSelectedKey(null);\n              } else {\n                setLastSelectedKey(key);\n              }\n            }\n          })),\n          checked\n        };\n      };\n    }\n    const renderSelectionCell = (_, record, index) => {\n      const {\n        node,\n        checked\n      } = renderCell(_, record, index);\n      if (customizeRenderCell) {\n        return customizeRenderCell(checked, record, index, node);\n      }\n      return node;\n    };\n    // Insert selection column if not exist\n    if (!cloneColumns.includes(SELECTION_COLUMN)) {\n      // Always after expand icon\n      if (cloneColumns.findIndex(col => {\n        var _a;\n        return ((_a = col[INTERNAL_COL_DEFINE]) === null || _a === void 0 ? void 0 : _a.columnType) === 'EXPAND_COLUMN';\n      }) === 0) {\n        const [expandColumn, ...restColumns] = cloneColumns;\n        cloneColumns = [expandColumn, SELECTION_COLUMN].concat(_toConsumableArray(restColumns));\n      } else {\n        // Normal insert at first column\n        cloneColumns = [SELECTION_COLUMN].concat(_toConsumableArray(cloneColumns));\n      }\n    }\n    // Deduplicate selection column\n    const selectionColumnIndex = cloneColumns.indexOf(SELECTION_COLUMN);\n    process.env.NODE_ENV !== \"production\" ? warning(cloneColumns.filter(col => col === SELECTION_COLUMN).length <= 1, 'usage', 'Multiple `SELECTION_COLUMN` exist in `columns`.') : void 0;\n    cloneColumns = cloneColumns.filter((column, index) => column !== SELECTION_COLUMN || index === selectionColumnIndex);\n    // Fixed column logic\n    const prevCol = cloneColumns[selectionColumnIndex - 1];\n    const nextCol = cloneColumns[selectionColumnIndex + 1];\n    let mergedFixed = fixed;\n    if (mergedFixed === undefined) {\n      if ((nextCol === null || nextCol === void 0 ? void 0 : nextCol.fixed) !== undefined) {\n        mergedFixed = nextCol.fixed;\n      } else if ((prevCol === null || prevCol === void 0 ? void 0 : prevCol.fixed) !== undefined) {\n        mergedFixed = prevCol.fixed;\n      }\n    }\n    if (mergedFixed && prevCol && ((_a = prevCol[INTERNAL_COL_DEFINE]) === null || _a === void 0 ? void 0 : _a.columnType) === 'EXPAND_COLUMN' && prevCol.fixed === undefined) {\n      prevCol.fixed = mergedFixed;\n    }\n    const columnCls = classNames(`${prefixCls}-selection-col`, {\n      [`${prefixCls}-selection-col-with-dropdown`]: selections && selectionType === 'checkbox'\n    });\n    // Replace with real selection column\n    const selectionColumn = {\n      fixed: mergedFixed,\n      width: selectionColWidth,\n      className: `${prefixCls}-selection-column`,\n      title: rowSelection.columnTitle || title,\n      render: renderSelectionCell,\n      onCell: rowSelection.onCell,\n      [INTERNAL_COL_DEFINE]: {\n        className: columnCls\n      }\n    };\n    return cloneColumns.map(col => col === SELECTION_COLUMN ? selectionColumn : col);\n  }, [getRowKey, flattedData, rowSelection, derivedSelectedKeys, derivedSelectedKeySet, derivedHalfSelectedKeySet, selectionColWidth, mergedSelections, expandType, lastSelectedKey, checkboxPropsMap, onSelectMultiple, triggerSingleSelection, isCheckboxDisabled]);\n  return [transformColumns, derivedSelectedKeySet];\n};\nexport default useSelection;"]},"metadata":{},"sourceType":"module"}