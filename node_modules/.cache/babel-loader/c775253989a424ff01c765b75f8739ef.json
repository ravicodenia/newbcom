{"ast":null,"code":"\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { ConfigContext } from '../config-provider';\nimport SkeletonAvatar from './Avatar';\nimport SkeletonButton from './Button';\nimport Element from './Element';\nimport SkeletonImage from './Image';\nimport SkeletonInput from './Input';\nimport SkeletonNode from './Node';\nimport Paragraph from './Paragraph';\nimport Title from './Title';\nimport useStyle from './style';\n\nfunction getComponentProps(prop) {\n  if (prop && typeof prop === 'object') {\n    return prop;\n  }\n\n  return {};\n}\n\nfunction getAvatarBasicProps(hasTitle, hasParagraph) {\n  if (hasTitle && !hasParagraph) {\n    // Square avatar\n    return {\n      size: 'large',\n      shape: 'square'\n    };\n  }\n\n  return {\n    size: 'large',\n    shape: 'circle'\n  };\n}\n\nfunction getTitleBasicProps(hasAvatar, hasParagraph) {\n  if (!hasAvatar && hasParagraph) {\n    return {\n      width: '38%'\n    };\n  }\n\n  if (hasAvatar && hasParagraph) {\n    return {\n      width: '50%'\n    };\n  }\n\n  return {};\n}\n\nfunction getParagraphBasicProps(hasAvatar, hasTitle) {\n  const basicProps = {}; // Width\n\n  if (!hasAvatar || !hasTitle) {\n    basicProps.width = '61%';\n  } // Rows\n\n\n  if (!hasAvatar && hasTitle) {\n    basicProps.rows = 3;\n  } else {\n    basicProps.rows = 2;\n  }\n\n  return basicProps;\n}\n\nconst Skeleton = props => {\n  const {\n    prefixCls: customizePrefixCls,\n    loading,\n    className,\n    rootClassName,\n    style,\n    children,\n    avatar = false,\n    title = true,\n    paragraph = true,\n    active,\n    round\n  } = props;\n  const {\n    getPrefixCls,\n    direction,\n    skeleton\n  } = React.useContext(ConfigContext);\n  const prefixCls = getPrefixCls('skeleton', customizePrefixCls);\n  const [wrapSSR, hashId] = useStyle(prefixCls);\n\n  if (loading || !('loading' in props)) {\n    const hasAvatar = !!avatar;\n    const hasTitle = !!title;\n    const hasParagraph = !!paragraph; // Avatar\n\n    let avatarNode;\n\n    if (hasAvatar) {\n      const avatarProps = Object.assign(Object.assign({\n        prefixCls: `${prefixCls}-avatar`\n      }, getAvatarBasicProps(hasTitle, hasParagraph)), getComponentProps(avatar)); // We direct use SkeletonElement as avatar in skeleton internal.\n\n      avatarNode = /*#__PURE__*/React.createElement(\"div\", {\n        className: `${prefixCls}-header`\n      }, /*#__PURE__*/React.createElement(Element, Object.assign({}, avatarProps)));\n    }\n\n    let contentNode;\n\n    if (hasTitle || hasParagraph) {\n      // Title\n      let $title;\n\n      if (hasTitle) {\n        const titleProps = Object.assign(Object.assign({\n          prefixCls: `${prefixCls}-title`\n        }, getTitleBasicProps(hasAvatar, hasParagraph)), getComponentProps(title));\n        $title = /*#__PURE__*/React.createElement(Title, Object.assign({}, titleProps));\n      } // Paragraph\n\n\n      let paragraphNode;\n\n      if (hasParagraph) {\n        const paragraphProps = Object.assign(Object.assign({\n          prefixCls: `${prefixCls}-paragraph`\n        }, getParagraphBasicProps(hasAvatar, hasTitle)), getComponentProps(paragraph));\n        paragraphNode = /*#__PURE__*/React.createElement(Paragraph, Object.assign({}, paragraphProps));\n      }\n\n      contentNode = /*#__PURE__*/React.createElement(\"div\", {\n        className: `${prefixCls}-content`\n      }, $title, paragraphNode);\n    }\n\n    const cls = classNames(prefixCls, {\n      [`${prefixCls}-with-avatar`]: hasAvatar,\n      [`${prefixCls}-active`]: active,\n      [`${prefixCls}-rtl`]: direction === 'rtl',\n      [`${prefixCls}-round`]: round\n    }, skeleton === null || skeleton === void 0 ? void 0 : skeleton.className, className, rootClassName, hashId);\n    return wrapSSR( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls,\n      style: Object.assign(Object.assign({}, skeleton === null || skeleton === void 0 ? void 0 : skeleton.style), style)\n    }, avatarNode, contentNode));\n  }\n\n  return typeof children !== 'undefined' ? children : null;\n};\n\nSkeleton.Button = SkeletonButton;\nSkeleton.Avatar = SkeletonAvatar;\nSkeleton.Input = SkeletonInput;\nSkeleton.Image = SkeletonImage;\nSkeleton.Node = SkeletonNode;\n\nif (process.env.NODE_ENV !== 'production') {\n  Skeleton.displayName = 'Skeleton';\n}\n\nexport default Skeleton;","map":{"version":3,"sources":["/Users/ravisrivastava/Downloads/newbcom/node_modules/antd/es/skeleton/Skeleton.js"],"names":["classNames","React","ConfigContext","SkeletonAvatar","SkeletonButton","Element","SkeletonImage","SkeletonInput","SkeletonNode","Paragraph","Title","useStyle","getComponentProps","prop","getAvatarBasicProps","hasTitle","hasParagraph","size","shape","getTitleBasicProps","hasAvatar","width","getParagraphBasicProps","basicProps","rows","Skeleton","props","prefixCls","customizePrefixCls","loading","className","rootClassName","style","children","avatar","title","paragraph","active","round","getPrefixCls","direction","skeleton","useContext","wrapSSR","hashId","avatarNode","avatarProps","Object","assign","createElement","contentNode","$title","titleProps","paragraphNode","paragraphProps","cls","Button","Avatar","Input","Image","Node","process","env","NODE_ENV","displayName"],"mappings":"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","sourcesContent":["\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { ConfigContext } from '../config-provider';\nimport SkeletonAvatar from './Avatar';\nimport SkeletonButton from './Button';\nimport Element from './Element';\nimport SkeletonImage from './Image';\nimport SkeletonInput from './Input';\nimport SkeletonNode from './Node';\nimport Paragraph from './Paragraph';\nimport Title from './Title';\nimport useStyle from './style';\nfunction getComponentProps(prop) {\n  if (prop && typeof prop === 'object') {\n    return prop;\n  }\n  return {};\n}\nfunction getAvatarBasicProps(hasTitle, hasParagraph) {\n  if (hasTitle && !hasParagraph) {\n    // Square avatar\n    return {\n      size: 'large',\n      shape: 'square'\n    };\n  }\n  return {\n    size: 'large',\n    shape: 'circle'\n  };\n}\nfunction getTitleBasicProps(hasAvatar, hasParagraph) {\n  if (!hasAvatar && hasParagraph) {\n    return {\n      width: '38%'\n    };\n  }\n  if (hasAvatar && hasParagraph) {\n    return {\n      width: '50%'\n    };\n  }\n  return {};\n}\nfunction getParagraphBasicProps(hasAvatar, hasTitle) {\n  const basicProps = {};\n  // Width\n  if (!hasAvatar || !hasTitle) {\n    basicProps.width = '61%';\n  }\n  // Rows\n  if (!hasAvatar && hasTitle) {\n    basicProps.rows = 3;\n  } else {\n    basicProps.rows = 2;\n  }\n  return basicProps;\n}\nconst Skeleton = props => {\n  const {\n    prefixCls: customizePrefixCls,\n    loading,\n    className,\n    rootClassName,\n    style,\n    children,\n    avatar = false,\n    title = true,\n    paragraph = true,\n    active,\n    round\n  } = props;\n  const {\n    getPrefixCls,\n    direction,\n    skeleton\n  } = React.useContext(ConfigContext);\n  const prefixCls = getPrefixCls('skeleton', customizePrefixCls);\n  const [wrapSSR, hashId] = useStyle(prefixCls);\n  if (loading || !('loading' in props)) {\n    const hasAvatar = !!avatar;\n    const hasTitle = !!title;\n    const hasParagraph = !!paragraph;\n    // Avatar\n    let avatarNode;\n    if (hasAvatar) {\n      const avatarProps = Object.assign(Object.assign({\n        prefixCls: `${prefixCls}-avatar`\n      }, getAvatarBasicProps(hasTitle, hasParagraph)), getComponentProps(avatar));\n      // We direct use SkeletonElement as avatar in skeleton internal.\n      avatarNode = /*#__PURE__*/React.createElement(\"div\", {\n        className: `${prefixCls}-header`\n      }, /*#__PURE__*/React.createElement(Element, Object.assign({}, avatarProps)));\n    }\n    let contentNode;\n    if (hasTitle || hasParagraph) {\n      // Title\n      let $title;\n      if (hasTitle) {\n        const titleProps = Object.assign(Object.assign({\n          prefixCls: `${prefixCls}-title`\n        }, getTitleBasicProps(hasAvatar, hasParagraph)), getComponentProps(title));\n        $title = /*#__PURE__*/React.createElement(Title, Object.assign({}, titleProps));\n      }\n      // Paragraph\n      let paragraphNode;\n      if (hasParagraph) {\n        const paragraphProps = Object.assign(Object.assign({\n          prefixCls: `${prefixCls}-paragraph`\n        }, getParagraphBasicProps(hasAvatar, hasTitle)), getComponentProps(paragraph));\n        paragraphNode = /*#__PURE__*/React.createElement(Paragraph, Object.assign({}, paragraphProps));\n      }\n      contentNode = /*#__PURE__*/React.createElement(\"div\", {\n        className: `${prefixCls}-content`\n      }, $title, paragraphNode);\n    }\n    const cls = classNames(prefixCls, {\n      [`${prefixCls}-with-avatar`]: hasAvatar,\n      [`${prefixCls}-active`]: active,\n      [`${prefixCls}-rtl`]: direction === 'rtl',\n      [`${prefixCls}-round`]: round\n    }, skeleton === null || skeleton === void 0 ? void 0 : skeleton.className, className, rootClassName, hashId);\n    return wrapSSR( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls,\n      style: Object.assign(Object.assign({}, skeleton === null || skeleton === void 0 ? void 0 : skeleton.style), style)\n    }, avatarNode, contentNode));\n  }\n  return typeof children !== 'undefined' ? children : null;\n};\nSkeleton.Button = SkeletonButton;\nSkeleton.Avatar = SkeletonAvatar;\nSkeleton.Input = SkeletonInput;\nSkeleton.Image = SkeletonImage;\nSkeleton.Node = SkeletonNode;\nif (process.env.NODE_ENV !== 'production') {\n  Skeleton.displayName = 'Skeleton';\n}\nexport default Skeleton;"]},"metadata":{},"sourceType":"module"}