{"ast":null,"code":"import { setTime as utilSetTime } from \"../utils/timeUtil\";\nexport default function useTimeSelection(_ref) {\n  var value = _ref.value,\n      generateConfig = _ref.generateConfig,\n      disabledMinutes = _ref.disabledMinutes,\n      disabledSeconds = _ref.disabledSeconds,\n      minutes = _ref.minutes,\n      seconds = _ref.seconds,\n      use12Hours = _ref.use12Hours;\n\n  var setTime = function setTime(isNewPM, newHour, newMinute, newSecond) {\n    var now = generateConfig.getNow();\n    var newDate = value || now;\n    var newFormattedHour = !use12Hours || !isNewPM ? newHour : newHour + 12;\n    var mergedHour = newHour < 0 ? generateConfig.getHour(now) : newFormattedHour;\n    var mergedMinute = newMinute < 0 ? generateConfig.getMinute(now) : newMinute;\n    var mergedSecond = newSecond < 0 ? generateConfig.getSecond(now) : newSecond;\n    var newDisabledMinutes = disabledMinutes && disabledMinutes(mergedHour);\n\n    if (newDisabledMinutes !== null && newDisabledMinutes !== void 0 && newDisabledMinutes.includes(mergedMinute)) {\n      // find the first available minute in minutes\n      var availableMinute = minutes.find(function (i) {\n        return !newDisabledMinutes.includes(i.value);\n      });\n\n      if (availableMinute) {\n        mergedMinute = availableMinute.value;\n      } else {\n        return null;\n      }\n    }\n\n    var newDisabledSeconds = disabledSeconds && disabledSeconds(mergedHour, mergedMinute);\n\n    if (newDisabledSeconds !== null && newDisabledSeconds !== void 0 && newDisabledSeconds.includes(mergedSecond)) {\n      // find the first available second in seconds\n      var availableSecond = seconds.find(function (i) {\n        return !newDisabledSeconds.includes(i.value);\n      });\n\n      if (availableSecond) {\n        mergedSecond = availableSecond.value;\n      } else {\n        return null;\n      }\n    }\n\n    newDate = utilSetTime(generateConfig, newDate, mergedHour, mergedMinute, mergedSecond);\n    return newDate;\n  };\n\n  return setTime;\n}","map":{"version":3,"sources":["/Users/ravisrivastava/Downloads/newbcom2/newbcom/node_modules/rc-picker/es/hooks/useTimeSelection.js"],"names":["setTime","utilSetTime","useTimeSelection","_ref","value","generateConfig","disabledMinutes","disabledSeconds","minutes","seconds","use12Hours","isNewPM","newHour","newMinute","newSecond","now","getNow","newDate","newFormattedHour","mergedHour","getHour","mergedMinute","getMinute","mergedSecond","getSecond","newDisabledMinutes","includes","availableMinute","find","i","newDisabledSeconds","availableSecond"],"mappings":"AAAA,SAASA,OAAO,IAAIC,WAApB,QAAuC,mBAAvC;AACA,eAAe,SAASC,gBAAT,CAA0BC,IAA1B,EAAgC;AAC7C,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACEC,cAAc,GAAGF,IAAI,CAACE,cADxB;AAAA,MAEEC,eAAe,GAAGH,IAAI,CAACG,eAFzB;AAAA,MAGEC,eAAe,GAAGJ,IAAI,CAACI,eAHzB;AAAA,MAIEC,OAAO,GAAGL,IAAI,CAACK,OAJjB;AAAA,MAKEC,OAAO,GAAGN,IAAI,CAACM,OALjB;AAAA,MAMEC,UAAU,GAAGP,IAAI,CAACO,UANpB;;AAOA,MAAIV,OAAO,GAAG,SAASA,OAAT,CAAiBW,OAAjB,EAA0BC,OAA1B,EAAmCC,SAAnC,EAA8CC,SAA9C,EAAyD;AACrE,QAAIC,GAAG,GAAGV,cAAc,CAACW,MAAf,EAAV;AACA,QAAIC,OAAO,GAAGb,KAAK,IAAIW,GAAvB;AACA,QAAIG,gBAAgB,GAAG,CAACR,UAAD,IAAe,CAACC,OAAhB,GAA0BC,OAA1B,GAAoCA,OAAO,GAAG,EAArE;AACA,QAAIO,UAAU,GAAGP,OAAO,GAAG,CAAV,GAAcP,cAAc,CAACe,OAAf,CAAuBL,GAAvB,CAAd,GAA4CG,gBAA7D;AACA,QAAIG,YAAY,GAAGR,SAAS,GAAG,CAAZ,GAAgBR,cAAc,CAACiB,SAAf,CAAyBP,GAAzB,CAAhB,GAAgDF,SAAnE;AACA,QAAIU,YAAY,GAAGT,SAAS,GAAG,CAAZ,GAAgBT,cAAc,CAACmB,SAAf,CAAyBT,GAAzB,CAAhB,GAAgDD,SAAnE;AACA,QAAIW,kBAAkB,GAAGnB,eAAe,IAAIA,eAAe,CAACa,UAAD,CAA3D;;AACA,QAAIM,kBAAkB,KAAK,IAAvB,IAA+BA,kBAAkB,KAAK,KAAK,CAA3D,IAAgEA,kBAAkB,CAACC,QAAnB,CAA4BL,YAA5B,CAApE,EAA+G;AAC7G;AACA,UAAIM,eAAe,GAAGnB,OAAO,CAACoB,IAAR,CAAa,UAAUC,CAAV,EAAa;AAC9C,eAAO,CAACJ,kBAAkB,CAACC,QAAnB,CAA4BG,CAAC,CAACzB,KAA9B,CAAR;AACD,OAFqB,CAAtB;;AAGA,UAAIuB,eAAJ,EAAqB;AACnBN,QAAAA,YAAY,GAAGM,eAAe,CAACvB,KAA/B;AACD,OAFD,MAEO;AACL,eAAO,IAAP;AACD;AACF;;AACD,QAAI0B,kBAAkB,GAAGvB,eAAe,IAAIA,eAAe,CAACY,UAAD,EAAaE,YAAb,CAA3D;;AACA,QAAIS,kBAAkB,KAAK,IAAvB,IAA+BA,kBAAkB,KAAK,KAAK,CAA3D,IAAgEA,kBAAkB,CAACJ,QAAnB,CAA4BH,YAA5B,CAApE,EAA+G;AAC7G;AACA,UAAIQ,eAAe,GAAGtB,OAAO,CAACmB,IAAR,CAAa,UAAUC,CAAV,EAAa;AAC9C,eAAO,CAACC,kBAAkB,CAACJ,QAAnB,CAA4BG,CAAC,CAACzB,KAA9B,CAAR;AACD,OAFqB,CAAtB;;AAGA,UAAI2B,eAAJ,EAAqB;AACnBR,QAAAA,YAAY,GAAGQ,eAAe,CAAC3B,KAA/B;AACD,OAFD,MAEO;AACL,eAAO,IAAP;AACD;AACF;;AACDa,IAAAA,OAAO,GAAGhB,WAAW,CAACI,cAAD,EAAiBY,OAAjB,EAA0BE,UAA1B,EAAsCE,YAAtC,EAAoDE,YAApD,CAArB;AACA,WAAON,OAAP;AACD,GAjCD;;AAkCA,SAAOjB,OAAP;AACD","sourcesContent":["import { setTime as utilSetTime } from \"../utils/timeUtil\";\nexport default function useTimeSelection(_ref) {\n  var value = _ref.value,\n    generateConfig = _ref.generateConfig,\n    disabledMinutes = _ref.disabledMinutes,\n    disabledSeconds = _ref.disabledSeconds,\n    minutes = _ref.minutes,\n    seconds = _ref.seconds,\n    use12Hours = _ref.use12Hours;\n  var setTime = function setTime(isNewPM, newHour, newMinute, newSecond) {\n    var now = generateConfig.getNow();\n    var newDate = value || now;\n    var newFormattedHour = !use12Hours || !isNewPM ? newHour : newHour + 12;\n    var mergedHour = newHour < 0 ? generateConfig.getHour(now) : newFormattedHour;\n    var mergedMinute = newMinute < 0 ? generateConfig.getMinute(now) : newMinute;\n    var mergedSecond = newSecond < 0 ? generateConfig.getSecond(now) : newSecond;\n    var newDisabledMinutes = disabledMinutes && disabledMinutes(mergedHour);\n    if (newDisabledMinutes !== null && newDisabledMinutes !== void 0 && newDisabledMinutes.includes(mergedMinute)) {\n      // find the first available minute in minutes\n      var availableMinute = minutes.find(function (i) {\n        return !newDisabledMinutes.includes(i.value);\n      });\n      if (availableMinute) {\n        mergedMinute = availableMinute.value;\n      } else {\n        return null;\n      }\n    }\n    var newDisabledSeconds = disabledSeconds && disabledSeconds(mergedHour, mergedMinute);\n    if (newDisabledSeconds !== null && newDisabledSeconds !== void 0 && newDisabledSeconds.includes(mergedSecond)) {\n      // find the first available second in seconds\n      var availableSecond = seconds.find(function (i) {\n        return !newDisabledSeconds.includes(i.value);\n      });\n      if (availableSecond) {\n        mergedSecond = availableSecond.value;\n      } else {\n        return null;\n      }\n    }\n    newDate = utilSetTime(generateConfig, newDate, mergedHour, mergedMinute, mergedSecond);\n    return newDate;\n  };\n  return setTime;\n}"]},"metadata":{},"sourceType":"module"}