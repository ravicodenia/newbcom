{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { generateColor } from '../util';\n\nfunction hasValue(value) {\n  return value !== undefined;\n}\n\nconst useColorState = (defaultStateValue, option) => {\n  const {\n    defaultValue,\n    value\n  } = option;\n  const [colorValue, setColorValue] = useState(() => {\n    let mergeState;\n\n    if (hasValue(value)) {\n      mergeState = value;\n    } else if (hasValue(defaultValue)) {\n      mergeState = defaultValue;\n    } else {\n      mergeState = defaultStateValue;\n    }\n\n    return generateColor(mergeState || '');\n  });\n  useEffect(() => {\n    if (value) {\n      setColorValue(generateColor(value));\n    }\n  }, [value]);\n  return [colorValue, setColorValue];\n};\n\nexport default useColorState;","map":{"version":3,"sources":["/Users/ravisrivastava/Downloads/newbcom/node_modules/antd/es/color-picker/hooks/useColorState.js"],"names":["useEffect","useState","generateColor","hasValue","value","undefined","useColorState","defaultStateValue","option","defaultValue","colorValue","setColorValue","mergeState"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,aAAT,QAA8B,SAA9B;;AACA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,SAAOA,KAAK,KAAKC,SAAjB;AACD;;AACD,MAAMC,aAAa,GAAG,CAACC,iBAAD,EAAoBC,MAApB,KAA+B;AACnD,QAAM;AACJC,IAAAA,YADI;AAEJL,IAAAA;AAFI,MAGFI,MAHJ;AAIA,QAAM,CAACE,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAC,MAAM;AACjD,QAAIW,UAAJ;;AACA,QAAIT,QAAQ,CAACC,KAAD,CAAZ,EAAqB;AACnBQ,MAAAA,UAAU,GAAGR,KAAb;AACD,KAFD,MAEO,IAAID,QAAQ,CAACM,YAAD,CAAZ,EAA4B;AACjCG,MAAAA,UAAU,GAAGH,YAAb;AACD,KAFM,MAEA;AACLG,MAAAA,UAAU,GAAGL,iBAAb;AACD;;AACD,WAAOL,aAAa,CAACU,UAAU,IAAI,EAAf,CAApB;AACD,GAV2C,CAA5C;AAWAZ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAII,KAAJ,EAAW;AACTO,MAAAA,aAAa,CAACT,aAAa,CAACE,KAAD,CAAd,CAAb;AACD;AACF,GAJQ,EAIN,CAACA,KAAD,CAJM,CAAT;AAKA,SAAO,CAACM,UAAD,EAAaC,aAAb,CAAP;AACD,CAtBD;;AAuBA,eAAeL,aAAf","sourcesContent":["import { useEffect, useState } from 'react';\nimport { generateColor } from '../util';\nfunction hasValue(value) {\n  return value !== undefined;\n}\nconst useColorState = (defaultStateValue, option) => {\n  const {\n    defaultValue,\n    value\n  } = option;\n  const [colorValue, setColorValue] = useState(() => {\n    let mergeState;\n    if (hasValue(value)) {\n      mergeState = value;\n    } else if (hasValue(defaultValue)) {\n      mergeState = defaultValue;\n    } else {\n      mergeState = defaultStateValue;\n    }\n    return generateColor(mergeState || '');\n  });\n  useEffect(() => {\n    if (value) {\n      setColorValue(generateColor(value));\n    }\n  }, [value]);\n  return [colorValue, setColorValue];\n};\nexport default useColorState;"]},"metadata":{},"sourceType":"module"}