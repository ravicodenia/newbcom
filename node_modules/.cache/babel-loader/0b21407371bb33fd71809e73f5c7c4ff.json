{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport CascaderContext from \"../context\";\nimport { SEARCH_MARK } from \"../hooks/useSearchOptions\";\nimport { isLeaf, toPathKey } from \"../utils/commonUtil\";\nimport Checkbox from \"./Checkbox\";\nexport var FIX_LABEL = '__cascader_fix_label__';\nexport default function Column(_ref) {\n  var prefixCls = _ref.prefixCls,\n      multiple = _ref.multiple,\n      options = _ref.options,\n      activeValue = _ref.activeValue,\n      prevValuePath = _ref.prevValuePath,\n      onToggleOpen = _ref.onToggleOpen,\n      onSelect = _ref.onSelect,\n      onActive = _ref.onActive,\n      checkedSet = _ref.checkedSet,\n      halfCheckedSet = _ref.halfCheckedSet,\n      loadingKeys = _ref.loadingKeys,\n      isSelectable = _ref.isSelectable,\n      searchValue = _ref.searchValue;\n  var menuPrefixCls = \"\".concat(prefixCls, \"-menu\");\n  var menuItemPrefixCls = \"\".concat(prefixCls, \"-menu-item\");\n\n  var _React$useContext = React.useContext(CascaderContext),\n      fieldNames = _React$useContext.fieldNames,\n      changeOnSelect = _React$useContext.changeOnSelect,\n      expandTrigger = _React$useContext.expandTrigger,\n      expandIcon = _React$useContext.expandIcon,\n      loadingIcon = _React$useContext.loadingIcon,\n      dropdownMenuColumnStyle = _React$useContext.dropdownMenuColumnStyle;\n\n  var hoverOpen = expandTrigger === 'hover'; // ============================ Option ============================\n\n  var optionInfoList = React.useMemo(function () {\n    return options.map(function (option) {\n      var _option$FIX_LABEL;\n\n      var disabled = option.disabled,\n          disableCheckbox = option.disableCheckbox;\n      var searchOptions = option[SEARCH_MARK];\n      var label = (_option$FIX_LABEL = option[FIX_LABEL]) !== null && _option$FIX_LABEL !== void 0 ? _option$FIX_LABEL : option[fieldNames.label];\n      var value = option[fieldNames.value];\n      var isMergedLeaf = isLeaf(option, fieldNames); // Get real value of option. Search option is different way.\n\n      var fullPath = searchOptions ? searchOptions.map(function (opt) {\n        return opt[fieldNames.value];\n      }) : [].concat(_toConsumableArray(prevValuePath), [value]);\n      var fullPathKey = toPathKey(fullPath);\n      var isLoading = loadingKeys.includes(fullPathKey); // >>>>> checked\n\n      var checked = checkedSet.has(fullPathKey); // >>>>> halfChecked\n\n      var halfChecked = halfCheckedSet.has(fullPathKey);\n      return {\n        disabled: disabled,\n        label: label,\n        value: value,\n        isLeaf: isMergedLeaf,\n        isLoading: isLoading,\n        checked: checked,\n        halfChecked: halfChecked,\n        option: option,\n        disableCheckbox: disableCheckbox,\n        fullPath: fullPath,\n        fullPathKey: fullPathKey\n      };\n    });\n  }, [options, checkedSet, fieldNames, halfCheckedSet, loadingKeys, prevValuePath]); // ============================ Render ============================\n\n  return /*#__PURE__*/React.createElement(\"ul\", {\n    className: menuPrefixCls,\n    role: \"menu\"\n  }, optionInfoList.map(function (_ref2) {\n    var _classNames;\n\n    var disabled = _ref2.disabled,\n        label = _ref2.label,\n        value = _ref2.value,\n        isMergedLeaf = _ref2.isLeaf,\n        isLoading = _ref2.isLoading,\n        checked = _ref2.checked,\n        halfChecked = _ref2.halfChecked,\n        option = _ref2.option,\n        fullPath = _ref2.fullPath,\n        fullPathKey = _ref2.fullPathKey,\n        disableCheckbox = _ref2.disableCheckbox; // >>>>> Open\n\n    var triggerOpenPath = function triggerOpenPath() {\n      if (disabled || searchValue) {\n        return;\n      }\n\n      var nextValueCells = _toConsumableArray(fullPath);\n\n      if (hoverOpen && isMergedLeaf) {\n        nextValueCells.pop();\n      }\n\n      onActive(nextValueCells);\n    }; // >>>>> Selection\n\n\n    var triggerSelect = function triggerSelect() {\n      if (isSelectable(option)) {\n        onSelect(fullPath, isMergedLeaf);\n      }\n    }; // >>>>> Title\n\n\n    var title;\n\n    if (typeof option.title === 'string') {\n      title = option.title;\n    } else if (typeof label === 'string') {\n      title = label;\n    } // >>>>> Render\n\n\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: fullPathKey,\n      className: classNames(menuItemPrefixCls, (_classNames = {}, _defineProperty(_classNames, \"\".concat(menuItemPrefixCls, \"-expand\"), !isMergedLeaf), _defineProperty(_classNames, \"\".concat(menuItemPrefixCls, \"-active\"), activeValue === value || activeValue === fullPathKey), _defineProperty(_classNames, \"\".concat(menuItemPrefixCls, \"-disabled\"), disabled), _defineProperty(_classNames, \"\".concat(menuItemPrefixCls, \"-loading\"), isLoading), _classNames)),\n      style: dropdownMenuColumnStyle,\n      role: \"menuitemcheckbox\",\n      title: title,\n      \"aria-checked\": checked,\n      \"data-path-key\": fullPathKey,\n      onClick: function onClick() {\n        triggerOpenPath();\n\n        if (disableCheckbox) {\n          return;\n        }\n\n        if (!multiple || isMergedLeaf) {\n          triggerSelect();\n        }\n      },\n      onDoubleClick: function onDoubleClick() {\n        if (changeOnSelect) {\n          onToggleOpen(false);\n        }\n      },\n      onMouseEnter: function onMouseEnter() {\n        if (hoverOpen) {\n          triggerOpenPath();\n        }\n      },\n      onMouseDown: function onMouseDown(e) {\n        // Prevent selector from blurring\n        e.preventDefault();\n      }\n    }, multiple && /*#__PURE__*/React.createElement(Checkbox, {\n      prefixCls: \"\".concat(prefixCls, \"-checkbox\"),\n      checked: checked,\n      halfChecked: halfChecked,\n      disabled: disabled || disableCheckbox,\n      disableCheckbox: disableCheckbox,\n      onClick: function onClick(e) {\n        if (disableCheckbox) {\n          return;\n        }\n\n        e.stopPropagation();\n        triggerSelect();\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\".concat(menuItemPrefixCls, \"-content\")\n    }, label), !isLoading && expandIcon && !isMergedLeaf && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\".concat(menuItemPrefixCls, \"-expand-icon\")\n    }, expandIcon), isLoading && loadingIcon && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\".concat(menuItemPrefixCls, \"-loading-icon\")\n    }, loadingIcon));\n  }));\n}","map":{"version":3,"sources":["/Users/ravisrivastava/Downloads/newbcom/node_modules/rc-cascader/es/OptionList/Column.js"],"names":["_defineProperty","_toConsumableArray","classNames","React","CascaderContext","SEARCH_MARK","isLeaf","toPathKey","Checkbox","FIX_LABEL","Column","_ref","prefixCls","multiple","options","activeValue","prevValuePath","onToggleOpen","onSelect","onActive","checkedSet","halfCheckedSet","loadingKeys","isSelectable","searchValue","menuPrefixCls","concat","menuItemPrefixCls","_React$useContext","useContext","fieldNames","changeOnSelect","expandTrigger","expandIcon","loadingIcon","dropdownMenuColumnStyle","hoverOpen","optionInfoList","useMemo","map","option","_option$FIX_LABEL","disabled","disableCheckbox","searchOptions","label","value","isMergedLeaf","fullPath","opt","fullPathKey","isLoading","includes","checked","has","halfChecked","createElement","className","role","_ref2","_classNames","triggerOpenPath","nextValueCells","pop","triggerSelect","title","key","style","onClick","onDoubleClick","onMouseEnter","onMouseDown","e","preventDefault","stopPropagation"],"mappings":"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","sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport CascaderContext from \"../context\";\nimport { SEARCH_MARK } from \"../hooks/useSearchOptions\";\nimport { isLeaf, toPathKey } from \"../utils/commonUtil\";\nimport Checkbox from \"./Checkbox\";\nexport var FIX_LABEL = '__cascader_fix_label__';\nexport default function Column(_ref) {\n  var prefixCls = _ref.prefixCls,\n    multiple = _ref.multiple,\n    options = _ref.options,\n    activeValue = _ref.activeValue,\n    prevValuePath = _ref.prevValuePath,\n    onToggleOpen = _ref.onToggleOpen,\n    onSelect = _ref.onSelect,\n    onActive = _ref.onActive,\n    checkedSet = _ref.checkedSet,\n    halfCheckedSet = _ref.halfCheckedSet,\n    loadingKeys = _ref.loadingKeys,\n    isSelectable = _ref.isSelectable,\n    searchValue = _ref.searchValue;\n  var menuPrefixCls = \"\".concat(prefixCls, \"-menu\");\n  var menuItemPrefixCls = \"\".concat(prefixCls, \"-menu-item\");\n  var _React$useContext = React.useContext(CascaderContext),\n    fieldNames = _React$useContext.fieldNames,\n    changeOnSelect = _React$useContext.changeOnSelect,\n    expandTrigger = _React$useContext.expandTrigger,\n    expandIcon = _React$useContext.expandIcon,\n    loadingIcon = _React$useContext.loadingIcon,\n    dropdownMenuColumnStyle = _React$useContext.dropdownMenuColumnStyle;\n  var hoverOpen = expandTrigger === 'hover';\n\n  // ============================ Option ============================\n  var optionInfoList = React.useMemo(function () {\n    return options.map(function (option) {\n      var _option$FIX_LABEL;\n      var disabled = option.disabled,\n        disableCheckbox = option.disableCheckbox;\n      var searchOptions = option[SEARCH_MARK];\n      var label = (_option$FIX_LABEL = option[FIX_LABEL]) !== null && _option$FIX_LABEL !== void 0 ? _option$FIX_LABEL : option[fieldNames.label];\n      var value = option[fieldNames.value];\n      var isMergedLeaf = isLeaf(option, fieldNames);\n\n      // Get real value of option. Search option is different way.\n      var fullPath = searchOptions ? searchOptions.map(function (opt) {\n        return opt[fieldNames.value];\n      }) : [].concat(_toConsumableArray(prevValuePath), [value]);\n      var fullPathKey = toPathKey(fullPath);\n      var isLoading = loadingKeys.includes(fullPathKey);\n\n      // >>>>> checked\n      var checked = checkedSet.has(fullPathKey);\n\n      // >>>>> halfChecked\n      var halfChecked = halfCheckedSet.has(fullPathKey);\n      return {\n        disabled: disabled,\n        label: label,\n        value: value,\n        isLeaf: isMergedLeaf,\n        isLoading: isLoading,\n        checked: checked,\n        halfChecked: halfChecked,\n        option: option,\n        disableCheckbox: disableCheckbox,\n        fullPath: fullPath,\n        fullPathKey: fullPathKey\n      };\n    });\n  }, [options, checkedSet, fieldNames, halfCheckedSet, loadingKeys, prevValuePath]);\n\n  // ============================ Render ============================\n  return /*#__PURE__*/React.createElement(\"ul\", {\n    className: menuPrefixCls,\n    role: \"menu\"\n  }, optionInfoList.map(function (_ref2) {\n    var _classNames;\n    var disabled = _ref2.disabled,\n      label = _ref2.label,\n      value = _ref2.value,\n      isMergedLeaf = _ref2.isLeaf,\n      isLoading = _ref2.isLoading,\n      checked = _ref2.checked,\n      halfChecked = _ref2.halfChecked,\n      option = _ref2.option,\n      fullPath = _ref2.fullPath,\n      fullPathKey = _ref2.fullPathKey,\n      disableCheckbox = _ref2.disableCheckbox;\n    // >>>>> Open\n    var triggerOpenPath = function triggerOpenPath() {\n      if (disabled || searchValue) {\n        return;\n      }\n      var nextValueCells = _toConsumableArray(fullPath);\n      if (hoverOpen && isMergedLeaf) {\n        nextValueCells.pop();\n      }\n      onActive(nextValueCells);\n    };\n\n    // >>>>> Selection\n    var triggerSelect = function triggerSelect() {\n      if (isSelectable(option)) {\n        onSelect(fullPath, isMergedLeaf);\n      }\n    };\n\n    // >>>>> Title\n    var title;\n    if (typeof option.title === 'string') {\n      title = option.title;\n    } else if (typeof label === 'string') {\n      title = label;\n    }\n\n    // >>>>> Render\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: fullPathKey,\n      className: classNames(menuItemPrefixCls, (_classNames = {}, _defineProperty(_classNames, \"\".concat(menuItemPrefixCls, \"-expand\"), !isMergedLeaf), _defineProperty(_classNames, \"\".concat(menuItemPrefixCls, \"-active\"), activeValue === value || activeValue === fullPathKey), _defineProperty(_classNames, \"\".concat(menuItemPrefixCls, \"-disabled\"), disabled), _defineProperty(_classNames, \"\".concat(menuItemPrefixCls, \"-loading\"), isLoading), _classNames)),\n      style: dropdownMenuColumnStyle,\n      role: \"menuitemcheckbox\",\n      title: title,\n      \"aria-checked\": checked,\n      \"data-path-key\": fullPathKey,\n      onClick: function onClick() {\n        triggerOpenPath();\n        if (disableCheckbox) {\n          return;\n        }\n        if (!multiple || isMergedLeaf) {\n          triggerSelect();\n        }\n      },\n      onDoubleClick: function onDoubleClick() {\n        if (changeOnSelect) {\n          onToggleOpen(false);\n        }\n      },\n      onMouseEnter: function onMouseEnter() {\n        if (hoverOpen) {\n          triggerOpenPath();\n        }\n      },\n      onMouseDown: function onMouseDown(e) {\n        // Prevent selector from blurring\n        e.preventDefault();\n      }\n    }, multiple && /*#__PURE__*/React.createElement(Checkbox, {\n      prefixCls: \"\".concat(prefixCls, \"-checkbox\"),\n      checked: checked,\n      halfChecked: halfChecked,\n      disabled: disabled || disableCheckbox,\n      disableCheckbox: disableCheckbox,\n      onClick: function onClick(e) {\n        if (disableCheckbox) {\n          return;\n        }\n        e.stopPropagation();\n        triggerSelect();\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\".concat(menuItemPrefixCls, \"-content\")\n    }, label), !isLoading && expandIcon && !isMergedLeaf && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\".concat(menuItemPrefixCls, \"-expand-icon\")\n    }, expandIcon), isLoading && loadingIcon && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\".concat(menuItemPrefixCls, \"-loading-icon\")\n    }, loadingIcon));\n  }));\n}"]},"metadata":{},"sourceType":"module"}