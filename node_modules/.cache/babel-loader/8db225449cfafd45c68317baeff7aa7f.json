{"ast":null,"code":"import { notification, Modal } from 'antd';\nimport codeMessage from './codeMessage';\n\nconst successHandler = function (response) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    notifyOnSuccess: false,\n    notifyOnFailed: true\n  };\n  const {\n    data\n  } = response;\n\n  if (data && data.success === true) {\n    const message = response.data && data.message;\n    const successText = message || codeMessage[response.status];\n\n    if (options.notifyOnSuccess) {\n      notification.config({\n        duration: 5\n      });\n      notification.success({\n        message: `Request success`,\n        description: successText\n      });\n    }\n  } else {\n    const message = response.data && data.message;\n    const errorText = message || codeMessage[response.status];\n    const {\n      status\n    } = response;\n\n    if (options.notifyOnFailed) {\n      // notification.config({\n      //   duration: 5,\n      // });\n      // notification.error({\n      //   message: `Request error ${status}`,\n      //   description: errorText,\n      // });\n      Modal.error({\n        closable: true,\n        title: `Request error ${status}`,\n        content: errorText\n      });\n    }\n  }\n};\n\nexport default successHandler;","map":{"version":3,"sources":["/Users/ravisrivastava/Downloads/newbcom/src/request/successHandler.js"],"names":["notification","Modal","codeMessage","successHandler","response","options","notifyOnSuccess","notifyOnFailed","data","success","message","successText","status","config","duration","description","errorText","error","closable","title","content"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,KAAvB,QAAoC,MAApC;AAEA,OAAOC,WAAP,MAAwB,eAAxB;;AAEA,MAAMC,cAAc,GAAG,UAACC,QAAD,EAA0E;AAAA,MAA/DC,OAA+D,uEAArD;AAAEC,IAAAA,eAAe,EAAE,KAAnB;AAA0BC,IAAAA,cAAc,EAAE;AAA1C,GAAqD;AAC/F,QAAM;AAAEC,IAAAA;AAAF,MAAWJ,QAAjB;;AACA,MAAII,IAAI,IAAIA,IAAI,CAACC,OAAL,KAAiB,IAA7B,EAAmC;AACjC,UAAMC,OAAO,GAAGN,QAAQ,CAACI,IAAT,IAAiBA,IAAI,CAACE,OAAtC;AACA,UAAMC,WAAW,GAAGD,OAAO,IAAIR,WAAW,CAACE,QAAQ,CAACQ,MAAV,CAA1C;;AAEA,QAAIP,OAAO,CAACC,eAAZ,EAA6B;AAC3BN,MAAAA,YAAY,CAACa,MAAb,CAAoB;AAClBC,QAAAA,QAAQ,EAAE;AADQ,OAApB;AAGAd,MAAAA,YAAY,CAACS,OAAb,CAAqB;AACnBC,QAAAA,OAAO,EAAG,iBADS;AAEnBK,QAAAA,WAAW,EAAEJ;AAFM,OAArB;AAID;AACF,GAbD,MAaO;AACL,UAAMD,OAAO,GAAGN,QAAQ,CAACI,IAAT,IAAiBA,IAAI,CAACE,OAAtC;AACA,UAAMM,SAAS,GAAGN,OAAO,IAAIR,WAAW,CAACE,QAAQ,CAACQ,MAAV,CAAxC;AACA,UAAM;AAAEA,MAAAA;AAAF,QAAaR,QAAnB;;AACA,QAAIC,OAAO,CAACE,cAAZ,EAA4B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACAN,MAAAA,KAAK,CAACgB,KAAN,CAAY;AACVC,QAAAA,QAAQ,EAAE,IADA;AAEVC,QAAAA,KAAK,EAAG,iBAAgBP,MAAO,EAFrB;AAGVQ,QAAAA,OAAO,EAAEJ;AAHC,OAAZ;AAKD;AACF;AACF,CAlCD;;AAoCA,eAAeb,cAAf","sourcesContent":["import { notification, Modal } from 'antd';\n\nimport codeMessage from './codeMessage';\n\nconst successHandler = (response, options = { notifyOnSuccess: false, notifyOnFailed: true }) => {\n  const { data } = response;\n  if (data && data.success === true) {\n    const message = response.data && data.message;\n    const successText = message || codeMessage[response.status];\n\n    if (options.notifyOnSuccess) {\n      notification.config({\n        duration: 5,\n      });\n      notification.success({\n        message: `Request success`,\n        description: successText,\n      });\n    }\n  } else {\n    const message = response.data && data.message;\n    const errorText = message || codeMessage[response.status];\n    const { status } = response;\n    if (options.notifyOnFailed) {\n      // notification.config({\n      //   duration: 5,\n      // });\n      // notification.error({\n      //   message: `Request error ${status}`,\n      //   description: errorText,\n      // });\n      Modal.error({\n        closable: true,\n        title: `Request error ${status}`,\n        content: errorText,\n      });\n    }\n  }\n};\n\nexport default successHandler;\n"]},"metadata":{},"sourceType":"module"}