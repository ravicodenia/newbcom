{"ast":null,"code":"\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport pickAttrs from \"rc-util/es/pickAttrs\";\nimport { ConfigContext } from '../config-provider';\nimport useSize from '../config-provider/hooks/useSize';\nimport { RadioGroupContextProvider } from './context';\nimport Radio from './radio';\nimport useStyle from './style';\nconst RadioGroup = /*#__PURE__*/React.forwardRef((props, ref) => {\n  const {\n    getPrefixCls,\n    direction\n  } = React.useContext(ConfigContext);\n  const [value, setValue] = useMergedState(props.defaultValue, {\n    value: props.value\n  });\n\n  const onRadioChange = ev => {\n    const lastValue = value;\n    const val = ev.target.value;\n\n    if (!('value' in props)) {\n      setValue(val);\n    }\n\n    const {\n      onChange\n    } = props;\n\n    if (onChange && val !== lastValue) {\n      onChange(ev);\n    }\n  };\n\n  const {\n    prefixCls: customizePrefixCls,\n    className,\n    rootClassName,\n    options,\n    buttonStyle = 'outline',\n    disabled,\n    children,\n    size: customizeSize,\n    style,\n    id,\n    onMouseEnter,\n    onMouseLeave,\n    onFocus,\n    onBlur\n  } = props;\n  const prefixCls = getPrefixCls('radio', customizePrefixCls);\n  const groupPrefixCls = `${prefixCls}-group`; // Style\n\n  const [wrapSSR, hashId] = useStyle(prefixCls);\n  let childrenToRender = children; // 如果存在 options, 优先使用\n\n  if (options && options.length > 0) {\n    childrenToRender = options.map(option => {\n      if (typeof option === 'string' || typeof option === 'number') {\n        // 此处类型自动推导为 string\n        return /*#__PURE__*/React.createElement(Radio, {\n          key: option.toString(),\n          prefixCls: prefixCls,\n          disabled: disabled,\n          value: option,\n          checked: value === option\n        }, option);\n      } // 此处类型自动推导为 { label: string value: string }\n\n\n      return /*#__PURE__*/React.createElement(Radio, {\n        key: `radio-group-value-options-${option.value}`,\n        prefixCls: prefixCls,\n        disabled: option.disabled || disabled,\n        value: option.value,\n        checked: value === option.value,\n        title: option.title,\n        style: option.style\n      }, option.label);\n    });\n  }\n\n  const mergedSize = useSize(customizeSize);\n  const classString = classNames(groupPrefixCls, `${groupPrefixCls}-${buttonStyle}`, {\n    [`${groupPrefixCls}-${mergedSize}`]: mergedSize,\n    [`${groupPrefixCls}-rtl`]: direction === 'rtl'\n  }, className, rootClassName, hashId);\n  return wrapSSR( /*#__PURE__*/React.createElement(\"div\", Object.assign({}, pickAttrs(props, {\n    aria: true,\n    data: true\n  }), {\n    className: classString,\n    style: style,\n    onMouseEnter: onMouseEnter,\n    onMouseLeave: onMouseLeave,\n    onFocus: onFocus,\n    onBlur: onBlur,\n    id: id,\n    ref: ref\n  }), /*#__PURE__*/React.createElement(RadioGroupContextProvider, {\n    value: {\n      onChange: onRadioChange,\n      value,\n      disabled: props.disabled,\n      name: props.name,\n      optionType: props.optionType\n    }\n  }, childrenToRender)));\n});\nexport default /*#__PURE__*/React.memo(RadioGroup);","map":{"version":3,"sources":["/Users/ravisrivastava/Downloads/newbcom/node_modules/antd/es/radio/group.js"],"names":["React","classNames","useMergedState","pickAttrs","ConfigContext","useSize","RadioGroupContextProvider","Radio","useStyle","RadioGroup","forwardRef","props","ref","getPrefixCls","direction","useContext","value","setValue","defaultValue","onRadioChange","ev","lastValue","val","target","onChange","prefixCls","customizePrefixCls","className","rootClassName","options","buttonStyle","disabled","children","size","customizeSize","style","id","onMouseEnter","onMouseLeave","onFocus","onBlur","groupPrefixCls","wrapSSR","hashId","childrenToRender","length","map","option","createElement","key","toString","checked","title","label","mergedSize","classString","Object","assign","aria","data","name","optionType","memo"],"mappings":"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","sourcesContent":["\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport pickAttrs from \"rc-util/es/pickAttrs\";\nimport { ConfigContext } from '../config-provider';\nimport useSize from '../config-provider/hooks/useSize';\nimport { RadioGroupContextProvider } from './context';\nimport Radio from './radio';\nimport useStyle from './style';\nconst RadioGroup = /*#__PURE__*/React.forwardRef((props, ref) => {\n  const {\n    getPrefixCls,\n    direction\n  } = React.useContext(ConfigContext);\n  const [value, setValue] = useMergedState(props.defaultValue, {\n    value: props.value\n  });\n  const onRadioChange = ev => {\n    const lastValue = value;\n    const val = ev.target.value;\n    if (!('value' in props)) {\n      setValue(val);\n    }\n    const {\n      onChange\n    } = props;\n    if (onChange && val !== lastValue) {\n      onChange(ev);\n    }\n  };\n  const {\n    prefixCls: customizePrefixCls,\n    className,\n    rootClassName,\n    options,\n    buttonStyle = 'outline',\n    disabled,\n    children,\n    size: customizeSize,\n    style,\n    id,\n    onMouseEnter,\n    onMouseLeave,\n    onFocus,\n    onBlur\n  } = props;\n  const prefixCls = getPrefixCls('radio', customizePrefixCls);\n  const groupPrefixCls = `${prefixCls}-group`;\n  // Style\n  const [wrapSSR, hashId] = useStyle(prefixCls);\n  let childrenToRender = children;\n  // 如果存在 options, 优先使用\n  if (options && options.length > 0) {\n    childrenToRender = options.map(option => {\n      if (typeof option === 'string' || typeof option === 'number') {\n        // 此处类型自动推导为 string\n        return /*#__PURE__*/React.createElement(Radio, {\n          key: option.toString(),\n          prefixCls: prefixCls,\n          disabled: disabled,\n          value: option,\n          checked: value === option\n        }, option);\n      }\n      // 此处类型自动推导为 { label: string value: string }\n      return /*#__PURE__*/React.createElement(Radio, {\n        key: `radio-group-value-options-${option.value}`,\n        prefixCls: prefixCls,\n        disabled: option.disabled || disabled,\n        value: option.value,\n        checked: value === option.value,\n        title: option.title,\n        style: option.style\n      }, option.label);\n    });\n  }\n  const mergedSize = useSize(customizeSize);\n  const classString = classNames(groupPrefixCls, `${groupPrefixCls}-${buttonStyle}`, {\n    [`${groupPrefixCls}-${mergedSize}`]: mergedSize,\n    [`${groupPrefixCls}-rtl`]: direction === 'rtl'\n  }, className, rootClassName, hashId);\n  return wrapSSR( /*#__PURE__*/React.createElement(\"div\", Object.assign({}, pickAttrs(props, {\n    aria: true,\n    data: true\n  }), {\n    className: classString,\n    style: style,\n    onMouseEnter: onMouseEnter,\n    onMouseLeave: onMouseLeave,\n    onFocus: onFocus,\n    onBlur: onBlur,\n    id: id,\n    ref: ref\n  }), /*#__PURE__*/React.createElement(RadioGroupContextProvider, {\n    value: {\n      onChange: onRadioChange,\n      value,\n      disabled: props.disabled,\n      name: props.name,\n      optionType: props.optionType\n    }\n  }, childrenToRender)));\n});\nexport default /*#__PURE__*/React.memo(RadioGroup);"]},"metadata":{},"sourceType":"module"}