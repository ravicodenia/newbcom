{"ast":null,"code":"\"use client\";\n\nimport * as React from 'react';\nimport { render } from \"rc-util/es/React/render\";\nimport ConfigProvider, { globalConfig, warnContext } from '../config-provider';\nimport PurePanel from './PurePanel';\nimport useNotification, { useInternalNotification } from './useNotification';\nlet notification = null;\n\nlet act = callback => callback();\n\nlet taskQueue = [];\nlet defaultGlobalConfig = {};\n\nfunction getGlobalContext() {\n  const {\n    prefixCls: globalPrefixCls,\n    getContainer: globalGetContainer,\n    rtl,\n    maxCount,\n    top,\n    bottom\n  } = defaultGlobalConfig;\n  const mergedPrefixCls = globalPrefixCls !== null && globalPrefixCls !== void 0 ? globalPrefixCls : globalConfig().getPrefixCls('notification');\n  const mergedContainer = (globalGetContainer === null || globalGetContainer === void 0 ? void 0 : globalGetContainer()) || document.body;\n  return {\n    prefixCls: mergedPrefixCls,\n    getContainer: () => mergedContainer,\n    rtl,\n    maxCount,\n    top,\n    bottom\n  };\n}\n\nconst GlobalHolder = /*#__PURE__*/React.forwardRef((_, ref) => {\n  const [notificationConfig, setNotificationConfig] = React.useState(getGlobalContext);\n  const [api, holder] = useInternalNotification(notificationConfig);\n  const global = globalConfig();\n  const rootPrefixCls = global.getRootPrefixCls();\n  const rootIconPrefixCls = global.getIconPrefixCls();\n  const theme = global.getTheme();\n\n  const sync = () => {\n    setNotificationConfig(getGlobalContext);\n  };\n\n  React.useEffect(sync, []);\n  React.useImperativeHandle(ref, () => {\n    const instance = Object.assign({}, api);\n    Object.keys(instance).forEach(method => {\n      instance[method] = function () {\n        sync();\n        return api[method].apply(api, arguments);\n      };\n    });\n    return {\n      instance,\n      sync\n    };\n  });\n  return /*#__PURE__*/React.createElement(ConfigProvider, {\n    prefixCls: rootPrefixCls,\n    iconPrefixCls: rootIconPrefixCls,\n    theme: theme\n  }, holder);\n});\n\nfunction flushNotice() {\n  if (!notification) {\n    const holderFragment = document.createDocumentFragment();\n    const newNotification = {\n      fragment: holderFragment\n    };\n    notification = newNotification; // Delay render to avoid sync issue\n\n    act(() => {\n      render( /*#__PURE__*/React.createElement(GlobalHolder, {\n        ref: node => {\n          const {\n            instance,\n            sync\n          } = node || {};\n          Promise.resolve().then(() => {\n            if (!newNotification.instance && instance) {\n              newNotification.instance = instance;\n              newNotification.sync = sync;\n              flushNotice();\n            }\n          });\n        }\n      }), holderFragment);\n    });\n    return;\n  } // Notification not ready\n\n\n  if (!notification.instance) {\n    return;\n  } // >>> Execute task\n\n\n  taskQueue.forEach(task => {\n    // eslint-disable-next-line default-case\n    switch (task.type) {\n      case 'open':\n        {\n          act(() => {\n            notification.instance.open(Object.assign(Object.assign({}, defaultGlobalConfig), task.config));\n          });\n          break;\n        }\n\n      case 'destroy':\n        act(() => {\n          notification === null || notification === void 0 ? void 0 : notification.instance.destroy(task.key);\n        });\n        break;\n    }\n  }); // Clean up\n\n  taskQueue = [];\n} // ==============================================================================\n// ==                                  Export                                  ==\n// ==============================================================================\n\n\nfunction setNotificationGlobalConfig(config) {\n  defaultGlobalConfig = Object.assign(Object.assign({}, defaultGlobalConfig), config); // Trigger sync for it\n\n  act(() => {\n    var _a;\n\n    (_a = notification === null || notification === void 0 ? void 0 : notification.sync) === null || _a === void 0 ? void 0 : _a.call(notification);\n  });\n}\n\nfunction open(config) {\n  // Warning if exist theme\n  if (process.env.NODE_ENV !== 'production') {\n    warnContext('notification');\n  }\n\n  taskQueue.push({\n    type: 'open',\n    config\n  });\n  flushNotice();\n}\n\nfunction destroy(key) {\n  taskQueue.push({\n    type: 'destroy',\n    key\n  });\n  flushNotice();\n}\n\nconst methods = ['success', 'info', 'warning', 'error'];\nconst baseStaticMethods = {\n  open,\n  destroy,\n  config: setNotificationGlobalConfig,\n  useNotification,\n  _InternalPanelDoNotUseOrYouWillBeFired: PurePanel\n};\nconst staticMethods = baseStaticMethods;\nmethods.forEach(type => {\n  staticMethods[type] = config => open(Object.assign(Object.assign({}, config), {\n    type\n  }));\n}); // ==============================================================================\n// ==                                   Test                                   ==\n// ==============================================================================\n\nconst noop = () => {};\n/** @internal Only Work in test env */\n// eslint-disable-next-line import/no-mutable-exports\n\n\nexport let actWrapper = noop;\n\nif (process.env.NODE_ENV === 'test') {\n  actWrapper = wrapper => {\n    act = wrapper;\n  };\n}\n\nexport default staticMethods;","map":{"version":3,"sources":["/Users/ravisrivastava/Downloads/newbcom/node_modules/antd/es/notification/index.js"],"names":["React","render","ConfigProvider","globalConfig","warnContext","PurePanel","useNotification","useInternalNotification","notification","act","callback","taskQueue","defaultGlobalConfig","getGlobalContext","prefixCls","globalPrefixCls","getContainer","globalGetContainer","rtl","maxCount","top","bottom","mergedPrefixCls","getPrefixCls","mergedContainer","document","body","GlobalHolder","forwardRef","_","ref","notificationConfig","setNotificationConfig","useState","api","holder","global","rootPrefixCls","getRootPrefixCls","rootIconPrefixCls","getIconPrefixCls","theme","getTheme","sync","useEffect","useImperativeHandle","instance","Object","assign","keys","forEach","method","apply","arguments","createElement","iconPrefixCls","flushNotice","holderFragment","createDocumentFragment","newNotification","fragment","node","Promise","resolve","then","task","type","open","config","destroy","key","setNotificationGlobalConfig","_a","call","process","env","NODE_ENV","push","methods","baseStaticMethods","_InternalPanelDoNotUseOrYouWillBeFired","staticMethods","noop","actWrapper","wrapper"],"mappings":"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","sourcesContent":["\"use client\";\n\nimport * as React from 'react';\nimport { render } from \"rc-util/es/React/render\";\nimport ConfigProvider, { globalConfig, warnContext } from '../config-provider';\nimport PurePanel from './PurePanel';\nimport useNotification, { useInternalNotification } from './useNotification';\nlet notification = null;\nlet act = callback => callback();\nlet taskQueue = [];\nlet defaultGlobalConfig = {};\nfunction getGlobalContext() {\n  const {\n    prefixCls: globalPrefixCls,\n    getContainer: globalGetContainer,\n    rtl,\n    maxCount,\n    top,\n    bottom\n  } = defaultGlobalConfig;\n  const mergedPrefixCls = globalPrefixCls !== null && globalPrefixCls !== void 0 ? globalPrefixCls : globalConfig().getPrefixCls('notification');\n  const mergedContainer = (globalGetContainer === null || globalGetContainer === void 0 ? void 0 : globalGetContainer()) || document.body;\n  return {\n    prefixCls: mergedPrefixCls,\n    getContainer: () => mergedContainer,\n    rtl,\n    maxCount,\n    top,\n    bottom\n  };\n}\nconst GlobalHolder = /*#__PURE__*/React.forwardRef((_, ref) => {\n  const [notificationConfig, setNotificationConfig] = React.useState(getGlobalContext);\n  const [api, holder] = useInternalNotification(notificationConfig);\n  const global = globalConfig();\n  const rootPrefixCls = global.getRootPrefixCls();\n  const rootIconPrefixCls = global.getIconPrefixCls();\n  const theme = global.getTheme();\n  const sync = () => {\n    setNotificationConfig(getGlobalContext);\n  };\n  React.useEffect(sync, []);\n  React.useImperativeHandle(ref, () => {\n    const instance = Object.assign({}, api);\n    Object.keys(instance).forEach(method => {\n      instance[method] = function () {\n        sync();\n        return api[method].apply(api, arguments);\n      };\n    });\n    return {\n      instance,\n      sync\n    };\n  });\n  return /*#__PURE__*/React.createElement(ConfigProvider, {\n    prefixCls: rootPrefixCls,\n    iconPrefixCls: rootIconPrefixCls,\n    theme: theme\n  }, holder);\n});\nfunction flushNotice() {\n  if (!notification) {\n    const holderFragment = document.createDocumentFragment();\n    const newNotification = {\n      fragment: holderFragment\n    };\n    notification = newNotification;\n    // Delay render to avoid sync issue\n    act(() => {\n      render( /*#__PURE__*/React.createElement(GlobalHolder, {\n        ref: node => {\n          const {\n            instance,\n            sync\n          } = node || {};\n          Promise.resolve().then(() => {\n            if (!newNotification.instance && instance) {\n              newNotification.instance = instance;\n              newNotification.sync = sync;\n              flushNotice();\n            }\n          });\n        }\n      }), holderFragment);\n    });\n    return;\n  }\n  // Notification not ready\n  if (!notification.instance) {\n    return;\n  }\n  // >>> Execute task\n  taskQueue.forEach(task => {\n    // eslint-disable-next-line default-case\n    switch (task.type) {\n      case 'open':\n        {\n          act(() => {\n            notification.instance.open(Object.assign(Object.assign({}, defaultGlobalConfig), task.config));\n          });\n          break;\n        }\n      case 'destroy':\n        act(() => {\n          notification === null || notification === void 0 ? void 0 : notification.instance.destroy(task.key);\n        });\n        break;\n    }\n  });\n  // Clean up\n  taskQueue = [];\n}\n// ==============================================================================\n// ==                                  Export                                  ==\n// ==============================================================================\nfunction setNotificationGlobalConfig(config) {\n  defaultGlobalConfig = Object.assign(Object.assign({}, defaultGlobalConfig), config);\n  // Trigger sync for it\n  act(() => {\n    var _a;\n    (_a = notification === null || notification === void 0 ? void 0 : notification.sync) === null || _a === void 0 ? void 0 : _a.call(notification);\n  });\n}\nfunction open(config) {\n  // Warning if exist theme\n  if (process.env.NODE_ENV !== 'production') {\n    warnContext('notification');\n  }\n  taskQueue.push({\n    type: 'open',\n    config\n  });\n  flushNotice();\n}\nfunction destroy(key) {\n  taskQueue.push({\n    type: 'destroy',\n    key\n  });\n  flushNotice();\n}\nconst methods = ['success', 'info', 'warning', 'error'];\nconst baseStaticMethods = {\n  open,\n  destroy,\n  config: setNotificationGlobalConfig,\n  useNotification,\n  _InternalPanelDoNotUseOrYouWillBeFired: PurePanel\n};\nconst staticMethods = baseStaticMethods;\nmethods.forEach(type => {\n  staticMethods[type] = config => open(Object.assign(Object.assign({}, config), {\n    type\n  }));\n});\n// ==============================================================================\n// ==                                   Test                                   ==\n// ==============================================================================\nconst noop = () => {};\n/** @internal Only Work in test env */\n// eslint-disable-next-line import/no-mutable-exports\nexport let actWrapper = noop;\nif (process.env.NODE_ENV === 'test') {\n  actWrapper = wrapper => {\n    act = wrapper;\n  };\n}\nexport default staticMethods;"]},"metadata":{},"sourceType":"module"}